import React, { memo } from 'react';
import PropTypes from 'prop-types';
import { MainBackground, Content, View, InputDots, KeyBoardView, Text, HelperStyle, Logo } from 'react-native-minerva';
import Images from 'bch-assets';
import Footer from './components/Footer';

/**
 * Componente Login.
 *
 * @component
 */
const Login = ({ logo, userName, inputDots, keyBoardView, footerButtons, greeting, imageBackgroundSource }) => {
    const imageBackground = {
        source: imageBackgroundSource,
        style: {
            position: 'absolute',
            width: '100%',
            height: '100%',
            overflow: 'hidden',
            zIndex: 3,
        },
        imageStyle: {
            opacity: 0.1,
            resizeMode: 'cover',
            position: 'absolute',
            height: '100%',
            top: 0,
            left: 0,
        },
    };
    const linearGradient = {
        style: {
            zIndex: 2,
            flex: 1,
        },
    };

    const getGreeting = () => {
        if (greeting) return greeting;
        return `Â¡Hola, ${userName}!`;
    };

    const greetingUserName = getGreeting();

    return (
        <MainBackground collapsingHeaderBackground imageBackground={imageBackground} linearGradient={linearGradient}>
            <Content
                style={[HelperStyle.ph_4, HelperStyle.pt_headerStatusbar]}
                bounces={false}
                contentContainerStyle={HelperStyle.flx_grow}
            >
                <View style={[HelperStyle.as_c, HelperStyle.mb_2]}>
                    <Logo type={logo} style={HelperStyle.mb_6} />
                    <Text
                        style={[HelperStyle.ta_c, HelperStyle.white, HelperStyle.mb_5]}
                        numberOfLines={1}
                        ellipsizeMode="tail"
                        accessibilityLabel={greetingUserName}
                        accessibilityHint={greetingUserName}
                        testID={greetingUserName}
                    >
                        {greetingUserName}
                    </Text>
                    <InputDots
                        accessible={false}
                        ref={inputDots?.inputRef}
                        length={inputDots?.length}
                        code={inputDots?.code}
                        onFulfill={inputDots?.onFulfill}
                        errorMessage={inputDots?.errorMessage}
                        loading={inputDots?.loading}
                        errorStyle={[HelperStyle.pt_5, inputDots?.errorStyle]}
                    />
                </View>
                <View style={[HelperStyle.flx_i, HelperStyle.jc_c]}>
                    <KeyBoardView
                        addValue={keyBoardView?.addValue}
                        onChange={keyBoardView?.onChange}
                        white
                        disabled={keyBoardView?.disabled}
                        biometricAvailable={keyBoardView?.biometricAvailable}
                        iconBiometricsName={keyBoardView?.iconBiometricsName}
                    />
                </View>
            </Content>
            <Footer footerButtons={footerButtons} />
        </MainBackground>
    );
};

Login.propTypes = {
    imageBackgroundSource: PropTypes.oneOfType([
        PropTypes.shape({
            uri: PropTypes.string,
        }),
        PropTypes.number,
        PropTypes.arrayOf(PropTypes.any),
    ]),
    logo: PropTypes.string.isRequired,
    userName: PropTypes.string.isRequired,
    inputDots: PropTypes.shape({
        inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({ current: PropTypes.elementType })]),
        length: PropTypes.number,
        code: PropTypes.arrayOf(PropTypes.number),
        onFulfill: PropTypes.func,
        errorMessage: PropTypes.string,
        loading: PropTypes.bool,
        errorStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
    }).isRequired,
    keyBoardView: PropTypes.shape({
        addValue: PropTypes.func,
        onChange: PropTypes.func,
        disabled: PropTypes.bool,
        biometricAvailable: PropTypes.bool,
        iconBiometricsName: PropTypes.string,
    }).isRequired,
    footerButtons: PropTypes.arrayOf(
        PropTypes.shape({
            title: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
            props: PropTypes.shape({
                onPress: PropTypes.func,
            }),
        }),
    ).isRequired,
    greeting: PropTypes.string,
};
Login.defaultProps = {
    greeting: '',
    imageBackgroundSource: Images.bg.login,
};

export default memo(Login);
