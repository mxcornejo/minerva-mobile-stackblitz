import React, { memo, useEffect, useState } from 'react';
import { isFunction } from 'lodash';
import { useDrawerStatus } from '@react-navigation/drawer';
import { StatusBar, HelperStyle, Container } from 'react-native-minerva';
import { FlatList } from 'react-native';
import { menuPropTypes, menuDefaultProps } from '../types';
import HeaderMenu from '../components/HeaderMenu';
import BodyMenuItem from '../components/BodyMenuItem';

const propTypes = {
    route: menuPropTypes.route,
    navigation: menuPropTypes.navigation,
};

const defaultProps = {
    route: {
        params: {
            menuOptions: menuDefaultProps.menuOptions,
            actionCerrarMenu: menuDefaultProps.actionCerrarMenu,
            user: menuDefaultProps.user,
            renderMenuFooter: menuDefaultProps.renderMenuFooter,
            hiddenAvatar: menuDefaultProps.hiddenAvatar,
            disabledHeaderTouch: menuDefaultProps.disabledHeaderTouch,
        },
    },
    navigation: menuDefaultProps.navigation,
};

const Menu = (props) => {
    const isDrawerOpen = useDrawerStatus() === 'open';
    const { route, navigation } = props;
    const { menuOptions, actionCerrarMenu, user, hiddenAvatar, renderMenuFooter, disabledHeaderTouch } = route.params;
    const [listMenuOptions, setListMenuOptions] = useState(menuOptions);
    const keyExtractor = (item, index) => `item-${index}-${item?.title}`;

    useEffect(() => {
        setListMenuOptions(menuOptions);
    }, [menuOptions]);

    const renderItems = ({ item, index }) => {
        const toggleCollapse = () => {
            const optionsMenuAux = [...listMenuOptions];
            optionsMenuAux[index].collapsed = !item?.collapsed;
            setListMenuOptions(optionsMenuAux);
        };
        const hasSubMenu = item?.options && !item?.collapsed;
        const onPress = item?.options ? toggleCollapse : item?.action;
        const shadowCard = !hasSubMenu;
        const colorStyle = hasSubMenu ? HelperStyle.primary : HelperStyle.gray;
        const data = { ...item, onPress, shadowCard, colorStyle };
        return <BodyMenuItem data={data} />;
    };

    const closeDrawer = () => (isFunction(navigation?.closeDrawer) ? navigation?.closeDrawer() : null);

    const getActionCerrarMenu = actionCerrarMenu || closeDrawer;

    const getHeader = () => (
        <HeaderMenu
            disabledHeaderTouch={disabledHeaderTouch}
            actionCerrarMenu={getActionCerrarMenu}
            user={user}
            hiddenAvatar={hiddenAvatar}
        />
    );

    const getFooter = () => {
        if (renderMenuFooter) return renderMenuFooter;
        return null;
    };

    return (
        <Container style={HelperStyle.bg_white}>
            {isDrawerOpen && <StatusBar barStyle="dark-content" />}
            <FlatList
                data={listMenuOptions}
                bounces={false}
                renderItem={renderItems}
                keyExtractor={keyExtractor}
                style={HelperStyle.pb_4}
                contentContainerStyle={HelperStyle.flx_grow}
                ListHeaderComponent={getHeader}
                ListFooterComponent={getFooter}
            />
        </Container>
    );
};

Menu.propTypes = propTypes;
Menu.defaultProps = defaultProps;

export default memo(Menu);
