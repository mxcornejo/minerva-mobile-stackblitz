import React, { memo } from 'react';
import PropTypes from 'prop-types';
import { FlatList, TouchableOpacity } from 'react-native';
import {
    HelperStyle,
    Card,
    CardItem,
    Left,
    Body,
    Right,
    View,
    Text,
    Icon,
    Collapsible,
    Badge,
    Scale,
} from 'react-native-minerva';
import labels from '../labelAutomatizacion';

const propTypes = {
    data: PropTypes.shape({
        shadowCard: PropTypes.bool,
        onPress: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
        icon: PropTypes.string,
        title: PropTypes.string,
        collapsed: PropTypes.bool,
        colorStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
        options: PropTypes.arrayOf(
            PropTypes.shape({
                text: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
                action: PropTypes.oneOfType([PropTypes.string, PropTypes.array, PropTypes.func]),
                newOption: PropTypes.bool,
            }),
        ),
        newOptionIcon: PropTypes.bool,
    }).isRequired,
};

const BodyMenuItem = ({ data }) => {
    const { shadowCard, onPress, icon, title, collapsed, colorStyle, options, newOptionIcon } = data;
    const keyExtractor = (kItem, kIndex) => `item-${kIndex}-${kItem?.title}`;

    const newOptionIconStyle = { fontSize: Scale(8) };

    const renderNewOptionIcon = () =>
        newOptionIcon && (
            <Icon
                style={[newOptionIconStyle, HelperStyle.warning]}
                name="icon-bch-circle-fill"
                accessibilityLabel={labels.menu.ICONO_NUEVO}
                testID={labels.menu.ICONO_NUEVO}
            />
        );

    const renderNewOptionBadge = (visible) =>
        visible && (
            <Badge
                warning
                text={labels.menu.TEXTO_BADGE}
                style={HelperStyle.ml_2}
                accessibilityLabel={labels.menu.ICONO_NUEVO}
                testID={labels.menu.ICONO_NUEVO}
            />
        );

    const renderRigth = () => {
        if (options) {
            const iconDown = {
                style: HelperStyle.gray,
                name: 'icon-bch-chevron-down',
                accessibilityLabel: labels.menu.MOSTRAR_SUBMENU,
                testID: labels.menu.MOSTRAR_SUBMENU,
            };
            const iconUp = {
                style: HelperStyle.primary,
                name: 'icon-bch-chevron-up',
                accessibilityLabel: labels.menu.CERRAR_SUBMENU,
                testID: labels.menu.CERRAR_SUBMENU,
            };
            const propsIcon = collapsed ? iconDown : iconUp;
            return (
                <Right>
                    <Icon
                        style={[HelperStyle.fs_1, propsIcon.style]}
                        name={propsIcon.name}
                        accessible
                        accessibilityLabel={propsIcon.accessibilityLabel}
                        testID={propsIcon.testID}
                    />
                </Right>
            );
        }
        return null;
    };

    const renderSubItem = ({ item }) => {
        const { title: subItemTitle, action, newOption } = item;
        const wrapperStyle = [HelperStyle.flx_i, HelperStyle.pa_2, HelperStyle.pl_6];
        const renderText = () => (
            <View style={[HelperStyle.flx_i, HelperStyle.flx_row]}>
                <Text
                    style={[HelperStyle.mb_0, HelperStyle.pl_2]}
                    accessibilityLabel={subItemTitle}
                    testID={subItemTitle}
                >
                    {subItemTitle}
                </Text>
                {renderNewOptionBadge(newOption)}
            </View>
        );
        if (action) {
            return (
                <TouchableOpacity testID={`Botón ${subItemTitle}`} onPress={action} style={wrapperStyle}>
                    {renderText()}
                </TouchableOpacity>
            );
        }
        return <View style={wrapperStyle}>{renderText()}</View>;
    };

    const renderSubItemList = () =>
        options && (
            <Collapsible collapsed={collapsed} accessible={false}>
                <CardItem avatar style={HelperStyle.pt_0} accessible={false}>
                    <FlatList
                        data={options}
                        renderItem={renderSubItem}
                        keyExtractor={keyExtractor}
                        initialNumToRender={options.length}
                    />
                </CardItem>
            </Collapsible>
        );
    const hasOnPres = onPress ? { button: true, onPress } : { button: false, onPress };
    return (
        <Card noShadow={shadowCard} style={[HelperStyle.mr_4, HelperStyle.ml_4]}>
            <CardItem
                avatar
                activeOpacity={0.8}
                accessible={false}
                onPress={hasOnPres?.onPress}
                button={hasOnPres?.button}
                testID={`Botón ${title}`}
            >
                <Left style={HelperStyle.as_fs}>
                    <Icon
                        name={icon}
                        style={[HelperStyle.ta_c, colorStyle]}
                        accessible
                        accessibilityLabel={`${labels.menu.ICONO_DE} ${title}`}
                        testID={`${labels.menu.ICONO_DE} ${title}`}
                    />
                </Left>
                <Body style={HelperStyle.jc_c}>
                    <View style={HelperStyle.flx_row}>
                        <Text style={[HelperStyle.mb_0, colorStyle]} accessibilityLabel={title} testID={title}>
                            {title}
                        </Text>
                        {renderNewOptionIcon()}
                    </View>
                </Body>
                {renderRigth()}
            </CardItem>
            {renderSubItemList()}
        </Card>
    );
};

BodyMenuItem.propTypes = propTypes;

export default memo(BodyMenuItem);
