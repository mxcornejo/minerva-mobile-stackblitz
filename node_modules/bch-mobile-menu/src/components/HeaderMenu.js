import React, { memo } from 'react';
import { HelperStyle, Header, Icon, Button, Right, Left, H4, View, Text } from 'react-native-minerva';
import { TouchableOpacity } from 'react-native';
import labels from '../labelAutomatizacion';
import AvatarName from './AvatarName';
import { menuPropTypes, menuDefaultProps } from '../types';

const propTypes = {
    actionCerrarMenu: menuPropTypes.actionCerrarMenu,
    user: menuPropTypes.user,
    disabledHeaderTouch: menuPropTypes.disabledHeaderTouch,
    hiddenAvatar: menuPropTypes.hiddenAvatar,
};

const defaultProps = {
    actionCerrarMenu: menuDefaultProps.actionCerrarMenu,
    user: menuDefaultProps.user,
    hiddenAvatar: menuDefaultProps.hiddenAvatar,
    disabledHeaderTouch: menuDefaultProps.disabledHeaderTouch,
};

const HeaderMenu = ({ actionCerrarMenu, user, hiddenAvatar, disabledHeaderTouch }) => {
    const { name, lastName, onPressEditLink, onPressAvatar, loadingAvatar, image } = user;
    const fullName = `${name} ${lastName}`;

    const renderUserName = () => {
        const userName = () => <H4 style={HelperStyle.mb_0}>{fullName}</H4>;
        if (onPressEditLink) {
            return (
                <View style={HelperStyle.flx_i}>
                    {userName()}
                    <TouchableOpacity
                        style={[HelperStyle.flx_row, HelperStyle.ai_c]}
                        onPress={onPressEditLink}
                        accessible={false}
                    >
                        <Icon name="icon-bch-edit" style={[HelperStyle.primary, HelperStyle.fs_1, HelperStyle.mr_1]} />
                        <Text
                            numberOfLines={1}
                            ellipsizeMode="tail"
                            smaller
                            uppercase
                            bold
                            style={[HelperStyle.primary, HelperStyle.mb_0]}
                            accessibilityLabel={labels.header.EDITAR_PERFIL}
                            testID={labels.header.EDITAR_PERFIL}
                        >
                            {labels.header.EDITAR_PERFIL}
                        </Text>
                    </TouchableOpacity>
                </View>
            );
        }
        return userName();
    };

    const renderUserAvatar = () => {
        const renderAvatarName = () => (
            <AvatarName
                name={name}
                lastName={lastName}
                loading={loadingAvatar}
                accessibilityLabel={labels.header.AVATAR}
                testID={labels.header.AVATAR}
                image={image}
            />
        );
        if (onPressAvatar) {
            return (
                <TouchableOpacity style={HelperStyle.as_c} onPress={onPressAvatar} accessible={false}>
                    {renderAvatarName()}
                </TouchableOpacity>
            );
        }
        return renderAvatarName();
    };

    const renderAvatar = () =>
        !hiddenAvatar && (
            <Left>
                {renderUserAvatar()}
                {renderUserName()}
            </Left>
        );

    return (
        <Header disabled={disabledHeaderTouch} accessible={false} style={HelperStyle.mb_4}>
            {renderAvatar()}
            <Right style={HelperStyle.pr_2}>
                <Button link primary onPress={actionCerrarMenu} style={HelperStyle.as_fe}>
                    <Icon
                        style={[HelperStyle.gray_dark, HelperStyle.fs_3, HelperStyle.ma_2]}
                        name="icon-bch-close"
                        accessible
                        accessibilityLabel={labels.header.VOLVER_ATRAS}
                        testID={labels.header.VOLVER_ATRAS}
                    />
                </Button>
            </Right>
        </Header>
    );
};

HeaderMenu.propTypes = propTypes;
HeaderMenu.defaultProps = defaultProps;

export default memo(HeaderMenu);
