{"version":3,"sources":["../../../src/basic/Checkbox.js"],"names":["CheckBox","variables","props","color","checked","checkboxType","borderColor","checkStyle","borderRadius","getBorderRadius","checkboxBgColor","backgroundColor","checkboxDefaultColor","CheckboxRadius","defaultProps","style","getInitialStyle","tickColor","iconName","context","theme","variable","platformStyle","platform","defaultIconName","PLATFORM","IOS","MATERIAL","_root","c","prepareRootProps","checkboxTickColor","fontSize","CheckboxFontSize","lineHeight","CheckboxIconSize","marginTop","CheckboxIconMarginTop","textShadowRadius","checkboxTextShadowRadius","Component","contextTypes","PropTypes","object","propTypes","TouchableOpacity","oneOfType","number","array","bool","onPress","func","string","StyledCheckBox","mapPropsToStyleNames"],"mappings":"21BAAA,4B,2CACA,qC,mDACA,yCACA,4D,iDACA,iEAEA,mE,yEACA,qD,iDACA,2DACA,mD,67BAEMA,S,0SAKYC,S,CAAW,YAC6B,KAAKC,KADlC,CACjBC,KADiB,QACjBA,KADiB,CACVC,OADU,QACVA,OADU,CACDC,YADC,QACDA,YADC,CACaC,WADb,QACaA,WADb,CAEzB,MAAO,CACLC,WAAY,CACVC,aAAc,KAAKC,eAAL,CAAqBJ,YAArB,CAAmCJ,SAAnC,CADJ,CAEVK,YAAaA,aAAeH,KAAf,EAAwBF,UAAUS,eAFrC,CAGVC,gBACEP,UAAY,IAAZ,CACID,OAASF,UAAUS,eADvB,CAEIT,UAAUW,oBANN,CADP,CAAP,CAUD,C,wDAGeP,Y,CAAcJ,S,CAAW,CACvC,GAAII,eAAiB,SAArB,CAAgC,CAC9B,MAAO,GAAP,CACD,CACD,GAAIA,eAAiB,QAArB,CAA+B,CAC7B,MAAO,EAAP,CACD,CACD,MAAOJ,WAAUY,cAAjB,CACD,C,0DAEgBZ,S,CAAW,CAC1B,GAAMa,cAAe,CACnBC,MAAO,KAAKC,eAAL,CAAqBf,SAArB,EAAgCM,UADpB,CAArB,CAIA,MAAO,2BAAa,KAAKL,KAAlB,CAAyBY,YAAzB,CAAP,CACD,C,uCACQ,6BACkC,KAAKZ,KADvC,CACCE,OADD,SACCA,OADD,CACUa,SADV,SACUA,SADV,CACqBC,QADrB,SACqBA,QADrB,CAGP,GAAMjB,WAAY,KAAKkB,OAAL,CAAaC,KAAb,CACd,KAAKD,OAAL,CAAaC,KAAb,CAAmB,4BAAnB,EAAiDnB,SADnC,CAEdoB,kBAFJ,CAGA,GAAMC,eAAgBrB,UAAUqB,aAAhC,CACA,GAAMC,UAAWtB,UAAUsB,QAA3B,CACA,GAAMC,iBAAkBD,WAAaE,sBAASC,GAAtB,EAA6BJ,gBAAkBG,sBAASE,QAAxD,CAAmE,eAAnE,CAAqF,cAA7G,CACA,MACE,+BAAC,6BAAD,WACE,IAAK,sBAAM,QAAKC,KAAL,CAAaC,CAAnB,EADP,EAEM,KAAKC,gBAAL,CAAsB7B,SAAtB,CAFN,mDAIE,8BAAC,kBAAD,EACE,MAAO,CACLE,MACEC,UAAY,IAAZ,CACIa,WAAahB,UAAU8B,iBAD3B,CAEI9B,UAAUW,oBAJX,CAKLoB,SAAU/B,UAAUgC,gBALf,CAMLC,WAAYjC,UAAUkC,gBANjB,CAOLC,UAAWnC,UAAUoC,qBAPhB,CAQLC,iBAAkBrC,UAAUsC,wBARvB,CADT,CAWE,KAAMrB,UAAYM,eAXpB,iDAJF,CADF,CAoBD,C,sBAlEoBgB,gB,EAAjBxC,Q,CACGyC,Y,CAAe,CACpBrB,MAAOsB,oBAAUC,MADG,C,CAoExB3C,SAAS4C,SAAT,aACKC,8BAAiBD,SADtB,EAEE7B,MAAO2B,oBAAUI,SAAV,CAAoB,CACzBJ,oBAAUC,MADe,CAEzBD,oBAAUK,MAFe,CAGzBL,oBAAUM,KAHe,CAApB,CAFT,CAOE5C,QAASsC,oBAAUO,IAPrB,CAQEC,QAASR,oBAAUS,IARrB,CASEjC,SAAUwB,oBAAUU,MATtB,GAYApD,SAASc,YAAT,CAAwB,CACtBI,SAAU,EADY,CAAxB,CAIA,GAAMmC,gBAAiB,yCACrB,qBADqB,CAErB,EAFqB,CAGrBC,8BAHqB,EAIrBtD,QAJqB,CAAvB,C,QAM2BA,Q,CAAlBqD,c","file":"Checkbox.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { TouchableOpacity } from 'react-native';\nimport IconNB from 'react-native-vector-icons/Ionicons';\nimport { connectStyle } from 'native-base-shoutem-theme';\n\nimport mapPropsToStyleNames from '../utils/mapPropsToStyleNames';\nimport variable from '../theme/variables/platform';\nimport { PLATFORM } from '../theme/variables/commonColor';\nimport computeProps from '../utils/computeProps';\n\nclass CheckBox extends Component {\n  static contextTypes = {\n    theme: PropTypes.object\n  };\n\n  getInitialStyle(variables) {\n    const { color, checked, checkboxType, borderColor } = this.props;\n    return {\n      checkStyle: {\n        borderRadius: this.getBorderRadius(checkboxType, variables),\n        borderColor: borderColor || color || variables.checkboxBgColor,\n        backgroundColor:\n          checked === true\n            ? color || variables.checkboxBgColor\n            : variables.checkboxDefaultColor\n      }\n    };\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getBorderRadius(checkboxType, variables) {\n    if (checkboxType === 'rounded') {\n      return 13;\n    }\n    if (checkboxType === 'square') {\n      return 0;\n    }\n    return variables.CheckboxRadius;\n  }\n\n  prepareRootProps(variables) {\n    const defaultProps = {\n      style: this.getInitialStyle(variables).checkStyle\n    };\n\n    return computeProps(this.props, defaultProps);\n  }\n  render() {\n    const { checked, tickColor, iconName } = this.props;\n\n    const variables = this.context.theme\n      ? this.context.theme['@@shoutem.theme/themeStyle'].variables\n      : variable;\n    const platformStyle = variables.platformStyle;\n    const platform = variables.platform;\n    const defaultIconName = platform === PLATFORM.IOS && platformStyle !== PLATFORM.MATERIAL ? 'ios-checkmark' : 'md-checkmark';\n    return (\n      <TouchableOpacity\n        ref={c => (this._root = c)}\n        {...this.prepareRootProps(variables)}\n      >\n        <IconNB\n          style={{\n            color:\n              checked === true\n                ? tickColor || variables.checkboxTickColor\n                : variables.checkboxDefaultColor,\n            fontSize: variables.CheckboxFontSize,\n            lineHeight: variables.CheckboxIconSize,\n            marginTop: variables.CheckboxIconMarginTop,\n            textShadowRadius: variables.checkboxTextShadowRadius\n          }}\n          name={iconName || defaultIconName}\n        />\n      </TouchableOpacity>\n    );\n  }\n}\n\nCheckBox.propTypes = {\n  ...TouchableOpacity.propTypes,\n  style: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number,\n    PropTypes.array\n  ]),\n  checked: PropTypes.bool,\n  onPress: PropTypes.func,\n  iconName: PropTypes.string,\n};\n\nCheckBox.defaultProps = {\n  iconName: '',\n}\n\nconst StyledCheckBox = connectStyle(\n  'NativeBase.CheckBox',\n  {},\n  mapPropsToStyleNames\n)(CheckBox);\n\nexport { StyledCheckBox as CheckBox };\n"]}