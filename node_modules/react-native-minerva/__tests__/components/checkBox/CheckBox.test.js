import React from 'react';
import { render } from '@testing-library/react-native';
import CheckBox from '../../../src/components/checkBox/CheckBox';
import { Text } from '../../../src';

describe('Test componente <CheckBox />', () => {
    const props = {
        label: 'Label',
        testID: 'test_checkbox',
        testCustomChildren: 'test_custom_children',
    };
    test('Debería renderizar correctamente', () => {
        const { toJSON } = render(<CheckBox checked onPress={() => null} />);
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería renderizar con icono personalizado', () => {
        const { toJSON } = render(
            <CheckBox checked icon="remove" onPress={() => null} />,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería renderizar checkbox con label', () => {
        const { testID, label } = props;
        const { getByTestId } = render(
            <CheckBox testID={testID} label={label} />,
        );
        const checkBoxElement = getByTestId(testID);
        expect(checkBoxElement).toBeDefined();
    });

    test('Debería renderizar con texto personalizado', () => {
        const { testCustomChildren } = props;
        const { getByTestId } = render(
            <CheckBox checked={false}>
                <Text bold testID={testCustomChildren}>
                    Label texto personalizado
                </Text>
            </CheckBox>,
        );
        const customElement = getByTestId(testCustomChildren);
        expect(customElement).toBeDefined();
    });

    test('Debería renderizar checkbox con estilos inline', () => {
        const { testID, label } = props;
        const { getByTestId } = render(
            <CheckBox testID={testID} inline label={label} />,
        );
        const checkBoxElement = getByTestId(testID);
        expect(checkBoxElement).toBeDefined();
    });

    test('Debería renderizar con pointerEvents none', () => {
        const { testID } = props;
        const { getByTestId } = render(
            <CheckBox testID={testID} pointerEvents="none" />,
        );
        const checkBoxElement = getByTestId(testID);
        expect(checkBoxElement).toBeDefined();
    });
});
