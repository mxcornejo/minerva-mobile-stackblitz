import React from 'react';
import { render } from '@testing-library/react-native';
import { Text, Paragraph, HelperStyle } from '../../../src/index';

describe('Test componente <Paragraph />', () => {
    const textItems = 'Paragraph Irure aliqua labore enim commodo';
    const mockRenderText = jest.fn(() => <Text>Paragraph Irure aliqua</Text>);
    const itemsArray = [textItems];
    const itemCustomRender = [{ renderText: mockRenderText }];
    const itemsCustomStyle = [
        {
            text: textItems,
            style: HelperStyle.success,
        },
    ];

    test('Debería renderizar correctamente', () => {
        const { toJSON } = render(<Paragraph items={itemsArray} />);
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería renderizar items con textos estado disabled', () => {
        const { getByText } = render(<Paragraph items={itemsArray} disabled />);
        const item = getByText(itemsArray[0]);
        expect(item).toBeDefined();
        expect(item.props.disabled).toBeTruthy();
    });

    test('Debería renderizar items con texto personalizado', () => {
        render(<Paragraph items={itemCustomRender} />);
        expect(mockRenderText.mock.calls.length).toBe(1);
    });

    test('Debería renderizar items con texto con estilo personalizado', () => {
        const { getByText } = render(<Paragraph items={itemsCustomStyle} />);
        const item = getByText(itemsCustomStyle[0].text);
        expect(item).toBeDefined();
        expect(Object.assign(...item.props.style.flat(2))).toEqual(
            expect.objectContaining(HelperStyle.success),
        );
    });

    test('Debería renderizar con items con data tipo string', () => {
        const { getByText } = render(<Paragraph items={textItems} />);
        const item = getByText(textItems);
        expect(item).toBeDefined();
    });

    test('Debería renderizar sin wrapper', () => {
        const { toJSON } = render(
            <Paragraph wrapper={false} items={itemsArray} />,
        );
        expect(toJSON()).toMatchSnapshot();
    });
});
