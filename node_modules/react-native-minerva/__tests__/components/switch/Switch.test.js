import React from 'react';
import { render } from '@testing-library/react-native';
import { HelperStyle } from '../../../src';
import Switch from '../../../src/components/switch/Switch';
import Platform from '../../../src/constants/platform';

jest.mock('../../../src/constants/platform', () => ({
    android: false,
    ios: true,
}));

describe('Test componente <Switch />', () => {
    const props = {
        value: false,
        onValueChange: jest.fn(),
        label: 'Do consectetur amet officia elit amet.',
        testID: 'test_switch',
    };

    test('Debería renderizar correctamente', () => {
        const { value, onValueChange } = props;
        const { toJSON } = render(
            <Switch value={value} onValueChange={onValueChange} />,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería renderizar con label', () => {
        const { value, onValueChange, label } = props;
        const { getByText } = render(
            <Switch
                label={label}
                value={value}
                onValueChange={onValueChange}
            />,
        );
        const labelElement = getByText(label);
        expect(labelElement).toBeDefined();
    });

    test('Debería renderizar con label lado derecho', () => {
        const { value, onValueChange, label } = props;
        const { getByText } = render(
            <Switch
                label={label}
                value={value}
                onValueChange={onValueChange}
                labelRight
            />,
        );
        const labelElement = getByText(label);
        expect(labelElement).toBeDefined();
    });

    test('Debería ocultar switch con opacity cuando esta en estado loading', () => {
        const { value, onValueChange, label, testID } = props;
        const { getByTestId } = render(
            <Switch
                label={label}
                value={value}
                onValueChange={onValueChange}
                loading
                testID={testID}
            />,
        );
        const switchElement = getByTestId(testID);
        expect(switchElement).toBeDefined();
        expect(Object.assign(...switchElement.props.style.flat(2))).toEqual(
            expect.objectContaining(HelperStyle.o_0),
        );
    });

    test('Debería tener estado disabled IOS', () => {
        const { value, onValueChange, label, testID } = props;
        const { getByTestId } = render(
            <Switch
                label={label}
                value={value}
                onValueChange={onValueChange}
                disabled
                testID={testID}
            />,
        );
        const switchElement = getByTestId(testID);
        expect(switchElement.props.disabled).toBeTruthy();
    });

    test('Debería tener estado disabled Android', () => {
        Platform.android = true;
        Platform.ios = false;
        const { value, onValueChange, label, testID } = props;
        const { getByTestId } = render(
            <Switch
                label={label}
                value={value}
                onValueChange={onValueChange}
                disabled
                testID={testID}
            />,
        );
        const switchElement = getByTestId(testID);
        expect(switchElement.props.disabled).toBeTruthy();
    });

    test('Debería tener estado y thumbColor disabled/activo Android', () => {
        Platform.android = true;
        Platform.ios = false;
        const { onValueChange, label, testID } = props;
        const { getByTestId } = render(
            <Switch
                label={label}
                value
                onValueChange={onValueChange}
                disabled
                testID={testID}
            />,
        );
        const switchElement = getByTestId(testID);
        expect(switchElement.props.value).toBeTruthy();
        expect(switchElement.props.thumbTintColor).toBe(
            HelperStyle.primary_lighter.color,
        );
        expect(switchElement.props.disabled).toBeTruthy();
    });

    test('Debería tener estado y thumbColor activo Android', () => {
        Platform.android = true;
        Platform.ios = false;
        const { onValueChange, label, testID } = props;
        const { getByTestId } = render(
            <Switch
                label={label}
                value
                onValueChange={onValueChange}
                testID={testID}
            />,
        );
        const switchElement = getByTestId(testID);
        expect(switchElement.props.thumbTintColor).toBe(
            HelperStyle.primary.color,
        );
        expect(switchElement.props.value).toBeTruthy();
    });
});
