import React from 'react';
import Images from 'bch-assets';
import { render, fireEvent } from '@testing-library/react-native';
import { InputSelectNative } from '../../../src';
import SELECTORINPUT_STR from '../../../src/components/inputSelectNative/components/SelectorInput/SelectorInputStr';
import Platform from '../../../src/constants/platform';

jest.mock('../../../src/constants/platform', () => ({
    android: false,
    ios: true,
}));

describe('Test componente <InputSelectNative />', () => {
    const props = {
        label: 'Input Select Native',
        value: '',
        onChangeText: jest.fn(),
        selectedValue: '1',
        onValueChange: jest.fn(),
        labelSelected: 'Select Native',
        pickerTestID: 'pickerTestID_input_select_native',
    };

    const {
        label,
        value,
        onChangeText,
        selectedValue,
        onValueChange,
        labelSelected,
        pickerTestID,
    } = props;

    const itemsImage = [
        {
            label: 'US - DOLAR',
            value: '1',
            source: Images.bandera.cuadrada.bandera_usa,
        },
        {
            label: 'EUR - EURO',
            value: '2',
            source: Images.bandera.cuadrada.bandera_ue,
        },
    ];

    const itemsIcon = [
        {
            label: 'Cat',
            value: '1',
            source: 'icon-bch-cat',
        },
        {
            label: 'Dog',
            value: '2',
            source: 'icon-bch-dog',
        },
    ];

    const itemsText = [
        {
            label: 'DOLAR',
            value: '1',
            source: 'USD',
        },
        {
            label: 'EURO',
            value: '2',
            source: 'EUR',
        },
    ];

    test('Debería renderizar correctamente caso text en IOS', () => {
        Platform.android = false;
        Platform.ios = true;
        const { toJSON } = render(
            <InputSelectNative
                label={label}
                onChangeText={onChangeText}
                value={value}
                items={itemsText}
                labelSelected={labelSelected}
                selectedValue={selectedValue}
                onValueChange={onValueChange}
                text
            />,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería renderizar correctamente caso text en Android', () => {
        Platform.android = true;
        Platform.ios = false;
        const { toJSON } = render(
            <InputSelectNative
                label={label}
                onChangeText={onChangeText}
                value={value}
                items={itemsText}
                labelSelected={labelSelected}
                selectedValue={selectedValue}
                onValueChange={onValueChange}
                text
            />,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería renderizar correctamente caso icon', () => {
        const { toJSON } = render(
            <InputSelectNative
                label={label}
                onChangeText={onChangeText}
                value={value}
                items={itemsIcon}
                labelSelected={labelSelected}
                selectedValue={selectedValue}
                onValueChange={onValueChange}
                icon
            />,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería renderizar correctamente caso image', () => {
        const { toJSON } = render(
            <InputSelectNative
                label={label}
                onChangeText={onChangeText}
                value={value}
                items={itemsImage}
                labelSelected={labelSelected}
                selectedValue={selectedValue}
                onValueChange={onValueChange}
                image
            />,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería abrir select IOS', () => {
        Platform.android = false;
        Platform.ios = true;
        const { getByTestId, getByText } = render(
            <InputSelectNative
                label={label}
                onChangeText={onChangeText}
                value={value}
                items={itemsImage}
                labelSelected={labelSelected}
                selectedValue={selectedValue}
                onValueChange={onValueChange}
                image
                pickerTestID={pickerTestID}
            />,
        );
        const elemSelect = getByTestId(selectedValue);
        fireEvent.press(elemSelect);
        const elemRightButton = getByText(SELECTORINPUT_STR.ok);
        const elemLeftButton = getByText(SELECTORINPUT_STR.cancelar);
        fireEvent.press(elemRightButton);
        fireEvent.press(elemLeftButton);
        expect(elemSelect).toBeDefined();
        expect(elemRightButton).toBeDefined();
        expect(elemLeftButton).toBeDefined();
    });

    test('Debería renderizar correctamente caso text default', () => {
        const { toJSON } = render(
            <InputSelectNative
                label={label}
                onChangeText={onChangeText}
                value={value}
                items={itemsIcon}
                labelSelected={0}
                selectedValue={selectedValue}
                onValueChange={onValueChange}
                icon
            />,
        );
        expect(toJSON()).toMatchSnapshot();
    });
    test('Debería renderizar correctamente caso default', () => {
        const { toJSON } = render(
            <InputSelectNative
                label={label}
                onChangeText={onChangeText}
                value={value}
                items={itemsIcon}
                labelSelected={0}
                selectedValue={selectedValue}
                onValueChange={onValueChange}
            />,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería renderizar correctamente caso disabled', () => {
        const { toJSON } = render(
            <InputSelectNative
                label={label}
                onChangeText={onChangeText}
                value={value}
                items={itemsIcon}
                labelSelected={0}
                selectedValue={selectedValue}
                onValueChange={onValueChange}
                disabled
            />,
        );
        expect(toJSON()).toMatchSnapshot();
    });
});
