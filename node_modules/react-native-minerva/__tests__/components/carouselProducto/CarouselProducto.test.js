import React from 'react';
import { fireEvent, render } from '@testing-library/react-native';
import { PRODUCTS } from 'bch-mobile-constants';
import { CarouselProducto, HelperStyle, Text } from '../../../src';
import CARDITEMPRODUCTO_STR from '../../../src/components/cardItemProducto/CardItemProductoStr';

describe('Test componente <CarouselProducto />', () => {
    const {
        PRODUCT_TYPE: { PRODUCT_CC, PRODUCT_CV },
        PRODUCT_DETAIL: { DISPONIBLE, UTILIZADO },
        NAME_PRODUCT: { CUENTA_CORRIENTE, CUENTA_VISTA },
    } = PRODUCTS;
    const value = '$56.000.000';
    const cardCC = {
        testID: 'testID_CC',
        title: CUENTA_CORRIENTE,
        tipoProducto: PRODUCT_CC,
        subtitle: '00-012-45678-00',
        list: [
            {
                title: DISPONIBLE,
                value,
                valueLoading: false,
            },
            {
                separator: true,
            },
            {
                title: UTILIZADO,
                value,
                valueLoading: true,
                lineSeparator: true,
            },
        ],
    };
    const cardCV = {
        testID: 'testID_CV',
        title: CUENTA_VISTA,
        tipoProducto: PRODUCT_CV,
        subtitle: '00-012-45678-00',
        list: [
            {
                title: DISPONIBLE,
                value,
            },
        ],
    };

    test('Debería renderizar correctamente', () => {
        const { toJSON } = render(<CarouselProducto data={[cardCC, cardCV]} />);
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería mostrar una solo producto y tener estilos de unico producto', () => {
        const { getByTestId } = render(
            <CarouselProducto
                data={[cardCC]}
                onSnapToItem={jest.fn()}
                setCollapsed={jest.fn()}
            />,
        );
        const elemCard = getByTestId(cardCC.testID);
        expect(Object.assign(...elemCard.props.style.flat())).toEqual(
            expect.objectContaining({
                ...HelperStyle.mr_4,
                ...HelperStyle.mrl_4,
            }),
        );
        expect(elemCard).toBeDefined();
    });

    test('Debería mostrar mensaje de error y botón de error', () => {
        const mockOnPressError = jest.fn();
        const errorButton = {
            title: 'Error',
            props: {
                onPress: mockOnPressError,
                error: true,
                testID: 'IDError',
            },
        };
        const errorText = 'Consequat exercitation fugiat';
        const { getByTestId, getByText } = render(
            <CarouselProducto
                data={[{ ...cardCC, error: true, errorText, errorButton }]}
            />,
        );
        const elemBtnError = getByTestId(errorButton.props.testID);
        const elemErrorMsg = getByText(errorText);
        fireEvent.press(elemBtnError);
        expect(mockOnPressError).toHaveBeenCalledTimes(1);
        expect(elemBtnError).toBeDefined();
        expect(elemErrorMsg).toBeDefined();
    });

    test('Debería mostrar error personalizado', () => {
        const renderError = () => <Text>Error</Text>;
        const { getByText } = render(
            <CarouselProducto
                data={[{ ...cardCC, error: true, renderError }]}
            />,
        );
        const elemError = getByText('Error');
        expect(elemError).toBeDefined();
    });

    test('Debería mostrar error en el body del card', () => {
        const { getByText } = render(
            <CarouselProducto
                data={[
                    {
                        ...cardCC,
                        errorBody: true,
                        errorText: 'Error',
                        errorButton: {
                            title: 'Nombre botón',
                            props: {
                                error: true,
                            },
                        },
                    },
                ]}
            />,
        );
        const elemError = getByText('Error');
        expect(elemError).toBeDefined();
    });

    test('Debería mostrar error en el body del card con collapsed', () => {
        const { getByText } = render(
            <CarouselProducto
                collapsed={false}
                data={[
                    {
                        ...cardCC,
                        errorBody: true,
                        errorText: { text: 'Error' },
                        errorButton: {
                            title: 'Nombre botón',
                            props: {
                                error: true,
                            },
                        },
                    },
                ]}
            />,
        );
        const elemError = getByText('Error');
        expect(elemError).toBeDefined();
    });

    test('Debería mostrar botón colapsar y llamar a setCollapsed', () => {
        const mockSetCollapsed = jest.fn();
        const { getByTestId } = render(
            <CarouselProducto
                data={[cardCC]}
                collapsed
                setCollapsed={mockSetCollapsed}
            />,
        );
        const elemBtnColapsar = getByTestId(
            CARDITEMPRODUCTO_STR.mostrar.testID,
        );
        fireEvent.press(elemBtnColapsar);
        expect(mockSetCollapsed).toHaveBeenCalledTimes(1);
        expect(elemBtnColapsar).toBeDefined();
    });

    test('Debería mostrar botón colapsar y llamar a setCollapsed defaultProps', () => {
        const { getByTestId } = render(
            <CarouselProducto data={[cardCC]} collapsed />,
        );
        const elemBtnColapsar = getByTestId(
            CARDITEMPRODUCTO_STR.mostrar.testID,
        );
        fireEvent.press(elemBtnColapsar);
        expect(elemBtnColapsar).toBeDefined();
    });

    test('Debería mostrar componente personalizado', () => {
        const { getByText } = render(
            <CarouselProducto
                data={[{ component: () => <Text>Custom</Text> }, cardCC]}
                collapsed
            />,
        );
        expect(getByText('Custom')).toBeDefined();
    });
});
