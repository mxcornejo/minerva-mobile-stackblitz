import React from 'react';
import Assets from 'bch-assets';
import { render } from '@testing-library/react-native';
import LottieView from '../../../src/components/LottieView/LottieView';
import LottieViewContainer from '../../../src/components/lottieViewContainer/LottieViewContainer';
import Style from '../../../src/components/lottieViewContainer/style';

const lottie = Assets.lottieAnimations;

describe('Test componente <LottieViewContainer />', () => {
    const testID = 'LottieViewContainer';
    const renderLottie = () => <LottieView source={lottie.devices} autoPlay />;
    test('Debería renderizar correctamente', () => {
        const { toJSON } = render(
            <LottieViewContainer>{renderLottie()}</LottieViewContainer>,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería renderizar con estilos small', () => {
        const { getByTestId } = render(
            <LottieViewContainer small testID={testID}>
                {renderLottie()}
            </LottieViewContainer>,
        );
        const element = getByTestId(testID);
        expect(element.props.style).toEqual(
            expect.arrayContaining([expect.objectContaining(Style.small)]),
        );
    });

    test('Debería renderizar con estilos large', () => {
        const { getByTestId } = render(
            <LottieViewContainer large testID={testID}>
                {renderLottie()}
            </LottieViewContainer>,
        );
        const element = getByTestId(testID);
        expect(element.props.style).toEqual(
            expect.arrayContaining([expect.objectContaining(Style.large)]),
        );
    });

    test('Debería renderizar con estilos extraLarge', () => {
        const { getByTestId } = render(
            <LottieViewContainer extraLarge testID={testID}>
                {renderLottie()}
            </LottieViewContainer>,
        );
        const element = getByTestId(testID);
        expect(element.props.style).toEqual(
            expect.arrayContaining([expect.objectContaining(Style.extraLarge)]),
        );
    });
});
