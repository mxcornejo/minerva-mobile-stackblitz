import React from 'react';
import Assets from 'bch-assets';
import { Text } from 'react-native';
import { render } from '@testing-library/react-native';
import Avatar from '../../../src/components/avatar/Avatar';
import { HelperStyle } from '../../../src';

describe('Test componente <Avatar />', () => {
    const testIDCustomLabel = 'test_custom_label';
    const testIDCustomBackLabel = 'test_custom_label';
    const testIDCustomFooterLabel = 'test_custom_footer_label_2';
    const renderLabel = () => <Text testID={testIDCustomLabel}>Label</Text>;
    const renderBackLabel = () => (
        <Text testID={testIDCustomBackLabel}>back label</Text>
    );
    const renderFooterLabel = ({ isVisible }) => (
        <Text testID={isVisible ? testIDCustomFooterLabel : ''}>
            Footer label
        </Text>
    );
    const props = {
        label: 'Label',
        image: 'https://randomuser.me/api/portraits/women/96.jpg',
        selected: true,
        styleContainer: HelperStyle.mr_4,
        closeIcon: true,
        footerLabel: 'Label Footer',
        hasBorderAvatarImage: true,
        iconName: 'icon-bch-buy-dollars',
        renderLabel,
        renderBackLabel,
        renderFooterLabel,
        testID: 'test_avatar',
        loading: true,
    };

    test('Debería renderizar correctamente', () => {
        const { image, styleContainer, closeIcon, footerLabel } = props;
        const { toJSON } = render(
            <Avatar
                image={image}
                styleContainer={styleContainer}
                closeIcon={closeIcon}
                footerLabel={footerLabel}
            />,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería renderizar avatar con imagen y border', () => {
        const { image, hasBorderAvatarImage, testID } = props;
        const { getByTestId } = render(
            <Avatar
                image={image}
                hasBorderAvatarImage={hasBorderAvatarImage}
                testID={testID}
            />,
        );
        const avatarImage = getByTestId(testID);
        expect(avatarImage).toBeDefined();
    });

    test('Debería renderizar Avatar tamaño smaller', () => {
        const { label, image, testID } = props;
        const { getByTestId } = render(
            <Avatar label={label} image={image} smaller testID={testID} />,
        );
        const avatar = getByTestId(testID);
        const { smaller } = avatar.props;
        expect(smaller).toBeTruthy();
    });

    test('Debería renderizar Avatar tamaño small', () => {
        const { label, image, testID } = props;
        const { getByTestId } = render(
            <Avatar label={label} image={image} small testID={testID} />,
        );
        const avatar = getByTestId(testID);
        const { small } = avatar.props;
        expect(small).toBeTruthy();
    });

    test('Debería renderizar Avatar tamaño large', () => {
        const { label, image, closeIcon, testID } = props;
        const { getByTestId } = render(
            <Avatar
                label={label}
                image={image}
                large
                closeIcon={closeIcon}
                testID={testID}
            />,
        );
        const avatar = getByTestId(testID);
        const { large } = avatar.props;
        expect(large).toBeTruthy();
    });

    test('Debería renderizar Avatar con componente label', () => {
        const { testID, loading } = props;
        const { getByTestId } = render(
            <Avatar
                renderLabel={renderLabel}
                testID={testID}
                loading={loading}
            />,
        );
        const customLabel = getByTestId(testIDCustomLabel);
        expect(customLabel).toBeDefined();
    });

    test('Debería renderizar Avatar con componente footerLabel', () => {
        const { label, renderFooterLabel } = props;
        const { getByTestId } = render(
            <Avatar label={label} renderFooterLabel={renderFooterLabel} />,
        );
        const customLabel = getByTestId(testIDCustomFooterLabel);
        expect(customLabel).toBeDefined();
    });

    test('Debería renderizar Avatar con icono', () => {
        const { iconName, testID } = props;
        const { getByTestId } = render(
            <Avatar iconName={iconName} testID={testID} />,
        );
        const avatarBadge = getByTestId(testID);
        expect(avatarBadge).toBeDefined();
    });

    test('Debería renderizar Avatar smaller con icono', () => {
        const { iconName, testID } = props;
        const { getByTestId } = render(
            <Avatar smaller iconName={iconName} testID={testID} />,
        );
        const avatarBadge = getByTestId(testID);
        expect(avatarBadge).toBeDefined();
    });

    test('Debería renderizar Avatar con estado selecionado', () => {
        const { selected, testID } = props;
        const { getByTestId } = render(
            <Avatar selected={selected} testID={testID} />,
        );
        const avatarBadge = getByTestId(testID);
        expect(avatarBadge).toBeDefined();
    });

    test('Debería renderizar Avatar con estado selecionado y con componente backlabel', () => {
        const { selected, testID, renderBackLabel } = props;
        const { getByTestId } = render(
            <Avatar
                selected={selected}
                testID={testID}
                renderBackLabel={renderBackLabel}
            />,
        );
        const avatarBadge = getByTestId(testID);
        expect(avatarBadge).toBeDefined();
    });

    test('Debería renderizar Avatar con estado loading', () => {
        const { loading, testID, label } = props;
        const { getByTestId } = render(
            <Avatar loading={loading} label={label} testID={testID} />,
        );
        const avatarBadge = getByTestId(testID);
        expect(avatarBadge).toBeDefined();
    });

    test('Debería renderizar Avatar tamaño smaller con estado loading', () => {
        const { loading, testID, label } = props;
        const { getByTestId } = render(
            <Avatar smaller loading={loading} label={label} testID={testID} />,
        );
        const avatarBadge = getByTestId(testID);
        expect(avatarBadge).toBeDefined();
    });

    test('Debería renderizar Avatar tamaño small con estado loading', () => {
        const { loading, testID, label } = props;
        const { getByTestId } = render(
            <Avatar small loading={loading} label={label} testID={testID} />,
        );
        const avatarBadge = getByTestId(testID);
        expect(avatarBadge).toBeDefined();
    });

    test('Debería renderizar Avatar tamaño Large con estado loading', () => {
        const { loading, testID, label } = props;
        const { getByTestId } = render(
            <Avatar large loading={loading} label={label} testID={testID} />,
        );
        const avatarBadge = getByTestId(testID);
        expect(avatarBadge).toBeDefined();
    });

    test('Debería renderizar con imagen local', () => {
        const { testID } = props;
        const { getByTestId } = render(
            <Avatar testID={testID} source={Assets.alerts.info} />,
        );
        const avatarBadge = getByTestId(testID);
        expect(avatarBadge).toBeDefined();
    });
});
