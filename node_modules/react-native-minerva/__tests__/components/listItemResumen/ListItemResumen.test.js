import React from 'react';
import { render } from '@testing-library/react-native';
import { HelperStyle, ListItemResumen, Text } from '../../../src';
import LISTITEMRESUMEN_STR from '../../../src/components/listItemResumen/ListItemResumenStr';

describe('Test componente <ListItemResumen />', () => {
    const item = {
        label: 'Monto',
        labelProps: {
            accessibilityLabel: 'texto de prueba',
            testID: 'texto de prueba',
        },
        value: '$ 200.000',
        valueProps: {
            style: HelperStyle.fw_b,
            number: true,
        },
    };

    const itemLoading = {
        label: item.label,
    };

    const itemWithSeparator = {
        label: item.label,
        value: item.value,
        separator: true,
    };

    const itemWithTitle = {
        title: 'Título',
        titleSeparator: true,
    };

    const itemWithTitleAndLabel = {
        title: 'Título',
        label: item.label,
        value: item.value,
        separator: true,
    };

    const itemWithCustomRender = {
        renderRight: () => <Text>Value</Text>,
        renderLeft: () => <Text>Label</Text>,
    };
    test('Debería renderizar correctamente', () => {
        const { toJSON } = render(<ListItemResumen item={item} />);
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería mostrar value cargando', () => {
        const { getByTestId } = render(<ListItemResumen item={itemLoading} />);
        const elemSkeleton = getByTestId(LISTITEMRESUMEN_STR.skeleton.testID);
        expect(elemSkeleton).toBeDefined();
    });

    test('Debería mostrar fila con linea divisora', () => {
        const { getByTestId } = render(
            <ListItemResumen item={itemWithSeparator} />,
        );
        const elemSeparator = getByTestId(LISTITEMRESUMEN_STR.separator.testID);
        expect(elemSeparator).toBeDefined();
    });

    test('Debería mostrar fila titulo', () => {
        const { getByText } = render(<ListItemResumen item={itemWithTitle} />);
        const elemTitle = getByText(itemWithTitle.title);
        expect(elemTitle).toBeDefined();
    });

    test('Debería mostrar fila titulo con label', () => {
        const { getByText } = render(
            <ListItemResumen item={itemWithTitleAndLabel} />,
        );
        const elemTitle = getByText(itemWithTitleAndLabel.title);
        const elemLabel = getByText(item.label);
        expect(elemTitle).toBeDefined();
        expect(elemLabel).toBeDefined();
    });

    test('Debería componentes personalizados en el label y value', () => {
        const { getByText } = render(
            <ListItemResumen item={itemWithCustomRender} />,
        );
        const elemValue = getByText('Value');
        const elemLabel = getByText('Label');
        expect(elemValue).toBeDefined();
        expect(elemLabel).toBeDefined();
    });
});
