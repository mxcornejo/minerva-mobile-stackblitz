import React from 'react';
import { render } from '@testing-library/react-native';
import { InputDots, HelperStyle } from '../../../src/index';

describe('Test componente <InputDots />', () => {
    test('Debería renderizar correctamente', () => {
        const { toJSON } = render(
            <InputDots
                length={5}
                code={[1, 2, 3]}
                activeStyle={HelperStyle.bg_primary}
                inactiveStyle={HelperStyle.bg_gray_lighter}
            />,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería cargar con estado error', () => {
        const { getByText } = render(
            <InputDots
                length={5}
                code={[1, 2, 3]}
                errorMessage="Error"
                activeStyle={HelperStyle.bg_primary}
                inactiveStyle={HelperStyle.bg_gray_lighter}
            />,
        );
        expect(getByText('Error')).toBeDefined();
    });

    test('Debería mostrar animación de error', () => {
        const { getByText, rerender } = render(
            <InputDots
                length={5}
                code={[1, 2, 3]}
                activeStyle={HelperStyle.bg_primary}
                inactiveStyle={HelperStyle.bg_gray_lighter}
            />,
        );
        rerender(
            <InputDots
                length={5}
                code={[1, 2, 3]}
                errorMessage="Error"
                activeStyle={HelperStyle.bg_primary}
                inactiveStyle={HelperStyle.bg_gray_lighter}
            />,
        );
        expect(getByText('Error')).toBeDefined();
    });

    test('Debería llamar a onFulfill cuando se complete code', () => {
        const mockFnOnFulfill = jest.fn();
        const { getByText, rerender } = render(
            <InputDots
                length={5}
                code={[1, 2, 3]}
                onFulfill={mockFnOnFulfill}
                activeStyle={HelperStyle.bg_primary}
                inactiveStyle={HelperStyle.bg_gray_lighter}
            />,
        );
        rerender(
            <InputDots
                length={5}
                code={[1, 2, 3, 4, 5]}
                onFulfill={mockFnOnFulfill}
                errorMessage="Error"
                activeStyle={HelperStyle.bg_primary}
                inactiveStyle={HelperStyle.bg_gray_lighter}
            />,
        );
        expect(mockFnOnFulfill).toHaveBeenCalledTimes(1);
        expect(getByText('Error')).toBeDefined();
    });
});
