/* eslint-disable global-require */
import React from 'react';
import { fireEvent, render } from '@testing-library/react-native';
import { HelperStyle, CardTrampolin, Text } from '../../../src/index';
import CARDTRAMPOLIN_STR from '../../../src/components/cardTrampolin/CardTrampolinStr';

describe('Test componente <CardTrampolin />', () => {
    const mockOnPress = jest.fn();
    const mockOnPressClose = jest.fn();
    const textCustom = 'Text component';
    const props = {
        image: {
            uri: 'https://via.placeholder.com/150/002464/FFFFFF',
        },
        dataBody: [
            {
                text: 'Tempor pariatur',
                style: { ...HelperStyle.fw_b, ...HelperStyle.mb_0 },
                numberOfLines: 1,
                ellipsizeMode: 'tail',
            },
            {
                text: 'Tempor pariatur sint ut adipisicing mollit velit aliqua pariatur quis nostrud dolor proident.',
                style: HelperStyle.mb_0,
                numberOfLines: 1,
                small: true,
                ellipsizeMode: 'tail',
            },
        ],
        renderCustom: () => <Text>{textCustom}</Text>,
    };

    test('Debería renderizar correctamente', () => {
        const { image, dataBody } = props;
        const { toJSON } = render(
            <CardTrampolin
                image={image}
                dataBody={dataBody}
                onPress={mockOnPress}
            />,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería llamar a la acción del card', () => {
        const { image, dataBody } = props;
        const { getByText } = render(
            <CardTrampolin
                image={image}
                dataBody={dataBody}
                onPress={mockOnPress}
            />,
        );
        const elemText = getByText(dataBody[0].text);
        fireEvent.press(elemText);
        expect(mockOnPress).toHaveBeenCalledTimes(1);
    });

    test('Debería renderizar con mascara de recorte', () => {
        const { image, dataBody } = props;
        const { getByTestId } = render(
            <CardTrampolin
                image={image}
                imageMask="waves_left"
                dataBody={dataBody}
                onPress={mockOnPress}
            />,
        );
        const elemMask = getByTestId(CARDTRAMPOLIN_STR.maskedView.testID);
        expect(elemMask).toBeDefined();
    });

    test('Debería renderizar componente personalizado en el left', () => {
        const { dataBody, renderCustom } = props;
        const { getByText } = render(
            <CardTrampolin
                renderLeft={renderCustom}
                dataBody={dataBody}
                onPress={mockOnPress}
            />,
        );
        const elemCustom = getByText(textCustom);
        expect(elemCustom).toBeDefined();
    });

    test('Debería renderizar componente personalizado en el Right', () => {
        const { dataBody, renderCustom } = props;
        const { getByText } = render(
            <CardTrampolin
                renderRight={renderCustom}
                dataBody={dataBody}
                onPress={mockOnPress}
            />,
        );
        const elemCustom = getByText(textCustom);
        expect(elemCustom).toBeDefined();
    });

    test('Debería renderizar componente personalizado en el body', () => {
        const { image, renderCustom } = props;
        const { getByText } = render(
            <CardTrampolin
                image={image}
                renderBody={renderCustom}
                onPress={mockOnPress}
            />,
        );
        const elemCustom = getByText(textCustom);
        expect(elemCustom).toBeDefined();
    });

    test('Debería renderizar componente personalizado en el body desde el children', () => {
        const { image, renderCustom } = props;
        const { getByText } = render(
            <CardTrampolin image={image} onPress={mockOnPress}>
                {renderCustom()}
            </CardTrampolin>,
        );
        const elemCustom = getByText(textCustom);
        expect(elemCustom).toBeDefined();
    });

    test('Debería renderizar icono cerrar', () => {
        const { image, dataBody } = props;
        const { getByA11yLabel } = render(
            <CardTrampolin
                image={image}
                imageMask="miinversion"
                dataBody={dataBody}
                close
                onPressClose={mockOnPressClose}
            />,
        );
        const elemIconClose = getByA11yLabel(
            CARDTRAMPOLIN_STR.close.accessibilityLabel,
        );
        expect(elemIconClose).toBeDefined();
    });

    test('Debería renderizar con contenido colapsable', () => {
        const { image } = props;
        const mockOnPressItem = jest.fn();
        const { getByText, rerender } = render(
            <CardTrampolin
                image={image}
                onPress={mockOnPress}
                contentCollapse={{
                    collapsed: true,
                    data: [
                        {
                            label: 'Plan pariatur',
                            icon: 'icon-bch-seguro-hogar',
                        },
                        {
                            label: 'Esse exercitation',
                            icon: 'icon-bch-seguro-casarobo',
                        },
                    ],
                    onPressItem: mockOnPressItem,
                    onPressClose: mockOnPressClose,
                }}
            />,
        );
        rerender(
            <CardTrampolin
                image={image}
                onPress={mockOnPress}
                contentCollapse={{
                    collapsed: false,
                    data: [
                        {
                            label: 'Plan pariatur',
                            icon: 'icon-bch-seguro-hogar',
                        },
                        {
                            label: 'Esse exercitation',
                            icon: 'icon-bch-seguro-casarobo',
                        },
                    ],
                    onPressItem: mockOnPressItem,
                    onPressClose: mockOnPressClose,
                }}
            />,
        );
        const elemContent = getByText('Plan pariatur');
        fireEvent.press(elemContent);
        expect(mockOnPressItem).toHaveBeenCalledTimes(1);
        expect(elemContent).toBeDefined();
    });

    test('Debería renderizar con background de fondo', () => {
        const { image, dataBody } = props;
        const { getByTestId } = render(
            <CardTrampolin
                background
                image={image}
                dataBody={dataBody}
                onPress={mockOnPress}
            />,
        );
        const elemBackground = getByTestId(
            CARDTRAMPOLIN_STR.imageBackground.testID,
        );
        expect(elemBackground).toBeDefined();
    });
});
