import React from 'react';
import { render, fireEvent } from '@testing-library/react-native';
import { Root } from 'native-base';
import {
    Text,
    HelperStyle,
    StyleProvider,
    Button,
    minerva,
    ColorsBCH,
    getTheme,
} from '../../../src/index';

describe('Test componente <Button />', () => {
    const props = {
        iconName: 'icon-bch-alert-success',
        testID: 'buttonID',
    };
    test('Debería renderizar correctamente', () => {
        const { testID } = props;
        const { toJSON, getByTestId } = render(
            <Button primary style={HelperStyle.mb_4} testID={testID}>
                <Text>Primary </Text>
            </Button>,
        );
        const buttonElement = getByTestId(testID);
        fireEvent.press(buttonElement);
        expect(buttonElement).toBeDefined();
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería renderizar boton tipo small block', () => {
        const { testID } = props;
        const { toJSON } = render(
            <Button
                primary
                small
                block
                style={HelperStyle.mb_4}
                testID={testID}
            >
                <Text>Primary small block</Text>
            </Button>,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería renderizar button con icon', () => {
        const { iconName } = props;
        const { getByTestId } = render(
            <Button
                primary
                style={HelperStyle.mb_4}
                iconName={iconName}
                iconAccessibilityLabel={iconName}
            >
                <Text>Primary </Text>
            </Button>,
        );
        expect(getByTestId(iconName)).toBeDefined();
    });

    test('Debería renderizar button con estado loading', () => {
        const { testID } = props;
        const { getByTestId } = render(
            <Button primary style={HelperStyle.mb_4} loading testID={testID}>
                <Text>Primary </Text>
            </Button>,
        );
        expect(getByTestId(testID)).toBeDefined();
        expect(
            getByTestId(testID).props.accessibilityState.disabled,
        ).toBeTruthy();
    });

    test('Debería renderizar button tipo link', () => {
        const { testID } = props;
        const marcaSelecionada = minerva(ColorsBCH);
        const theme = getTheme(marcaSelecionada);
        const textLink = 'Primary link';
        const { getByText } = render(
            <Root>
                <StyleProvider style={theme}>
                    <Button
                        link
                        primary
                        style={HelperStyle.mb_4}
                        testID={testID}
                    >
                        <Text>{textLink}</Text>
                    </Button>
                </StyleProvider>
            </Root>,
        );
        expect(getByText(textLink).props.style.textDecorationLine).toBe(
            'underline',
        );
    });

    test('Debería renderizar button tipo footerTab', () => {
        const { testID, iconName } = props;
        const marcaSelecionada = minerva(ColorsBCH);
        const theme = getTheme(marcaSelecionada);
        const textfooterTab = 'Opcion 1';
        const { getByText } = render(
            <Root>
                <StyleProvider style={theme}>
                    <Button
                        footerTab
                        active
                        iconName={iconName}
                        testID={testID}
                    >
                        <Text small>{textfooterTab}</Text>
                    </Button>
                </StyleProvider>
            </Root>,
        );
        expect(getByText(textfooterTab).props.style).toEqual(
            expect.objectContaining(HelperStyle.primary),
        );
    });
});
