import React from 'react';
import { fireEvent, render } from '@testing-library/react-native';
import { Tabs, Tab, Text, TabHeading, HelperStyle } from '../../../src';

describe('Test componente <Tabs />', () => {
    const mockOnChangeTab = jest.fn();
    const mockOnScroll = jest.fn();
    test('Debería renderizar correctamente', () => {
        const { toJSON } = render(
            <Tabs>
                <Tab
                    heading={
                        <TabHeading>
                            <Text>Tab1</Text>
                        </TabHeading>
                    }
                >
                    <Text>content tab</Text>
                </Tab>
                <Tab
                    heading={
                        <TabHeading>
                            <Text>Tab2</Text>
                        </TabHeading>
                    }
                >
                    <Text>content tab</Text>
                </Tab>
            </Tabs>,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería cambiar de tab y llamar el defaultProps de onChangeTab', () => {
        const { getByText } = render(
            <Tabs>
                <Tab
                    heading={
                        <TabHeading>
                            <Text>Tab1</Text>
                        </TabHeading>
                    }
                >
                    <Text>content tab</Text>
                </Tab>
                <Tab
                    heading={
                        <TabHeading>
                            <Text>Tab2</Text>
                        </TabHeading>
                    }
                >
                    <Text>content tab</Text>
                </Tab>
            </Tabs>,
        );
        const elemTab = getByText('Tab1');
        fireEvent.press(elemTab);
        expect(elemTab).toBeDefined();
    });

    test('Debería cambiar de tab y llamar a onChangeTab', () => {
        const { getByText } = render(
            <Tabs onChangeTab={mockOnChangeTab}>
                <Tab
                    heading={
                        <TabHeading>
                            <Text>Tab1</Text>
                        </TabHeading>
                    }
                >
                    <Text>content tab</Text>
                </Tab>
                <Tab
                    heading={
                        <TabHeading>
                            <Text>Tab2</Text>
                        </TabHeading>
                    }
                >
                    <Text>content tab</Text>
                </Tab>
            </Tabs>,
        );
        const elemTab = getByText('Tab1');
        fireEvent.press(elemTab);
        expect(elemTab).toBeDefined();
        expect(mockOnChangeTab).toHaveBeenCalledTimes(1);
    });

    test('Debería renderizar <Tabs /> version white para fondos oscuros', () => {
        const { getByText } = render(
            <Tabs white>
                <Tab
                    heading={
                        <TabHeading>
                            <Text style={HelperStyle.white}>Tab1</Text>
                        </TabHeading>
                    }
                >
                    <Text style={HelperStyle.white}>content tab</Text>
                </Tab>
                <Tab
                    heading={
                        <TabHeading>
                            <Text style={HelperStyle.white}>Tab2</Text>
                        </TabHeading>
                    }
                >
                    <Text style={HelperStyle.white}>content tab</Text>
                </Tab>
            </Tabs>,
        );
        const elemTab = getByText('Tab1');
        expect(elemTab).toBeDefined();
        expect(Object.assign(...elemTab.props.style)).toEqual(
            expect.objectContaining(HelperStyle.white),
        );
    });

    test('Debería renderizar tab con scroll y llamar el defaultProps de onScroll', () => {
        const { getByTestId } = render(
            <Tabs scroll contentProps={{ testID: 'IDTabs' }}>
                <Tab
                    heading={
                        <TabHeading>
                            <Text>Tab1</Text>
                        </TabHeading>
                    }
                >
                    <Text>content tab</Text>
                </Tab>
                <Tab
                    heading={
                        <TabHeading>
                            <Text>Tab2</Text>
                        </TabHeading>
                    }
                >
                    <Text>content tab</Text>
                </Tab>
                <Tab
                    heading={
                        <TabHeading>
                            <Text>Tab3</Text>
                        </TabHeading>
                    }
                >
                    <Text>content tab</Text>
                </Tab>
                <Tab
                    heading={
                        <TabHeading>
                            <Text>Tab4</Text>
                        </TabHeading>
                    }
                >
                    <Text>content tab</Text>
                </Tab>
            </Tabs>,
        );
        const elemTabs = getByTestId('IDTabs');
        fireEvent.scroll(elemTabs, {
            nativeEvent: {
                contentSize: { height: 600, width: 400 },
                contentOffset: { y: 0, x: 150 },
                layoutMeasurement: { height: 100, width: 100 },
            },
        });
        expect(elemTabs).toBeDefined();
    });

    test('Debería renderizar tab con scroll y llamar a onScroll', () => {
        const { getByTestId } = render(
            <Tabs
                scroll
                contentProps={{ testID: 'IDTabs' }}
                onScroll={mockOnScroll}
            >
                <Tab
                    heading={
                        <TabHeading>
                            <Text>Tab1</Text>
                        </TabHeading>
                    }
                >
                    <Text>content tab</Text>
                </Tab>
                <Tab
                    heading={
                        <TabHeading>
                            <Text>Tab2</Text>
                        </TabHeading>
                    }
                >
                    <Text>content tab</Text>
                </Tab>
                <Tab
                    heading={
                        <TabHeading>
                            <Text>Tab3</Text>
                        </TabHeading>
                    }
                >
                    <Text>content tab</Text>
                </Tab>
                <Tab
                    heading={
                        <TabHeading>
                            <Text>Tab4</Text>
                        </TabHeading>
                    }
                >
                    <Text>content tab</Text>
                </Tab>
            </Tabs>,
        );
        const elemTabs = getByTestId('IDTabs');
        fireEvent.scroll(elemTabs, {
            nativeEvent: {
                contentSize: { height: 600, width: 400 },
                contentOffset: { y: 0, x: 150 },
                layoutMeasurement: { height: 100, width: 100 },
            },
        });
        expect(elemTabs).toBeDefined();
        expect(mockOnChangeTab).toHaveBeenCalledTimes(1);
    });
});
