import React from 'react';
import { render } from '@testing-library/react-native';
import { HelperStyle, Text, Collapsible } from '../../../src';
import COLLAPSIBLE_STR from '../../../src/components/collapsible/CollapsibleStr';

describe('Test componente <Collapsible />', () => {
    const IDContainer = 'IDContainer';
    test('Debería renderizar correctamente', () => {
        const { toJSON } = render(
            <Collapsible collapsed={false}>
                <Text>Lorem</Text>
            </Collapsible>,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería tener estilos para ocultar el contenido', () => {
        const { getByTestId } = render(
            <Collapsible collapsed shadowTop containerTestID={IDContainer}>
                <Text>Lorem</Text>
            </Collapsible>,
        );
        const elemContent = getByTestId(IDContainer);
        expect(elemContent.props.style).toEqual(
            expect.objectContaining({
                ...HelperStyle.of_h,
                ...HelperStyle.h_0,
            }),
        );
        expect(elemContent).toBeDefined();
    });

    test('Debería tener estilo shadowTop', () => {
        const { getByTestId } = render(
            <Collapsible collapsed={false} shadowTop>
                <Text testID="test_elemento">Lorem</Text>
            </Collapsible>,
        );
        const elemContainer = getByTestId(
            COLLAPSIBLE_STR.testIDContainerShadowTop,
        );
        expect(Object.assign(...elemContainer.props.style)).toEqual(
            expect.objectContaining(HelperStyle.shadow_top),
        );
        expect(elemContainer).toBeDefined();
    });

    test('Debería tener animación con layoutAnimation', () => {
        const { getByText } = render(
            <Collapsible collapsed={false} layoutAnimation>
                <Text>Lorem</Text>
            </Collapsible>,
        );
        const elemContent = getByText('Lorem');
        expect(elemContent).toBeDefined();
    });

    test('Debería tener animación con layoutAnimation y tener estilos shadowTop', () => {
        const { getByTestId } = render(
            <Collapsible
                collapsed={false}
                layoutAnimation
                shadowTop
                testID={IDContainer}
            >
                <Text>Lorem</Text>
            </Collapsible>,
        );
        const elemContainer = getByTestId(IDContainer);
        expect(Object.assign(...elemContainer.props.style)).toEqual(
            expect.objectContaining(HelperStyle.shadow_top),
        );
        expect(elemContainer).toBeDefined();
    });

    test('Debería llamar a layoutAnimation', () => {
        const { getByTestId, rerender } = render(
            <Collapsible
                collapsed={false}
                layoutAnimation
                shadowTop
                testID={IDContainer}
            >
                <Text>Lorem</Text>
            </Collapsible>,
        );
        rerender(
            <Collapsible
                collapsed
                layoutAnimation
                shadowTop
                testID={IDContainer}
            >
                <Text>Lorem</Text>
            </Collapsible>,
        );
        const elemContainer = getByTestId(IDContainer);
        expect(elemContainer).toBeDefined();
    });
});
