import React from 'react';
import { fireEvent, render } from '@testing-library/react-native';
import Theme from '../../../src/util/Theme';
import buildStyles from '../../../src/components/subTabs/style';
import { SubTabsHeader, HelperStyle } from '../../../src/index';

describe('Test componente <SubTabsHeader />', () => {
    const buttonsHeader = [
        { title: 'SubTab 1' },
        { title: 'SubTab 2' },
        { title: 'SubTab 3' },
    ];
    test('Debería renderizar correctamente', () => {
        const { toJSON } = render(
            <Theme>
                <SubTabsHeader
                    selected={jest.fn()}
                    itemActive={0}
                    buttonsHeader={buttonsHeader}
                />
            </Theme>,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería estar activo la primera tab y las otras estar inactivas', () => {
        const { getByTestId } = render(
            <Theme>
                <SubTabsHeader
                    selected={jest.fn()}
                    itemActive={0}
                    buttonsHeader={buttonsHeader}
                />
            </Theme>,
        );
        const tab1 = getByTestId(buttonsHeader[0].title);
        const tab2 = getByTestId(buttonsHeader[1].title);
        const tab3 = getByTestId(buttonsHeader[2].title);
        expect(tab1.props.style).toEqual(
            expect.objectContaining(HelperStyle.bg_primary_light),
        );
        expect(tab2.props.style).toEqual(
            expect.objectContaining(HelperStyle.bg_white),
        );
        expect(tab3.props.style).toEqual(
            expect.objectContaining(HelperStyle.bg_white),
        );
    });

    test('Debería tener estilos para 2 tabs', () => {
        const { getByTestId } = render(
            <Theme>
                <SubTabsHeader
                    selected={jest.fn()}
                    itemActive={0}
                    buttonsHeader={[buttonsHeader[0], buttonsHeader[1]]}
                />
            </Theme>,
        );
        const tab = getByTestId(buttonsHeader[0].title);
        expect(tab.props.style).toEqual(
            expect.objectContaining(HelperStyle.w_50),
        );
    });

    test('Debería tener scroll y estilo scroll', () => {
        const { getByTestId } = render(
            <Theme>
                <SubTabsHeader
                    selected={jest.fn()}
                    itemActive={0}
                    buttonsHeader={buttonsHeader}
                    scroll
                />
            </Theme>,
        );
        const Style = buildStyles({ first: true, HelperStyle });
        const tab = getByTestId(buttonsHeader[0].title);
        expect(tab.props.style).toEqual(expect.objectContaining(Style.scroll));
    });

    test('Debería tener estilos small', () => {
        const { getByTestId } = render(
            <Theme>
                <SubTabsHeader
                    selected={jest.fn()}
                    itemActive={0}
                    buttonsHeader={buttonsHeader}
                    small
                />
            </Theme>,
        );
        const Style = buildStyles({ first: true, HelperStyle });
        const tab = getByTestId(buttonsHeader[0].title);
        expect(tab.props.style).toEqual(expect.objectContaining(Style.small));
    });

    test('Debería tener estilos sin sombra', () => {
        const { getByTestId } = render(
            <Theme>
                <SubTabsHeader
                    selected={jest.fn()}
                    itemActive={0}
                    buttonsHeader={buttonsHeader}
                    shadow={false}
                />
            </Theme>,
        );
        const tab = getByTestId(buttonsHeader[1].title);
        expect(tab.props.style).toEqual(
            expect.objectContaining(HelperStyle.shadow_none),
        );
    });

    test('Debería cambiar de tab', () => {
        const mockSelected = jest.fn();
        const { getByTestId } = render(
            <Theme>
                <SubTabsHeader
                    selected={mockSelected}
                    itemActive={0}
                    buttonsHeader={buttonsHeader}
                    small
                />
            </Theme>,
        );
        const tab = getByTestId(buttonsHeader[1].title);
        fireEvent.press(tab);
        expect(mockSelected).toHaveBeenCalledTimes(1);
        expect(tab).toBeDefined();
    });
});
