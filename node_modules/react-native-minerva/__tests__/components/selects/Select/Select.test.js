import React from 'react';
import { fireEvent, render } from '@testing-library/react-native';
import { Select, Text } from '../../../../src/index';

describe('Test componente <Select />', () => {
    const rut = '12.345.678-9';
    const props = {
        items: [
            {
                label: 'Bruno Fritsch, S.A',
                value: '1',
                rut,
            },
            {
                label: 'Consorcio corredora de Seguros LTD. 2020 asociados.',
                value: '2',
                rut,
            },
        ],
        itemsSection: [
            {
                title: 'Favoritos',
                data: [
                    {
                        label: 'Bruno Fritsch, S.A',
                        value: '1',
                        rut,
                    },
                ],
            },
            {
                title: 'Agenda',
                data: [
                    {
                        label: 'Consorcio corredora de Seguros LTD. 2020 asociados.',
                        value: '2',
                        rut,
                    },
                ],
            },
        ],
        label: 'Selecciona',
        selectedValue: '',
        onValueChange: jest.fn(),
        testID: 'testID_select',
        helperText: 'texto ayuda',
        inputSearch: {
            onChangeText: jest.fn(),
            value: '',
            clearInputValue: jest.fn(),
        },
        placeholder: 'placeholder',
        renderSection: (title) => <Text>{title}</Text>,
        renderItem: () => <Text>Item</Text>,
        onPressSelect: jest.fn(),
    };

    const multilineData = [
        {
            label: ['Cuenta Corriente', '00-000-000-00'],
            value: '1',
        },
        {
            label: ['Cuenta FAN', '00-000-000-01'],
            value: '2',
        },
        {
            label: [
                { label: 'Cuenta VISTA' },
                { label: '00-000-000-02', number: true },
            ],
            value: '3',
        },
    ];

    const {
        items,
        itemsSection,
        label,
        selectedValue,
        onValueChange,
        helperText,
        inputSearch,
        placeholder,
        testID,
        renderSection,
        renderItem,
        onPressSelect,
    } = props;

    test('Debería renderizar correctamente', () => {
        const { toJSON } = render(
            <Select
                items={items}
                label={label}
                selectedValue={selectedValue}
                onValueChange={onValueChange}
                helperText={helperText}
                controlModal={jest.fn()}
                placeholder={placeholder}
            />,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería renderizar select multiline', () => {
        const { toJSON } = render(
            <Select
                items={multilineData}
                label={label}
                selectedValue={selectedValue}
                onValueChange={onValueChange}
                helperText={helperText}
                controlModal={jest.fn()}
                multiline
                testID={testID}
            />,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería renderizar select multiline disabled', () => {
        const { toJSON } = render(
            <Select
                items={multilineData}
                label={label}
                selectedValue={selectedValue}
                onValueChange={onValueChange}
                helperText={helperText}
                controlModal={jest.fn()}
                multiline
                testID={testID}
                disabled
            />,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería renderizar select multiline error', () => {
        const { toJSON } = render(
            <Select
                items={multilineData}
                label={label}
                selectedValue={selectedValue}
                onValueChange={onValueChange}
                helperText={helperText}
                controlModal={jest.fn()}
                multiline
                testID={testID}
                error
            />,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería renderizar select multiline selected string', () => {
        const { toJSON } = render(
            <Select
                items={multilineData}
                label={label}
                selectedValue="2"
                onValueChange={onValueChange}
                helperText={helperText}
                controlModal={jest.fn()}
                multiline
                testID={testID}
            />,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería renderizar select multiline selected object', () => {
        const { toJSON } = render(
            <Select
                items={multilineData}
                label={label}
                selectedValue="3"
                onValueChange={onValueChange}
                helperText={helperText}
                controlModal={jest.fn()}
                multiline
                testID={testID}
            />,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería renderizar select section', () => {
        const { toJSON } = render(
            <Select
                items={itemsSection}
                label={label}
                selectedValue={selectedValue}
                onValueChange={onValueChange}
                helperText={helperText}
                controlModal={jest.fn()}
                placeholder={placeholder}
                section
                onPressSelect={onPressSelect}
            />,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería renderizar select section sin autocerrado con item customizados', () => {
        const { toJSON } = render(
            <Select
                items={itemsSection}
                label={label}
                selectedValue={selectedValue}
                onValueChange={onValueChange}
                helperText={helperText}
                controlModal={jest.fn()}
                placeholder={placeholder}
                section
                disabledAutoClose
                renderItem={renderItem}
                renderSection={renderSection}
            />,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería abrir select y selecionar una opción', () => {
        const mockOnPressSelect = jest.fn();
        const mockControlModal = jest.fn();
        const mockOnValueChange = jest.fn();
        const mockOnClearInputValue = jest.fn();
        const { getByTestId, getByText } = render(
            <Select
                items={items}
                label={label}
                selectedValue="2"
                onValueChange={mockOnValueChange}
                helperText={helperText}
                controlModal={mockControlModal}
                testID={testID}
                placeholder={placeholder}
                onPressSelect={mockOnPressSelect}
                inputSearch={{
                    ...inputSearch,
                    onClearInputValue: mockOnClearInputValue,
                }}
            />,
        );
        const elemSelect = getByTestId(testID);
        fireEvent.press(elemSelect);
        const elemItem = getByText(items[0].label);
        fireEvent.press(elemItem);
        expect(elemSelect).toBeDefined();
        expect(mockOnPressSelect).toHaveBeenCalledTimes(1);
        expect(mockOnClearInputValue).toHaveBeenCalledTimes(1);
    });
});
