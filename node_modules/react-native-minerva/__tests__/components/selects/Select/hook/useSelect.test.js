import { renderHook } from '@testing-library/react-hooks';
import { act } from '@testing-library/react-native';
import useSelect from '../../../../../src/components/selects/Select/hook/useSelect';

describe('Test hook useSelect', () => {
    let wrapper;
    test('deberia invocar openModal', () => {
        const mockonClearInputValue = jest.fn();
        const { result } = renderHook(
            () =>
                useSelect({
                    onPressSelect: jest.fn(),
                    inputSearch: { onClearInputValue: mockonClearInputValue },
                    disabledAutoClose: false,
                }),
            { wrapper },
        );
        act(() => {
            result.current.openModal();
        });
        expect(mockonClearInputValue).toHaveBeenCalledTimes(1);
        expect(result.current.isVisibleModal).toBeTruthy();
    });

    test('deberia invocar closeModal', () => {
        const mockonClearInputValue = jest.fn();
        const { result } = renderHook(
            () =>
                useSelect({
                    onPressSelect: jest.fn(),
                    inputSearch: { onClearInputValue: mockonClearInputValue },
                    disabledAutoClose: false,
                }),
            { wrapper },
        );
        act(() => {
            result.current.closeModal();
        });
        expect(mockonClearInputValue).toHaveBeenCalledTimes(1);
        expect(result.current.isVisibleModal).toBeFalsy();
    });

    test('deberia invocar  openModal, selectItem y closeModal', () => {
        const mockOnValueChange = jest.fn();
        const { result } = renderHook(
            () =>
                useSelect({
                    onValueChange: mockOnValueChange,
                    onPressSelect: false,
                    inputSearch: false,
                    disabledAutoClose: true,
                }),
            { wrapper },
        );
        act(() => {
            result.current.openModal();
            result.current.selectItem({ value: 1 })();
            result.current.closeModal();
        });
        expect(mockOnValueChange).toHaveBeenCalledTimes(1);
        expect(result.current.isVisibleModal).toBeFalsy();
    });
});
