import React from 'react';
import { fireEvent, render } from '@testing-library/react-native';
import { SelectNative } from '../../../../src/components/index';
import Platform from '../../../../src/constants/platform';

jest.mock('../../../../src/constants/platform', () => ({
    android: false,
    ios: true,
}));

describe('Test componente <SelectNative />', () => {
    const props = {
        items: [
            {
                label: 'Bruno Fritsch, S.A',
                value: '1',
                rut: '12.345.678-9',
            },
            {
                label: 'Consorcio corredora de Seguros LTD. 2020 asociados.',
                value: '2',
                rut: '12.345.678-9',
            },
        ],
        label: 'Selecciona',
        selectedValue: '',
        onValueChange: jest.fn(),
        testID: 'testID_select',
        helperText: 'texto ayuda',
        firstPickerItem: { label: 'Seleccione', value: 'Seleccione' },
    };
    const {
        items,
        label,
        selectedValue,
        onValueChange,
        helperText,
        firstPickerItem,
        testID,
    } = props;
    test('Debería renderizar correctamente IOS', () => {
        const { toJSON } = render(
            <SelectNative
                items={items}
                label={label}
                selectedValue={selectedValue}
                onValueChange={onValueChange}
                firstPickerItem={firstPickerItem}
                helperText={helperText}
            />,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería renderizar correctamente Android', () => {
        Platform.android = true;
        Platform.ios = false;
        const { toJSON } = render(
            <SelectNative
                items={items}
                label={label}
                selectedValue={selectedValue}
                onValueChange={onValueChange}
                firstPickerItem={firstPickerItem}
                helperText={helperText}
            />,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería abrir select', () => {
        const { getByTestId } = render(
            <SelectNative
                items={items}
                label={label}
                selectedValue={selectedValue}
                onValueChange={onValueChange}
                firstPickerItem={firstPickerItem}
                helperText={helperText}
                testID={testID}
            />,
        );
        const elemSelect = getByTestId(testID);
        fireEvent.press(elemSelect);
        expect(elemSelect).toBeDefined();
    });
});
