import React from 'react';
import { PRODUCTS } from 'bch-mobile-constants';
import { render } from '@testing-library/react-native';
import {
    HelperStyle,
    Text,
    CardItemProducto,
    Content,
} from '../../../src/index';
import CARDITEMPRODUCTO_STR from '../../../src/components/cardItemProducto/CardItemProductoStr';
import Theme from '../../../src/util/Theme';

describe('Test componente <CardItemProducto />', () => {
    const renderComponent = () => <Text>renderComponent</Text>;
    const {
        BRAND: { VISA, MASTERCARD },
        PRODUCT_TYPE: { PRODUCT_CC, PRODUCT_TC, PRODUCT_DAP },
        PRODUCT_DETAIL: { DISPONIBLE, UTILIZADO },
        CARD_TYPE: { DEFAULT, GOLD },
        NAME_PRODUCT: { DEBITO, CUENTA_CORRIENTE, DAP },
    } = PRODUCTS;
    const subtitle = '00-012-45678-00';
    const productoCC = {
        actionCard: { onPress: () => console.log('Accion principal') },
        marca: VISA,
        title: '****4468',
        titleCardNumber: true,
        subtitleFullWidth: true,
        tipoProducto: PRODUCT_CC,
        tipoTarjeta: DEFAULT,
        renderRightTitle: () => <Text style={HelperStyle.white}>hola</Text>,
        subtitle: {
            badge: DEBITO,
            text: 'Annie Sanders',
            helperText: {
                onPress: () => console.log('abrir ayuda'),
                testID: 'Ayuda',
            },
        },
        list: [
            {
                title: DISPONIBLE,
                value: '$56.000.000',
                valueLoading: true,
            },
        ],
    };
    const productoCreditoMasterCard = {
        actionCard: { onPress: () => console.log('Accion principal') },
        marca: MASTERCARD,
        title: 'Titular',
        subtitle: '****4468',
        tipoProducto: PRODUCT_TC,
        tipoTarjeta: GOLD,
        button: {
            title: 'Pagar',
            props: {
                inverse: true,
                secondary: false,
                smaller: true,
            },
        },
        list: [
            {
                title: DISPONIBLE,
                valueLoading: false,
                value: '$6.058.298',
            },
            {
                title: UTILIZADO,
                valueLoading: true,
                value: '$3.941.702',
            },
        ],
    };
    const productoProgressBar = {
        title: CUENTA_CORRIENTE,
        tipoProducto: PRODUCT_CC,
        subtitle,
        list: [
            {
                progressBar: {
                    progress: 1,
                    testID: 'testIDProgressBar',
                },
            },
        ],
    };
    const productoListComponent = {
        title: CUENTA_CORRIENTE,
        tipoProducto: PRODUCT_CC,
        subtitle,
        list: [renderComponent],
    };
    const productoBloqueado = {
        title: CUENTA_CORRIENTE,
        tipoProducto: PRODUCT_CC,
        subtitle,
        tarjetaEstado: CARDITEMPRODUCTO_STR.estado.bloqueado,
        tarjetaBloqueada: true,
    };
    const productoListTwoCol = {
        title: CUENTA_CORRIENTE,
        tipoProducto: PRODUCT_CC,
        subtitle,
        list: [
            {
                title: ['lorem', 'Sunt veniam'],
            },
            {
                value: ['$100', '$200'],
            },
            {
                valueLoading: true,
                value: ['$300', '$400'],
            },
            {
                valueLoading: true,
                title: ['Reprehenderit', 'Aute exercitation'],
            },
            {
                value: ['$500', '$600'],
                valueIndicadorShow: true,
                valueIndicadorState: true,
            },
            {
                value: ['$500', '$600'],
                valueIndicadorShow: true,
                valueIndicadorState: false,
            },
        ],
    };
    const productoDAP = {
        title: DAP,
        list: [
            {
                title: 'Saldo total',
                valueLoading: false,
                value: '$100',
                valueIndicadorShow: true,
                valueIndicadorState: true,
            },
        ],
        saldo: '$ 3.000',
        producto: DAP,
        tipoProducto: PRODUCT_DAP,
        cantidad: 10,
    };
    test('Debería renderizar correctamente', () => {
        const { toJSON } = render(
            <Theme>
                <Content>
                    <CardItemProducto
                        data={productoCC}
                        style={HelperStyle.mb_4}
                    />
                </Content>
            </Theme>,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería renderizar producto con barra de progreso', () => {
        const { getByTestId } = render(
            <Theme>
                <Content>
                    <CardItemProducto data={productoProgressBar} />
                </Content>
            </Theme>,
        );
        const elemProgressBar = getByTestId(
            productoProgressBar.list[0].progressBar.testID,
        );
        expect(elemProgressBar).toBeDefined();
    });

    test('Debería renderizar producto con componente personalizado en el list', () => {
        const { getByText } = render(
            <Theme>
                <Content>
                    <CardItemProducto data={productoListComponent} />
                </Content>
            </Theme>,
        );
        const elemListComponent = getByText('renderComponent');
        expect(elemListComponent).toBeDefined();
    });

    test('Debería renderizar producto con list title y value de dos columnas', () => {
        const { getByText } = render(
            <Theme>
                <Content>
                    <CardItemProducto data={productoListTwoCol} />
                </Content>
            </Theme>,
        );
        const elemListValue1 = getByText(productoListTwoCol.list[1].value[0]);
        const elemListValue2 = getByText(productoListTwoCol.list[1].value[1]);
        expect(Object.assign(...elemListValue1.props.style)).toEqual(
            expect.objectContaining(HelperStyle.ff_fontFamilyBold),
        );
        expect(Object.assign(...elemListValue2.props.style)).toEqual(
            expect.objectContaining(HelperStyle.ff_fontFamilyBold),
        );
        expect(elemListValue1).toBeDefined();
        expect(elemListValue2).toBeDefined();
    });

    test('Debería renderizar producto con componente personalizado en el body', () => {
        const { getByText } = render(
            <Theme>
                <Content>
                    <CardItemProducto
                        data={productoListComponent}
                        style={HelperStyle.mb_4}
                        renderBody={renderComponent}
                    />
                </Content>
            </Theme>,
        );
        const elemBodyComponent = getByText('renderComponent');
        expect(elemBodyComponent).toBeDefined();
    });

    test('Debería renderizar producto con estado bloqueado', () => {
        const { getByText } = render(
            <Theme>
                <Content>
                    <CardItemProducto data={productoBloqueado} />
                </Content>
            </Theme>,
        );
        const elemBadgeBloqueado = getByText(
            CARDITEMPRODUCTO_STR.estado.bloqueado,
        );
        expect(elemBadgeBloqueado).toBeDefined();
    });

    test('Debería renderizar producto tarjeta de credito MasterCard', () => {
        const { getByTestId } = render(
            <Theme>
                <Content>
                    <CardItemProducto data={productoCreditoMasterCard} />
                </Content>
            </Theme>,
        );
        const elemlogoMasterCard = getByTestId(
            CARDITEMPRODUCTO_STR.logoTrajetaMastercard,
        );
        expect(elemlogoMasterCard).toBeDefined();
    });

    test('Debería renderizar producto tarjeta de credito con logo tarjeta personalizado', () => {
        const { getByTestId } = render(
            <Theme>
                <Content>
                    <CardItemProducto
                        data={{
                            ...productoCreditoMasterCard,
                            icon: 'icon-bch-logo-teleton',
                        }}
                    />
                </Content>
            </Theme>,
        );
        const elemlogo = getByTestId(CARDITEMPRODUCTO_STR.logoTrajeta);
        expect(elemlogo).toBeDefined();
    });

    test('Debería renderizar producto mi inversión DAP', () => {
        const { toJSON } = render(
            <Theme>
                <Content>
                    <CardItemProducto data={productoDAP} />
                </Content>
            </Theme>,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería renderizar producto con renderLeftTitle', () => {
        const { getByText } = render(
            <Theme>
                <Content>
                    <CardItemProducto
                        data={{
                            ...productoDAP,
                            renderLeftTitle: renderComponent,
                        }}
                    />
                </Content>
            </Theme>,
        );
        const elemListComponent = getByText('renderComponent');
        expect(elemListComponent).toBeDefined();
    });
});
