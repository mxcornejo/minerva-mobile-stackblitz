import React from 'react';
import { fireEvent, render } from '@testing-library/react-native';
import { Text, Carousel, HelperStyle } from '../../../src';
import CAROUSEL_STR from '../../../src/components/carousel/CarouselStr';

describe('Test componente <Carousel />', () => {
    const renderItem = ({ item }) => <Text>{item}</Text>;
    const data = [0, 1, 2];
    test('Debería renderizar correctamente', () => {
        const { toJSON } = render(
            <Carousel
                renderItem={renderItem}
                data={data}
                carouselStyle="card"
                pagination
                maxItems={3}
                maxItemsButton={{ onPress: jest.fn() }}
            />,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería renderizar estado error', () => {
        const { getByText } = render(
            <Carousel
                renderItem={renderItem}
                data={data}
                error
                renderError={() => <Text>Error</Text>}
            />,
        );
        const elemError = getByText('Error');
        expect(elemError).toBeDefined();
    });

    test('Debería renderizar estado loading', () => {
        const { getByText } = render(
            <Carousel
                renderItem={renderItem}
                data={data}
                loading
                renderLoading={() => <Text>Cargando</Text>}
            />,
        );
        const elemLoading = getByText('Cargando');
        expect(elemLoading).toBeDefined();
    });

    test('Debería renderizar con máximo de elementos y mostrar botón ver todos en la última posición', () => {
        const mockOnPress = jest.fn();
        const maxItemsButton = { onPress: mockOnPress, testID: 'IDbtn' };
        const { getByTestId } = render(
            <Carousel
                renderItem={renderItem}
                data={data}
                maxItems={2}
                firstItem={2}
                maxItemsButton={maxItemsButton}
            />,
        );
        const elemBtn = getByTestId(maxItemsButton.testID);
        fireEvent.press(elemBtn);
        expect(mockOnPress).toHaveBeenCalledTimes(1);
        expect(elemBtn).toBeDefined();
    });

    test('Debería renderizar con animación de fondo', () => {
        const { getByTestId } = render(
            <Carousel
                renderItem={renderItem}
                data={data}
                backgroundAnimation
            />,
        );
        const elemBg = getByTestId(CAROUSEL_STR.backgroundAnimation.testID);
        expect(elemBg).toBeDefined();
    });

    test('Debería renderizar Carousel tipo Card', () => {
        const { getByTestId } = render(
            <Carousel
                renderItem={renderItem}
                data={data}
                backgroundAnimation
                carouselStyle="card"
            />,
        );
        const elemContainerItem = getByTestId(
            `${CAROUSEL_STR.containerItemTestID}-0`,
        );
        expect(Object.assign(...elemContainerItem.props.style)).toEqual(
            expect.objectContaining({
                ...HelperStyle.ml_2,
                ...HelperStyle.mr_2,
            }),
        );
        expect(elemContainerItem).toBeDefined();
    });

    test('Debería renderizar Carousel tipo Card de un solo elemento y el elemento tener estilos de espaciado para caso unico hijo', () => {
        const { getByTestId } = render(
            <Carousel
                renderItem={renderItem}
                data={[1]}
                backgroundAnimation
                carouselStyle="card"
            />,
        );
        const elemContainerItem = getByTestId(
            `${CAROUSEL_STR.containerItemTestID}-0`,
        );
        expect(Object.assign(...elemContainerItem.props.style)).toEqual(
            expect.objectContaining({
                ...HelperStyle.ml_4,
                ...HelperStyle.mr_4,
            }),
        );
        expect(elemContainerItem).toBeDefined();
    });

    test('Debería renderizar Carousel tipo Card con máximo de elementos y mostrar componente personalizado en última posición', () => {
        const { getByText } = render(
            <Carousel
                renderItem={renderItem}
                data={data}
                maxItems={2}
                firstItem={2}
                renderMaxItems={() => <Text>Last Item</Text>}
                carouselStyle="card"
            />,
        );
        const elemBtn = getByText('Last Item');
        expect(elemBtn).toBeDefined();
    });
});
