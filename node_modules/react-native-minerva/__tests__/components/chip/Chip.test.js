import React from 'react';
import { fireEvent, render } from '@testing-library/react-native';
import Chip from '../../../src/components/chip/Chip';
import buildStyle from '../../../src/components/chip/style';
import { HelperStyle } from '../../../src';

const Style = buildStyle(HelperStyle);

const mockOnPress = jest.fn();

describe('Test componente <Chip />', () => {
    const props = {
        title: 'Chip',
        avatar: 'J',
        badge: '5',
        removable: true,
        icon: 'icon-bch-star-fill',
        testIDIcon: 'test_icon',
        testIDAvatar: 'test_avatar',
        testIDBadge: 'test_badge',
    };
    test('Debería renderizar correctamente', () => {
        const { title } = props;
        const { toJSON } = render(
            <Chip title={title} selected style={HelperStyle.mb_4} />,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería llamar a default onPress', () => {
        const { title } = props;
        const { getByTestId } = render(<Chip title={title} />);
        const chipElement = getByTestId(title);
        fireEvent.press(chipElement);
        expect(chipElement).toBeDefined();
    });

    test('Debería tener estilos tamaño big', () => {
        const { title } = props;
        const { getByTestId } = render(
            <Chip title={title} selected style={HelperStyle.mb_4} big />,
        );
        const chipElement = getByTestId(title);
        expect(chipElement.props.style).toEqual(
            expect.objectContaining(Style.big),
        );
    });

    test('Debería estar disabled', () => {
        const { title } = props;
        const { getByTestId } = render(
            <Chip
                title={title}
                selected
                style={HelperStyle.mb_4}
                disabled
                onPress={mockOnPress}
            />,
        );
        const chipElement = getByTestId(title);
        fireEvent.press(chipElement);
        expect(mockOnPress).not.toBeCalled();
    });

    test('Debería tener icono removable', () => {
        const { title, testIDIcon } = props;
        const { getByTestId } = render(
            <Chip
                title={title}
                selected
                style={HelperStyle.mb_4}
                removable
                removableProps={{ testID: testIDIcon }}
            />,
        );
        const elementIcon = getByTestId(testIDIcon);
        expect(elementIcon).toBeDefined();
    });

    test('Debería tener icono', () => {
        const { title, icon, testIDIcon } = props;
        const { getByTestId } = render(
            <Chip
                title={title}
                selected
                style={HelperStyle.mb_4}
                icon={icon}
                iconProps={{ testID: testIDIcon }}
            />,
        );
        const elementIcon = getByTestId(testIDIcon);
        expect(elementIcon).toBeDefined();
    });

    test('Debería tener icono tamaño big y estilos big icon', () => {
        const { title, icon, testIDIcon } = props;
        const { getByTestId } = render(
            <Chip
                title={title}
                selected
                style={HelperStyle.mb_4}
                icon={icon}
                big
                iconProps={{ testID: testIDIcon }}
            />,
        );
        const elementIcon = getByTestId(testIDIcon);
        const chipElement = getByTestId(title);
        expect(elementIcon).toBeDefined();
        expect(chipElement.props.style).toEqual(
            expect.objectContaining(Style.bigIcon),
        );
    });

    test('Debería tener icono tamaño bigger y estilos bigger icon', () => {
        const { title, icon, testIDIcon } = props;
        const { getByTestId } = render(
            <Chip
                title={title}
                selected
                style={HelperStyle.mb_4}
                icon={icon}
                bigger
                iconProps={{ testID: testIDIcon }}
            />,
        );
        const elementIcon = getByTestId(testIDIcon);
        const chipElement = getByTestId(title);
        expect(elementIcon).toBeDefined();
        expect(chipElement.props.style).toEqual(
            expect.objectContaining(Style.bigger),
        );
    });

    test('Debería mostrar avatar', () => {
        const { title, avatar, testIDAvatar } = props;
        const { getByTestId } = render(
            <Chip
                title={title}
                selected
                style={HelperStyle.mb_4}
                avatar={avatar}
                avatarProps={{ testID: testIDAvatar }}
            />,
        );
        const avatarElement = getByTestId(testIDAvatar);
        expect(avatarElement).toBeDefined();
    });

    test('Debería mostrar avatar con tamaño big', () => {
        const { title, avatar, testIDAvatar } = props;
        const { getByTestId } = render(
            <Chip
                title={title}
                selected
                style={HelperStyle.mb_4}
                avatar={avatar}
                avatarProps={{ testID: testIDAvatar }}
                big
            />,
        );
        const avatarElement = getByTestId(testIDAvatar);
        const chipElement = getByTestId(title);
        expect(avatarElement).toBeDefined();
        expect(chipElement.props.style).toEqual(
            expect.objectContaining(Style.bigIcon),
        );
    });

    test('Debería estar invisible', () => {
        const { title } = props;
        const { toJSON } = render(<Chip title={title} visible={false} />);
        expect(toJSON()).toBe(null);
    });

    test('Debería mostrar badge', () => {
        const { title, badge, testIDBadge } = props;
        const { getByTestId } = render(
            <Chip
                title={title}
                selected
                style={HelperStyle.mb_4}
                badge={badge}
                badgeProps={{ testID: testIDBadge }}
            />,
        );
        const badgeElement = getByTestId(testIDBadge);
        expect(badgeElement).toBeDefined();
    });
});
