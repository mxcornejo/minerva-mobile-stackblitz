import React from 'react';
import { render } from '@testing-library/react-native';
import Badge from '../../../src/components/badge/Badge';
import { HelperStyle, H3 } from '../../../src';

describe('Test componente <Badge />', () => {
    const props = {
        text: 'Texto badge',
        style: HelperStyle.mb_4,
        icon: 'icon-bch-outcomes',
        testID: 'test_badge',
    };

    const iconObject = {
        name: props.icon,
        accessibilityLabel: 'label de accesibilidad',
        testID: 'label de accesibilidad',
    };

    test('Debería renderizar correctamente', () => {
        const { text, style, icon } = props;
        const { toJSON } = render(
            <Badge text={text} style={style} icon={icon} />,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería renderizar badge large', () => {
        const { text, style, icon, testID } = props;
        const { getByTestId } = render(
            <Badge
                text={text}
                style={style}
                icon={icon}
                testID={testID}
                large
            />,
        );
        const badgeElement = getByTestId(testID);
        const { large: testLarge } = badgeElement.props;
        expect(testLarge).toBeTruthy();
    });

    test('Debería renderizar badge diferente a color base', () => {
        const { text, style, testID } = props;
        const { getByTestId } = render(
            <Badge text={text} style={style} testID={testID} primary />,
        );
        const badgeElement = getByTestId(testID);
        const { primary: testPrimary } = badgeElement.props;
        expect(testPrimary).toBeTruthy();
    });

    test('Debería renderizar badge con icono', () => {
        const { text, style, testID } = props;
        const { getByTestId } = render(
            <Badge
                text={text}
                style={style}
                icon={iconObject}
                testID={testID}
                primary
            />,
        );
        const badgeElement = getByTestId(testID);
        expect(badgeElement).toBeDefined();
    });

    test('Debería renderizar badge tipo close', () => {
        const { style, testID } = props;
        const { getByTestId } = render(
            <Badge close style={style} testID={testID} />,
        );
        const badgeElement = getByTestId(testID);
        expect(badgeElement).toBeDefined();
    });

    test('Debería renderizar badge con custom render', () => {
        const { getByTestId } = render(
            <Badge success>
                <H3 testID="test_custom_element">Texto personalizado</H3>
            </Badge>,
        );
        const customElement = getByTestId('test_custom_element');
        expect(customElement).toBeDefined();
    });
});
