import React from 'react';
import { render, fireEvent } from '@testing-library/react-native';
import { HelperStyle, InputSearch } from '../../../src';
import INPUTSEARCH_STR from '../../../src/components/inputSearch/InputSearchStr';

const mockOnChangeText = jest.fn();

describe('Test componente <InputSearch />', () => {
    const testID = 'testID';
    test('Debería renderizar correctamente', () => {
        const { toJSON } = render(
            <InputSearch value="" style={HelperStyle.mb_4} />,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería cambiar de valor', () => {
        const newValue = 'hola';
        const { getByTestId } = render(
            <InputSearch
                onChangeText={mockOnChangeText}
                value=""
                style={HelperStyle.mb_4}
                testID={testID}
            />,
        );
        const elemInput = getByTestId(testID);
        fireEvent.changeText(elemInput, newValue);
        expect(mockOnChangeText).toHaveBeenCalledTimes(1);
    });

    test('Debería llamar a mockClearInputValue', () => {
        const mockClearInputValue = jest.fn();
        const { getByTestId } = render(
            <InputSearch
                inputRef={jest.fn(null)}
                onChangeText={mockOnChangeText}
                value="value"
                style={HelperStyle.mb_4}
                clearInputValue={mockClearInputValue}
                testID={testID}
                searchStyle="light"
            />,
        );
        const elemIconClear = getByTestId(INPUTSEARCH_STR.iconClear.testID);
        fireEvent.press(elemIconClear);
        expect(mockClearInputValue).toHaveBeenCalledTimes(1);
    });

    test('Debería llamar a clearInputValue por defecto', () => {
        const { getByTestId } = render(
            <InputSearch
                inputRef={jest.fn(null)}
                onChangeText={mockOnChangeText}
                value="value"
                style={HelperStyle.mb_4}
                testID={testID}
                searchStyle="light"
            />,
        );
        const elemIconClear = getByTestId(INPUTSEARCH_STR.iconClear.testID);
        fireEvent.press(elemIconClear);
        expect(elemIconClear).toBeDefined();
    });

    test('Debería entrar en focus al presionar icono buscar', () => {
        const mockClearInputValue = jest.fn();
        const inputRef = jest.fn().mockReturnValue({
            current: {
                _root: {
                    focus: jest.fn(),
                },
            },
        });
        const { getByTestId } = render(
            <InputSearch
                inputRef={inputRef}
                onChangeText={mockOnChangeText}
                value="value"
                style={HelperStyle.mb_4}
                clearInputValue={mockClearInputValue}
                testID={testID}
                searchStyle="light"
            />,
        );
        const elemIconSearch = getByTestId(INPUTSEARCH_STR.iconSearch.testID);
        fireEvent.press(elemIconSearch);
        expect(elemIconSearch).toBeDefined();
    });

    test('Debería mostrar mensaje de error', () => {
        const { getByText } = render(
            <InputSearch
                inputRef={jest.fn(null)}
                onChangeText={mockOnChangeText}
                value="value"
                style={HelperStyle.mb_4}
                testID={testID}
                errorText="error"
            />,
        );
        const elemEror = getByText('error');
        expect(elemEror).toBeDefined();
    });
});
