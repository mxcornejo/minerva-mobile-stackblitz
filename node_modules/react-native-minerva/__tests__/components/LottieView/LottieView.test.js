/* eslint-disable global-require */
import React from 'react';
import Assets from 'bch-assets';
import { render } from '@testing-library/react-native';
import Theme from '../../../src/util/Theme';
import { HelperStyle, LottieView, Platform } from '../../../src/index';

const lottie = Assets.lottieAnimations;

describe('Test componente <LottieView />', () => {
    const testID = 'testID';
    const findKeypath = (keypath) => (item) => item.keypath === keypath;

    test('Debería renderizar correctamente', () => {
        const { toJSON } = render(<LottieView source={lottie.check} />);
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería renderizar lottie con props imageAssetsFolder configurada para el caso de Android', () => {
        Platform.android = true;
        Platform.ios = false;
        const { getByTestId } = render(
            <Theme>
                <LottieView source={lottie.check} testID={testID} />
            </Theme>,
        );
        const elemLottie = getByTestId(testID);
        expect(elemLottie.props.imageAssetsFolder).toBe(lottie.check.android);
        expect(elemLottie).toBeDefined();
    });

    test('Debería renderizar lottie versión white para caso 3 keypath color_brand', () => {
        Platform.android = true;
        Platform.ios = false;
        const { getByTestId } = render(
            <Theme>
                <LottieView white source={lottie.check} testID={testID} />
            </Theme>,
        );
        const elemLottie = getByTestId(testID);
        const filterColor = elemLottie.props.colorFilters.find(
            findKeypath('color_brand'),
        );
        expect(filterColor.color).toBe(HelperStyle.white.color);
        expect(elemLottie).toBeDefined();
    });

    test('Debería renderizar lottie y cambiar color del keypath color_brand por success', () => {
        Platform.android = true;
        Platform.ios = false;
        const { getByTestId } = render(
            <Theme>
                <LottieView
                    white
                    source={lottie.check}
                    testID={testID}
                    colorFilters={[
                        {
                            keypath: 'color_brand',
                            color: HelperStyle.success.color,
                        },
                    ]}
                />
            </Theme>,
        );
        const elemLottie = getByTestId(testID);
        const filterColor = elemLottie.props.colorFilters.find(
            findKeypath('color_brand'),
        );
        expect(filterColor.color).toBe(HelperStyle.success.color);
        expect(elemLottie).toBeDefined();
    });

    test('Debería renderizar lottie que no este registrado en bch-Assets', () => {
        const lottieExterno = require('./lottie_externo.json');
        const { getByTestId } = render(
            <LottieView source={lottieExterno} testID={testID} />,
        );
        const elemLottie = getByTestId(testID);
        expect(elemLottie).toBeDefined();
    });

    test('Debería poder renderizar sin source', () => {
        const { getByTestId } = render(<LottieView testID={testID} />);
        const elemLottie = getByTestId(testID);
        expect(elemLottie).toBeDefined();
    });
});
