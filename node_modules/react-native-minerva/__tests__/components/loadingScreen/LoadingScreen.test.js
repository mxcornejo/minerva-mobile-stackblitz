import React from 'react';
import Color from 'color';
import { render } from '@testing-library/react-native';
import { HelperStyle, LoadingScreen } from '../../../src/index';
import Style from '../../../src/components/loadingScreen/style';

const mockFn = jest.fn();

describe('Test componente <LoadingScreen />', () => {
    const testID = 'testID';
    test('Debería renderizar correctamente', () => {
        const { toJSON } = render(
            <LoadingScreen
                onEndAnimationEnd={mockFn}
                onStartAnimationEnd={mockFn}
            />,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería renderizar animación con forma de circle', () => {
        const { getByTestId } = render(
            <LoadingScreen
                onEndAnimationEnd={mockFn}
                onStartAnimationEnd={mockFn}
                circle
                testID={testID}
            />,
        );
        const elemRipple = getByTestId(testID);
        expect(elemRipple.props.style).toEqual(
            expect.objectContaining(Style.rippleCircle),
        );
        expect(elemRipple).toBeDefined();
    });

    test('Debería renderizar animación con color de fondo success', () => {
        const { getByTestId, rerender } = render(
            <LoadingScreen
                onEndAnimationEnd={mockFn}
                onStartAnimationEnd={mockFn}
                colorBackground={HelperStyle.success.color}
                testID={testID}
            />,
        );
        rerender(
            <LoadingScreen
                onEndAnimationEnd={mockFn}
                onStartAnimationEnd={mockFn}
                colorBackground={[
                    HelperStyle.success.color,
                    HelperStyle.success.color,
                ]}
                testID={testID}
            />,
        );
        const elemRipple = getByTestId(testID);
        expect(
            Color(elemRipple.props.animatedStyle.value.backgroundColor).hex(),
        ).toBe(HelperStyle.success.color);
        expect(elemRipple).toBeDefined();
    });
});
