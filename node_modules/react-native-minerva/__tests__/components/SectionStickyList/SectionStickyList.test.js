import React from 'react';
import { render } from '@testing-library/react-native';
import { SectionStickyList, Text, View } from '../../../src/index';

describe('Test componente <SectionStickyList />', () => {
    const testIDCustomComponent = 'IDcustomComponent';
    const renderComponent = () => <View testID={testIDCustomComponent} />;
    const data = [
        {
            title: 'Main dishes',
            data: ['Pizza', 'Burger', 'Risotto'],
        },
        {
            title: 'Sides',
            data: ['French Fries', 'Onion Rings', 'Fried Shrimps'],
        },
    ];
    const renderCustom = () => <Text>Adipisicing laboris eiusmod</Text>;
    const dataListHeader = [{ component: renderCustom }];
    const renderSectionHeader = ({ section: { title } }) => (
        <Text>{title}</Text>
    );
    test('Debería renderizar correctamente', () => {
        const { toJSON } = render(
            <SectionStickyList
                stickyHeaderIndices={[1]}
                sections={data}
                ListEmptyComponent={renderCustom}
                renderItem={renderCustom}
                dataListHeader={dataListHeader}
                ListFooterComponent={renderCustom}
                renderSectionHeader={renderSectionHeader}
            />,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería renderizar con estado loading', () => {
        const { getByTestId } = render(
            <SectionStickyList
                stickyHeaderIndices={[1]}
                sections={data}
                ListEmptyComponent={renderCustom}
                renderItem={renderCustom}
                dataListHeader={dataListHeader}
                ListFooterComponent={renderCustom}
                renderSectionHeader={renderSectionHeader}
                loading
                ListLoadingComponent={renderComponent}
            />,
        );
        expect(getByTestId(testIDCustomComponent)).toBeDefined();
    });

    test('Debería renderizar con estado error', () => {
        const { getByTestId } = render(
            <SectionStickyList
                stickyHeaderIndices={[1]}
                sections={data}
                ListEmptyComponent={renderCustom}
                renderItem={renderCustom}
                dataListHeader={dataListHeader}
                ListFooterComponent={renderCustom}
                renderSectionHeader={renderSectionHeader}
                error
                ListErrorComponent={renderComponent}
            />,
        );
        expect(getByTestId(testIDCustomComponent)).toBeDefined();
    });

    test('Debería renderizar con estado vació', () => {
        const { getByTestId } = render(
            <SectionStickyList
                sections={[]}
                renderItem={renderCustom}
                ListEmptyComponent={renderComponent}
                renderSectionHeader={renderSectionHeader}
            />,
        );
        expect(getByTestId(testIDCustomComponent)).toBeDefined();
    });
});
