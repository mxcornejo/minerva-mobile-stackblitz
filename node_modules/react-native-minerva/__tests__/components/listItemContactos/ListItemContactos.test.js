import React from 'react';
import Assets from 'bch-assets';
import { render } from '@testing-library/react-native';
import Theme from '../../../src/util/Theme';
import { ListItemContactos, HelperStyle, View, Validate } from '../../../src';

describe('Test componente <ListItemContactos />', () => {
    const testIDCustomComponent = 'IDcustomComponent';
    const renderComponent = () => <View testID={testIDCustomComponent} />;
    const testID = 'testID';
    const data = {
        styleNombre: HelperStyle.fw_b,
        nombre: 'Mara Dali',
        detalle: 'Banco Santander',
        monto: '$ 300',
    };
    const dataIcon = {
        iconName: 'icon-bch-circle-avatar',
        nombre: data.nombre,
        detalle: data.detalle,
        monto: data.monto,
    };
    const dataLabel = {
        label: 'M',
        nombre: data.nombre,
        detalle: data.detalle,
        monto: data.monto,
    };
    const dataIconLeft = {
        nombre: data.nombre,
        detalle: data.detalle,
        monto: '',
        iconLeft: true,
        iconName: 'icon-bch-circle-avatar',
    };
    const dataAvatarSmall = {
        styleNombre: HelperStyle.fw_b,
        nombre: 'Mara Dali',
        detalle: 'Banco Santander',
        monto: '$ 300',
        sizeAvatar: 'small',
    };

    const dataTruncado = {
        styleNombre: HelperStyle.fw_b,
        nombre: 'Mara Dali',
        isTruncatedNombre: true,
        numberOfLinesNombre: 2,
        detalle: [{ text: '12 de Agosto 2022', numberOfLines: 2 }],
        monto: '$ 300',
    };

    const dataConRenderDetalle = {
        nombre: 'Mara Dali',
        monto: '$ 300',
        renderDetalle: renderComponent,
    };

    const dataSinDetalle = {
        nombre: 'Mara Dali',
        monto: '$ 300',
    };

    const dataConImagenLocal = {
        styleNombre: HelperStyle.fw_b,
        nombre: 'Juan Jose',
        source: Assets.alerts.info,
    };

    test('Debería renderizar correctamente', () => {
        const { toJSON } = render(
            <Theme>
                <ListItemContactos data={data} />
            </Theme>,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería renderizar con Avatar con label', () => {
        const { getByText } = render(
            <Theme>
                <ListItemContactos data={dataLabel} />
            </Theme>,
        );
        expect(getByText(dataLabel.label)).toBeDefined();
    });

    test('Debería renderizar listado tipo card', () => {
        const { getByTestId } = render(
            <Theme>
                <ListItemContactos card data={dataIcon} testID={testID} />
            </Theme>,
        );
        const elemCard = getByTestId(testID);
        expect(Object.assign(...elemCard.props.style)).toEqual(
            expect.objectContaining(HelperStyle.shadow),
        );
        expect(elemCard).toBeDefined();
    });

    test('Debería renderizar con iconLeft', () => {
        const { getByTestId } = render(
            <Theme>
                <ListItemContactos
                    data={dataIconLeft}
                    iconLeftTestID={testID}
                />
            </Theme>,
        );
        expect(getByTestId(testID)).toBeDefined();
    });

    test('Debería renderizar componente en el right', () => {
        const { getByTestId } = render(
            <Theme>
                <ListItemContactos
                    renderRight={renderComponent}
                    data={dataIconLeft}
                />
            </Theme>,
        );
        expect(getByTestId(testIDCustomComponent)).toBeDefined();
    });

    test('Debería renderizar componente en el body', () => {
        const { getByTestId } = render(
            <Theme>
                <ListItemContactos
                    renderBody={renderComponent}
                    data={dataIconLeft}
                />
            </Theme>,
        );
        expect(getByTestId(testIDCustomComponent)).toBeDefined();
    });

    test('Debería renderizar componente en el detalle', () => {
        const { getByTestId } = render(
            <Theme>
                <ListItemContactos data={dataConRenderDetalle} />
            </Theme>,
        );
        expect(getByTestId(testIDCustomComponent)).toBeDefined();
    });

    test('Debería renderizar listado con nombre con letras resaltada', () => {
        const firstName = data.nombre.split(' ')[0];
        const { getByText } = render(
            <Theme>
                <ListItemContactos
                    data={data}
                    highlighter={{ searchWords: [firstName] }}
                />
            </Theme>,
        );
        const elemHighlighter = getByText(firstName);
        const color = Validate.findStyle(elemHighlighter.props.style, 'color');
        expect(color).toEqual(expect.objectContaining(HelperStyle.primary));
        expect(elemHighlighter).toBeDefined();
    });
    test('Debería renderizar correctamente con un avatar de menor tamaño', () => {
        const { toJSON } = render(
            <Theme>
                <ListItemContactos data={dataAvatarSmall} />
            </Theme>,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería renderizar nombre y detalle truncado', () => {
        const { toJSON } = render(
            <Theme>
                <ListItemContactos data={dataTruncado} />
            </Theme>,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería renderizar con estado disabled', () => {
        const { toJSON } = render(
            <Theme>
                <ListItemContactos data={dataTruncado} disabled />
            </Theme>,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería renderizar sin detalle', () => {
        const { toJSON } = render(
            <Theme>
                <ListItemContactos data={dataSinDetalle} />
            </Theme>,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería renderizar con imagen local', () => {
        const { toJSON } = render(
            <Theme>
                <ListItemContactos data={dataConImagenLocal} />
            </Theme>,
        );
        expect(toJSON()).toMatchSnapshot();
    });
});
