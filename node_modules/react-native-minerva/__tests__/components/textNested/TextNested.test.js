import React from 'react';
import { render } from '@testing-library/react-native';
import { HelperStyle, TextNested } from '../../../src';

const testID = 'mainText';

const data = [
    'Sit reprehenderit non ',
    { text: 'nostrud non quis sunt velit ', bold: true },
    'reprehenderit duis qui ut mollit.',
];

const dataBoldMain = [
    {
        text: 'nostrud non quis sunt velit ',
        bold: true,
        testID,
        style: HelperStyle.ta_c,
    },
    'reprehenderit duis qui ut mollit.',
];

const dataWidthIcon = [
    {
        text: 'link ',
        style: HelperStyle.primary,
        iconName: 'icon-bch-external-link',
    },
    'reprehenderit duis qui ut mollit.',
    {
        text: 'link ',
        style: [HelperStyle.primary, HelperStyle.fs_3],
        iconName: 'icon-bch-external-link',
        iconAlign: 'start',
    },
];

describe('Test componente <TextNested />', () => {
    test('Deberia renderizar correctamente', () => {
        const { toJSON } = render(<TextNested data={data} />);
        expect(toJSON()).toMatchSnapshot();
    });

    test('Deberia renderizar texto principal centrado desde las props', () => {
        const { getByTestId } = render(
            <TextNested
                data={data}
                style={HelperStyle.ta_c}
                testID="mainText"
            />,
        );
        const wrapperTex = getByTestId(testID);
        expect(wrapperTex).toBeDefined();
        expect(Object.assign(...wrapperTex.props.style.flat())).toEqual(
            expect.objectContaining(HelperStyle.ta_c),
        );
    });

    test('Deberia renderizar texto principal centrado desde las props del objecto', () => {
        const { getByTestId } = render(<TextNested data={dataBoldMain} />);
        const wrapperTex = getByTestId(testID);
        expect(wrapperTex).toBeDefined();
        expect(Object.assign(...wrapperTex.props.style.flat())).toEqual(
            expect.objectContaining(HelperStyle.ta_c),
        );
    });

    test('Deberia renderizar texto con icono y el icono deberia tener la fuente escalada', () => {
        const { toJSON } = render(<TextNested data={dataWidthIcon} />);
        expect(toJSON()).toMatchSnapshot();
    });
});
