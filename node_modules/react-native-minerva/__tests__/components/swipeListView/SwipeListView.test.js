import React from 'react';
import { fireEvent, render } from '@testing-library/react-native';
import { SwipeListView, Text } from '../../../src/index';
import Theme from '../../../src/util/Theme';

describe('Test componente <SwipeListView />', () => {
    const icons = {
        delete: {
            iconName: 'icon-bch-trush',
            onPress: jest.fn(),
            type: 'danger',
        },
        add: {
            iconName: 'icon-bch-plus-strong',
            onPress: jest.fn(),
            type: 'success',
        },
        edit: {
            iconName: 'icon-bch-edit',
            onPress: jest.fn(),
        },
    };
    const globales = [icons.delete, icons.add, icons.edit];
    const contactos = {
        label: 'M',
        nombre: 'Mara',
        detalle: 'Laborum nostrud amet incididunt',
        monto: '$ 400',
        iconName: 'icon-bch-buy-dollars',
    };
    const data = [
        { ...contactos, text: 'item 1', loading: true },
        { ...contactos, text: 'item 2', small: true },
        { ...contactos, text: 'item 3' },
    ];

    const dataOptionsByRowRight = [
        {
            text: 'item 1',
            ...contactos,
            hiddenItemRight: [{ ...icons.delete, testID: 'testID_icon_1' }],
        },
        { ...data[1] },
    ];

    const dataOptionsByRowLeft = [
        {
            text: 'item 1',
            ...contactos,
            hiddenItemLeft: [{ ...icons.delete, testID: 'testID_icon_1' }],
        },
        { ...data[1] },
    ];

    const mockRenderItem = jest.fn(() => <Text>item</Text>);

    const renderHiddenItem = jest.fn(() => <Text>renderHiddenItem</Text>);

    test('Debería renderizar correctamente', () => {
        const { toJSON, rerender } = render(
            <Theme>
                <SwipeListView
                    useFlatList
                    data={data}
                    renderItem={mockRenderItem}
                    hiddenItemRight={globales}
                    hiddenItemLeft={globales}
                />
            </Theme>,
        );
        rerender(
            <Theme>
                <SwipeListView
                    useFlatList
                    data={[contactos]}
                    renderItem={mockRenderItem}
                />
            </Theme>,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería mostrar opciones única "delete" en el right del primer elemento de la fila', () => {
        const { getByTestId } = render(
            <Theme>
                <SwipeListView
                    useFlatList
                    data={dataOptionsByRowRight}
                    renderItem={mockRenderItem}
                    hiddenItemRight={globales}
                />
            </Theme>,
        );
        const elemBtnRight = getByTestId(
            dataOptionsByRowRight[0].hiddenItemRight[0].testID,
        );
        fireEvent.press(elemBtnRight);
        expect(elemBtnRight).toBeDefined();
    });

    test('Debería mostrar opciones única "delete" en el left del primer elemento de la fila', () => {
        const { getByTestId } = render(
            <Theme>
                <SwipeListView
                    useFlatList
                    data={dataOptionsByRowLeft}
                    renderItem={mockRenderItem}
                    hiddenItemLeft={globales}
                />
            </Theme>,
        );
        const elemBtnLeft = getByTestId(
            dataOptionsByRowLeft[0].hiddenItemLeft[0].testID,
        );
        fireEvent.press(elemBtnLeft);
        expect(elemBtnLeft).toBeDefined();
    });

    test('Debería renderizar componente personalizado en las opciones ocultas', () => {
        const { getByText } = render(
            <Theme>
                <SwipeListView
                    useFlatList
                    data={[data[0]]}
                    renderItem={mockRenderItem}
                    hiddenItemRight={globales}
                    hiddenItemLeft={globales}
                    renderHiddenItem={renderHiddenItem}
                />
            </Theme>,
        );
        const elemHiddenItem = getByText('renderHiddenItem');
        expect(elemHiddenItem).toBeDefined();
    });
});
