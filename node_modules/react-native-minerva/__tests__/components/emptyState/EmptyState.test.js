import React from 'react';
import Assets from 'bch-assets';
import { render } from '@testing-library/react-native';
import { View, EmptyState } from '../../../src';

describe('Test componente <EmptyState />', () => {
    const title = 'No se encuentra resultados';
    const content = 'Sunt nisi culpa nulla non Lorem esse enim.';
    const testIDCustomComponent = 'IDcustomComponent';
    const renderComponent = () => <View testID={testIDCustomComponent} />;
    test('Debería renderizar correctamente', () => {
        const { toJSON } = render(
            <EmptyState
                icon="icon-bch-empty-search"
                title={title}
                content={content}
                buttonsGroup={[{ title: 'primary' }]}
            />,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería renderizar icono con objecto', () => {
        const { getByTestId } = render(
            <EmptyState
                icon={{ name: 'icon-bch-empty-search', testID: 'IDIcon' }}
                title={title}
                content={content}
                circlesPosition="position2"
            />,
        );
        const elemLottie = getByTestId('IDIcon');
        expect(elemLottie).toBeDefined();
    });

    test('Debería renderizar con lottie', () => {
        const { toJSON } = render(
            <EmptyState
                lottie={Assets.lottieAnimations.info}
                title={title}
                content={content}
                circlesPosition="position2"
            />,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería renderizar sin backgroundImages', () => {
        const { toJSON } = render(
            <EmptyState
                lottie={Assets.lottieAnimations.info}
                title={title}
                renderContent={() => <View />}
                backgroundImages={false}
            />,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería renderizar renderImage', () => {
        const { getByTestId } = render(
            <EmptyState
                lottie={Assets.lottieAnimations.info}
                title={title}
                content={content}
                renderImage={renderComponent}
            />,
        );
        expect(getByTestId(testIDCustomComponent)).toBeDefined();
    });

    test('Debería renderizar renderBackgroundImages', () => {
        const { getByTestId } = render(
            <EmptyState
                lottie={Assets.lottieAnimations.info}
                title={title}
                content={content}
                renderBackgroundImages={renderComponent}
            />,
        );
        expect(getByTestId(testIDCustomComponent)).toBeDefined();
    });

    test('Debería renderizar renderFooter', () => {
        const { getByTestId } = render(
            <EmptyState
                lottie={Assets.lottieAnimations.info}
                title={title}
                content={content}
                renderFooter={renderComponent}
                small
            />,
        );
        expect(getByTestId(testIDCustomComponent)).toBeDefined();
    });

    test('Debería renderizar renderContent', () => {
        const { getByTestId } = render(
            <EmptyState
                lottie={Assets.lottieAnimations.info}
                title={title}
                renderContent={renderComponent}
            />,
        );
        expect(getByTestId(testIDCustomComponent)).toBeDefined();
    });

    test('Debería renderizar renderTitle', () => {
        const { getByTestId } = render(
            <EmptyState
                lottie={Assets.lottieAnimations.info}
                renderTitle={renderComponent}
            />,
        );
        expect(getByTestId(testIDCustomComponent)).toBeDefined();
    });

    test('Debería renderizar correctamente con el background position3', () => {
        const { toJSON } = render(
            <EmptyState
                icon="icon-bch-empty-search"
                title={title}
                content={content}
                circlesPosition="position3"
            />,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería renderizar correctamente circleSmall3', () => {
        const { toJSON } = render(
            <EmptyState
                circlesSmallPosition3
                icon="icon-bch-empty-search"
                title={title}
                content={content}
            />,
        );
        expect(toJSON()).toMatchSnapshot();
    });
});
