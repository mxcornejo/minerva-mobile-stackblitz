import React from 'react';
import { render } from '@testing-library/react-native';
import { Text, Alert, HelperStyle } from '../../../src/index';
import Theme from '../../../src/util/Theme';
import ALERT_STR from '../../../src/components/alert/AlertStr';

describe('Test componente <Alert />', () => {
    const textAlert = 'Eu ex aliquip eiusmod';
    const testID = 'IDAlert';
    const renderLeft = <Text>Aute minim</Text>;
    test('Debería renderizar correctamente', () => {
        const { toJSON } = render(
            <Alert>
                <Text small>{textAlert}</Text>
            </Alert>,
        );
        expect(toJSON()).toMatchSnapshot();
    });

    test('Debería mostrar mensaje de tipo info', () => {
        const { getByTestId, getByText, getByA11yLabel } = render(
            <Theme>
                <Alert info testID={testID}>
                    <Text small>{textAlert}</Text>
                </Alert>
            </Theme>,
        );
        const elemText = getByText(textAlert);
        const elemAlert = getByTestId(testID);
        const elemIcon = getByA11yLabel(ALERT_STR.info.accessibilityLabel);
        expect(elemText).toBeDefined();
        expect(elemAlert).toBeDefined();
        expect(elemIcon).toBeDefined();
        expect(Object.assign(...elemIcon.props.style.flat())).toEqual(
            expect.objectContaining(HelperStyle.info),
        );
        expect(elemText.props.style).toEqual(
            expect.objectContaining(HelperStyle.info),
        );
    });

    test('Debería mostrar mensaje de tipo success con boleano', () => {
        const { getByTestId, getByText, getByA11yLabel } = render(
            <Theme>
                <Alert success testID={testID}>
                    <Text small>{textAlert}</Text>
                </Alert>
            </Theme>,
        );
        const elemText = getByText(textAlert);
        const elemAlert = getByTestId(testID);
        const elemIcon = getByA11yLabel(ALERT_STR.success.accessibilityLabel);
        expect(elemText).toBeDefined();
        expect(elemAlert).toBeDefined();
        expect(elemIcon).toBeDefined();
        expect(Object.assign(...elemIcon.props.style.flat())).toEqual(
            expect.objectContaining(HelperStyle.success),
        );
        expect(elemText.props.style).toEqual(
            expect.objectContaining(HelperStyle.success),
        );
    });

    test('Debería mostrar mensaje de tipo warning con boleano', () => {
        const { getByTestId, getByText, getByA11yLabel } = render(
            <Theme>
                <Alert warning testID={testID}>
                    <Text small>{textAlert}</Text>
                </Alert>
            </Theme>,
        );
        const elemText = getByText(textAlert);
        const elemAlert = getByTestId(testID);
        const elemIcon = getByA11yLabel(ALERT_STR.warning.accessibilityLabel);
        expect(elemText).toBeDefined();
        expect(elemAlert).toBeDefined();
        expect(elemIcon).toBeDefined();
        expect(Object.assign(...elemIcon.props.style.flat())).toEqual(
            expect.objectContaining(HelperStyle.warning),
        );
        expect(elemText.props.style).toEqual(
            expect.objectContaining(HelperStyle.warning),
        );
    });

    test('Debería mostrar mensaje de tipo danger con boleano', () => {
        const { getByTestId, getByText, getByA11yLabel } = render(
            <Theme>
                <Alert danger testID={testID}>
                    <Text small>{textAlert}</Text>
                </Alert>
            </Theme>,
        );
        const elemText = getByText(textAlert);
        const elemAlert = getByTestId(testID);
        const elemIcon = getByA11yLabel(ALERT_STR.danger.accessibilityLabel);
        expect(elemText).toBeDefined();
        expect(elemAlert).toBeDefined();
        expect(elemIcon).toBeDefined();
        expect(Object.assign(...elemIcon.props.style.flat())).toEqual(
            expect.objectContaining(HelperStyle.danger),
        );
        expect(elemText.props.style).toEqual(
            expect.objectContaining(HelperStyle.danger),
        );
    });

    test('Debería mostrar mensaje de tipo success con string type', () => {
        const { getByTestId, getByText, getByA11yLabel } = render(
            <Theme>
                <Alert type="success" testID={testID}>
                    <Text small>{textAlert}</Text>
                </Alert>
            </Theme>,
        );
        const elemText = getByText(textAlert);
        const elemAlert = getByTestId(testID);
        const elemIcon = getByA11yLabel(ALERT_STR.success.accessibilityLabel);
        expect(elemText).toBeDefined();
        expect(elemAlert).toBeDefined();
        expect(elemIcon).toBeDefined();
        expect(Object.assign(...elemIcon.props.style.flat())).toEqual(
            expect.objectContaining(HelperStyle.success),
        );
        expect(elemText.props.style).toEqual(
            expect.objectContaining(HelperStyle.success),
        );
    });

    test('Debería mostrar mensaje con botones', () => {
        const buttonsHorizontal = [{ title: 'button' }];
        const { getByText } = render(
            <Alert buttonsGroup={buttonsHorizontal}>
                <Text small>{textAlert}</Text>
            </Alert>,
        );
        const elemButton = getByText('button');
        expect(elemButton).toBeDefined();
    });

    test('Debería mostrar mensaje con animacion', () => {
        const { getByTestId } = render(
            <Alert
                type="success"
                animation="fadeInLeft"
                animatableTestID={testID}
            >
                <Text small>{textAlert}</Text>
            </Alert>,
        );
        const elemAlertAnimatable = getByTestId(testID);
        expect(elemAlertAnimatable.props.style.transform).toBeDefined();
    });

    test('Debería mostrar mensaje con componente custom ', () => {
        const { getByText } = render(
            <Alert renderLeft={renderLeft}>
                <Text small>{textAlert}</Text>
            </Alert>,
        );
        const elemLeft = getByText('Aute minim');
        expect(elemLeft).toBeDefined();
    });

    test('Debería mostrar mensaje con icono personalizado', () => {
        const { getByTestId } = render(
            <Alert neutral icon={{ name: 'icon-bch-phone', testID: 'IDIcon' }}>
                <Text small>{textAlert}</Text>
            </Alert>,
        );
        const elemIcon = getByTestId('IDIcon');
        expect(elemIcon).toBeDefined();
    });
});
