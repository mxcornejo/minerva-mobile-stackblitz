import React from 'react';
import { render } from '@testing-library/react-native';
import { View, Text, HelperStyle } from '../../src/index';
import Validate from '../../src/util/validate';

describe('Test util Validate', () => {
    const text = 'Aliquip magna';
    const renderText = () => <Text>{text}</Text>;
    const ViewTestID = 'ViewTestID';

    test('Debería Validate.render renderizar null', () => {
        const { getByTestId } = render(
            <View testID={ViewTestID}>
                {Validate.render(renderText, false)}
            </View>,
        );
        const elemView = getByTestId('ViewTestID');
        expect(elemView.props.children).toBe(null);
    });

    test('Debería Validate.render renderizar el componente con funcion', () => {
        const { getByTestId } = render(
            <View testID={ViewTestID}>{Validate.render(renderText)}</View>,
        );
        const elemText = getByTestId('ViewTestID');
        expect(elemText).toBeDefined();
    });

    test('Debería Validate.render renderizar el componente con funcion autoinvocada', () => {
        const { getByTestId } = render(
            <View testID={ViewTestID}>{Validate.render(renderText())}</View>,
        );
        const elemText = getByTestId('ViewTestID');
        expect(elemText).toBeDefined();
    });

    test('Debería Validate.truthyArray retornar un arreglo limpio', () => {
        const arr = [null, 1, 2];
        expect(Validate.truthyArray(arr).includes(null)).toBeFalsy();
    });

    test('Debería Validate.findStyle retornar el último estilo (propiedad) en un arreglo de estilos.', () => {
        const style = [{ fontSize: 10, color: 'red' }, { fontSize: 12 }];
        const lastProperty = Validate.findStyle(style, 'fontSize');
        expect(style[1]).toEqual(expect.objectContaining(lastProperty));
    });

    test('Debería Validate.findStyle retornar falso al no encontrar el último estilo (propiedad) en un arreglo de estilos.', () => {
        const style = [{ fontSize: 10, color: 'red' }, { fontSize: 12 }];
        const lastProperty = Validate.findStyle(style, 'width');
        expect(lastProperty).toBeFalsy();
    });

    test('Debería Validate.safeLabel retornar siempre un string', () => {
        const textoNumerico = 100;
        const textoString = 'hola';
        const textoInvalido = null;
        expect(
            typeof Validate.safeLabel(textoNumerico) === 'string',
        ).toBeTruthy();
        expect(
            typeof Validate.safeLabel(undefined, textoString) === 'string',
        ).toBeTruthy();
        expect(Validate.safeLabel(textoInvalido, textoString)).toBe(
            textoString,
        );
    });

    test('Debería Validate.func llamar a la función', () => {
        const mockFunc = jest.fn();
        Validate.func(mockFunc);
        expect(mockFunc).toHaveBeenCalledTimes(1);
    });

    test('Debería Validate.func no llamar a la función', () => {
        const mockFunc = jest.fn();
        Validate.func(mockFunc, false);
        expect(mockFunc).toHaveBeenCalledTimes(0);
    });

    test('Debería Validate.style aplicar estilo color primary al text', () => {
        const { getByText } = render(
            <Text
                style={Validate.style(
                    true,
                    HelperStyle.primary,
                    HelperStyle.success,
                )}
            >
                Ullamco amet
            </Text>,
        );
        const elemText = getByText('Ullamco amet');
        const colorStyle = Validate.findStyle(elemText.props.style, 'color');
        expect(colorStyle).toEqual(
            expect.objectContaining(HelperStyle.primary),
        );
    });

    test('Debería Validate.style aplicar estilo color success al text', () => {
        const { getByText } = render(
            <Text
                style={Validate.style(
                    false,
                    HelperStyle.primary,
                    HelperStyle.success,
                )}
            >
                Ullamco amet
            </Text>,
        );
        const elemText = getByText('Ullamco amet');
        const colorStyle = Validate.findStyle(elemText.props.style, 'color');
        expect(colorStyle).toEqual(
            expect.objectContaining(HelperStyle.success),
        );
    });

    test('Debería Validate.style no aplicar estilo color primary al text', () => {
        const { getByText } = render(
            <Text style={Validate.style(false, HelperStyle.primary)}>
                Ullamco amet
            </Text>,
        );
        const elemText = getByText('Ullamco amet');
        const colorStyle = Validate.findStyle(elemText.props.style, 'color');
        expect(colorStyle).not.toEqual(
            expect.objectContaining(HelperStyle.primary),
        );
    });

    test('Debería Validate.isElement retornar verdadero al pasarle un Text Component', () => {
        expect(Validate.isElement(renderText())).toBeTruthy();
    });

    test('Debería Validate.keyExtractor retornar un indice por cada elemento del arreglo', () => {
        const data = [
            { index: 0, name: 'Maria' },
            { index: 1, name: 'Juan' },
        ];
        const keyPrefix = 'usuario';
        const { getByText } = render(
            data.map((item, index) => (
                <Text
                    key={Validate.keyExtractor(item, index)}
                    testID={Validate.keyExtractor(item, index, keyPrefix)}
                >
                    {item.name}
                </Text>
            )),
        );
        const user = getByText(data[0].name);
        expect(user).toBeDefined();
        expect(user.props.testID).toBe(`${keyPrefix}-0`);
    });
});
