import React, { memo } from 'react';
import PropTypes from 'prop-types';
import { TouchableOpacity } from 'react-native';
import {
    HelperStyle,
    Text,
    Collapsible,
    View,
    Icon,
    MapList,
    Validate,
} from '../../../index';
import CARDMENU_STR from '../CardMenuStr';
import { subItemBodyTypes } from '../types';

const SubItemBody = ({
    collapsed,
    options,
    renderTitle,
    renderSubtitle,
    renderOptions,
}) => {
    const keyExtractor = (item, index, prefix = 'item') => `${prefix}-${index}`;
    const renderSubItem = ({ item, index }) => {
        const {
            title,
            onPress,
            titleAccessibilityLabel,
            titleAccessibilityHint,
            titleTestID,
        } = item;
        const isLastItem = index + 1 === options.length;
        return (
            <TouchableOpacity
                accessibilityRole="menuitem"
                onPress={onPress}
                style={[
                    HelperStyle.as_fs,
                    HelperStyle.mb_2,
                    isLastItem && HelperStyle.mb_0,
                ]}
            >
                <Text
                    style={HelperStyle.mb_0}
                    accessibilityLabel={Validate.safeLabel(
                        titleAccessibilityLabel,
                        title,
                    )}
                    accessibilityHint={Validate.safeLabel(
                        titleAccessibilityHint,
                    )}
                    testID={Validate.safeLabel(titleTestID, title)}
                    small
                    bold
                >
                    {title}
                </Text>
            </TouchableOpacity>
        );
    };

    const renderCollapsibleContent = () => {
        if (renderOptions) return renderOptions();
        return (
            <MapList
                data={options}
                renderItem={renderSubItem}
                style={Validate.style(
                    renderSubtitle,
                    HelperStyle.mt_4,
                    HelperStyle.mt_2,
                )}
                keyExtractor={keyExtractor}
            />
        );
    };

    const getConfigIconLabels = () => {
        let config = {
            name: 'icon-bch-chevron-up',
            accessibilityHint:
                CARDMENU_STR.iconos.cerrarSubMenu.accessibilityHint,
            accessibilityLabel:
                CARDMENU_STR.iconos.cerrarSubMenu.accessibilityLabel,
            testID: CARDMENU_STR.iconos.cerrarSubMenu.testID,
        };
        if (collapsed) {
            config = {
                name: 'icon-bch-chevron-down',
                accessibilityHint:
                    CARDMENU_STR.iconos.mostrarSubMenu.accessibilityHint,
                accessibilityLabel:
                    CARDMENU_STR.iconos.mostrarSubMenu.accessibilityLabel,
                testID: CARDMENU_STR.iconos.mostrarSubMenu.testID,
            };
        }
        return config;
    };

    const CONFIG_ICON_LABELS = getConfigIconLabels();
    return (
        <View style={HelperStyle.w_100}>
            <View style={HelperStyle.flx_i}>
                <View style={[HelperStyle.flx_i, HelperStyle.flx_row]}>
                    <View
                        style={[
                            HelperStyle.flx_i,
                            Validate.style(!renderSubtitle(), HelperStyle.pv_2),
                        ]}
                    >
                        {renderTitle()}
                        {renderSubtitle()}
                    </View>
                    <View
                        style={Validate.style(
                            !renderSubtitle(),
                            HelperStyle.jc_c,
                        )}
                    >
                        <Icon
                            style={[
                                HelperStyle.fs_1,
                                HelperStyle.gray,
                                HelperStyle.ml_4,
                            ]}
                            name={CONFIG_ICON_LABELS.name}
                            accessible
                            accessibilityLabel={
                                CONFIG_ICON_LABELS.accessibilityLabel
                            }
                            testID={CONFIG_ICON_LABELS.testID}
                            accessibilityHint={
                                CONFIG_ICON_LABELS.accessibilityHint
                            }
                        />
                    </View>
                </View>
            </View>
            <Collapsible collapsed={collapsed} accessible={false}>
                {renderCollapsibleContent()}
            </Collapsible>
        </View>
    );
};

SubItemBody.propTypes = {
    renderTitle: PropTypes.oneOfType([PropTypes.node, PropTypes.func])
        .isRequired,
    renderSubtitle: PropTypes.oneOfType([PropTypes.node, PropTypes.func])
        .isRequired,
    collapsed: subItemBodyTypes.collapsed.isRequired,
    options: subItemBodyTypes.options.isRequired,
    renderOptions: subItemBodyTypes.renderOptions.isRequired,
};

export default memo(SubItemBody);
