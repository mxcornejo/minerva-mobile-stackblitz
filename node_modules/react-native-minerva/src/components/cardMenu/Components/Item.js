import React, { memo } from 'react';
import { isEmpty, isUndefined } from 'lodash';
import PropTypes from 'prop-types';
import { HelperStyle, Card, CardItem, Left, Body } from '../../../index';
import ItemBody from './ItemBody';
import ItemLeft from './ItemLeft';
import { itemTypes } from '../types';

const Item = ({ item, index, dataMenu, setDataMenu }) => {
    const {
        buttonsGroup,
        cardAccessibilityLabel,
        cardItemAccessibilityLabel,
        cardItemTestID,
        cardtestID,
        collapsed,
        iconLabel,
        iconName,
        iconStyle,
        iconAccessibilityHint,
        iconTestID,
        imageSource,
        onPress,
        options,
        renderOptions,
        subtitle,
        subtitleAccessibilityLabel,
        subtitleAccessibilityHint,
        subtitleTestID,
        title,
        titleAccessibilityLabel,
        titleAccessibilityHint,
        titleTestID,
    } = item;
    const toggleCollapse = () => {
        const optionsMenuAux = [...dataMenu];
        optionsMenuAux[index].collapsed = !collapsed;
        setDataMenu(optionsMenuAux);
    };
    const hasSubItem = !isUndefined(options) || !isUndefined(renderOptions);
    const handlerOnPress = hasSubItem ? toggleCollapse : onPress;
    const getAccessibleProps = (accessibilityLabel = '', testID = '') => {
        let props = { accessible: false };
        if (!isEmpty(accessibilityLabel) || !isEmpty(testID)) {
            props = { accessible: true, accessibilityLabel, testID };
        }
        return props;
    };
    const isCardAccessible = getAccessibleProps(
        cardAccessibilityLabel,
        cardtestID,
    );
    const isCardItemAccessible = getAccessibleProps(
        cardItemAccessibilityLabel,
        cardItemTestID,
    );
    const handlerRenderItemOptions = renderOptions
        ? () => renderOptions({ item, index })
        : false;
    return (
        <Card {...isCardAccessible}>
            <CardItem
                avatar
                button
                onPress={handlerOnPress}
                activeOpacity={0.8}
                style={HelperStyle.pa_4}
                {...isCardItemAccessible}
            >
                <Left style={HelperStyle.as_fs}>
                    <ItemLeft
                        iconName={iconName}
                        iconLabel={iconLabel}
                        iconStyle={iconStyle}
                        imageSource={imageSource}
                        iconAccessibilityHint={iconAccessibilityHint}
                        iconTestID={iconTestID}
                    />
                </Left>
                <Body style={HelperStyle.jc_c}>
                    <ItemBody
                        buttonsGroup={buttonsGroup}
                        collapsed={collapsed}
                        hasSubItem={hasSubItem}
                        options={options}
                        renderOptions={handlerRenderItemOptions}
                        subtitle={subtitle}
                        subtitleAccessibilityLabel={subtitleAccessibilityLabel}
                        subtitleAccessibilityHint={subtitleAccessibilityHint}
                        subtitleTestID={subtitleTestID}
                        title={title}
                        titleAccessibilityLabel={titleAccessibilityLabel}
                        titleAccessibilityHint={titleAccessibilityHint}
                        titleTestID={titleTestID}
                    />
                </Body>
            </CardItem>
        </Card>
    );
};

Item.propTypes = {
    item: PropTypes.shape(itemTypes).isRequired,
    index: PropTypes.number.isRequired,
    dataMenu: PropTypes.arrayOf(PropTypes.shape(itemTypes)).isRequired,
    setDataMenu: PropTypes.func.isRequired,
};

export default memo(Item);
