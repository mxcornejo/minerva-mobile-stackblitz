import React, { memo } from 'react';
import { Text, HelperStyle, ButtonsGroup, Validate } from '../../../index';
import SubItemBody from './SubItemBody';
import { itemBodyTypes, subItemBodyTypes } from '../types';

const ItemBody = ({
    buttonsGroup,
    collapsed,
    hasSubItem,
    options,
    renderOptions,
    subtitle,
    subtitleAccessibilityLabel,
    subtitleAccessibilityHint,
    subtitleTestID,
    titleAccessibilityLabel,
    titleAccessibilityHint,
    titleTestID,
    title,
}) => {
    const renderSubtitle = () =>
        subtitle && (
            <Text
                small
                style={[
                    HelperStyle.gray,
                    HelperStyle.ta_l,
                    HelperStyle.mb_0,
                    HelperStyle.pt_1,
                ]}
                accessibilityLabel={Validate.safeLabel(
                    subtitleAccessibilityLabel,
                    subtitle,
                )}
                accessibilityHint={subtitleAccessibilityHint}
                testID={Validate.safeLabel(subtitleTestID, subtitle)}
            >
                {subtitle}
            </Text>
        );

    const renderTitle = () => (
        <Text
            style={[HelperStyle.gray_dark, HelperStyle.mb_0]}
            accessibilityLabel={Validate.safeLabel(
                titleAccessibilityLabel,
                title,
            )}
            accessibilityHint={titleAccessibilityHint}
            testID={Validate.safeLabel(titleTestID, title)}
            bold
        >
            {title}
        </Text>
    );

    const renderButtonGroup = () =>
        buttonsGroup && (
            <ButtonsGroup
                items={buttonsGroup?.items}
                horizontal={buttonsGroup?.horizontal}
                small={buttonsGroup?.small}
                style={buttonsGroup?.style}
                styleText={buttonsGroup?.styleText}
                styleItems={buttonsGroup?.styleItems}
                disabled={buttonsGroup?.disabled}
                loading={buttonsGroup?.loading}
                inline={buttonsGroup?.inline}
            />
        );

    const renderTextBody = () => (
        <>
            {renderTitle()}
            {renderSubtitle()}
            {renderButtonGroup()}
        </>
    );
    if (hasSubItem) {
        return (
            <SubItemBody
                options={options}
                collapsed={collapsed}
                renderTitle={renderTitle}
                renderSubtitle={renderSubtitle}
                renderOptions={renderOptions}
            />
        );
    }
    return renderTextBody();
};

ItemBody.propTypes = {
    buttonsGroup: itemBodyTypes.buttonsGroup,
    subtitle: itemBodyTypes.subtitle,
    subtitleAccessibilityLabel: itemBodyTypes.subtitleAccessibilityLabel,
    subtitleAccessibilityHint: itemBodyTypes.subtitleAccessibilityHint,
    subtitleTestID: itemBodyTypes.subtitleTestID,
    titleAccessibilityLabel: itemBodyTypes.titleAccessibilityLabel,
    titleAccessibilityHint: itemBodyTypes.titleAccessibilityHint,
    titleTestID: itemBodyTypes.titleTestID,
    title: itemBodyTypes.title.isRequired,
    collapsed: subItemBodyTypes.collapsed,
    options: subItemBodyTypes.options,
    renderOptions: subItemBodyTypes.renderOptions,
    hasSubItem: itemBodyTypes.hasSubItem.isRequired,
};
ItemBody.defaultProps = {
    subtitleAccessibilityLabel: '',
    subtitleAccessibilityHint: '',
    subtitleTestID: '',
    titleAccessibilityLabel: '',
    titleAccessibilityHint: '',
    titleTestID: '',
    renderOptions: false,
    collapsed: false,
    subtitle: null,
    options: [],
    buttonsGroup: null,
};

export default memo(ItemBody);
