import React, { memo } from 'react';
import {
    Placeholder,
    PlaceholderMedia,
    PlaceholderLine,
    Fade,
} from 'rn-placeholder';
import PropTypes from 'prop-types';
import { Platform } from 'react-native';
import { TYPES, DEFAULT_TYPES } from '../../constants/propTypes';
import {
    Spacing,
    HelperStyle,
    View,
    Scale,
    MapList,
    Validate,
} from '../../index';
import buildStyle from './style';

/**
 * Componente para mostrar estados de carga.
 *
 * @component
 */
const Skeleton = (props) => {
    const {
        numberOfItems,
        numberOfLines,
        type,
        style,
        small,
        col,
        transparent,
        contenContainerStyle,
        testID,
        accessibilityLabel,
        accessibilityHint,
        placeholderStyle,
    } = props;
    const Style = buildStyle(Platform.OS === 'ios');
    const grayTransparent = 'rgba(153, 167, 193, 0.23)';
    const colorSkeleton = transparent
        ? grayTransparent
        : HelperStyle.gray_background.color;
    const mediaSize = small ? Spacing.spacer_6 : Scale(48);
    const lineSizeStyle = small ? Style.lineSmallStyle : Style.lineStyle;
    const lineHeightStyle = small
        ? Style.heightSmallStyle
        : Style.heightNormalStyle;

    const renderLeft = (leftProps) => (
        <PlaceholderMedia
            isRound
            size={mediaSize}
            color={colorSkeleton}
            style={[Style.opacityStyle, leftProps.style]}
        />
    );

    const renderPlaceholderLine = ({ index }) => {
        const isEven = index % 2 === 0;
        const isLastItem = index + 1 === numberOfLines;
        return (
            <PlaceholderLine
                color={colorSkeleton}
                style={[
                    lineSizeStyle,
                    Style.opacityStyle,
                    Validate.style(!isLastItem, HelperStyle.mb_2),
                    style,
                ]}
                width={isEven ? Scale(100) : Scale(50)}
            />
        );
    };

    const renderImageContent = () => (
        <Placeholder
            Animation={Fade}
            color={colorSkeleton}
            Left={renderLeft}
            style={[HelperStyle.flx_i, HelperStyle.flx_row, HelperStyle.jc_c]}
            testID={testID}
            accessibilityLabel={accessibilityLabel}
            accessibilityHint={accessibilityHint}
            {...props}
        >
            <MapList
                data={Array.from({ length: numberOfLines }, (v, i) => i)}
                renderItem={renderPlaceholderLine}
            />
        </Placeholder>
    );

    const renderImageLine = () => {
        const getMarginTop = () => {
            let marginTopStyle = {
                marginTop: mediaSize / 2 - Style.lineStyle.height / 2,
            };
            if (small) {
                marginTopStyle = {
                    marginTop: mediaSize / 2 - Style.lineSmallStyle.height / 2,
                };
            }
            return marginTopStyle;
        };

        return (
            <Placeholder
                Animation={Fade}
                color={colorSkeleton}
                Left={renderLeft}
                style={[
                    HelperStyle.flx_i,
                    HelperStyle.flx_row,
                    HelperStyle.jc_c,
                ]}
                testID={testID}
                accessibilityLabel={accessibilityLabel}
                accessibilityHint={accessibilityHint}
                {...props}
            >
                <PlaceholderLine
                    color={colorSkeleton}
                    style={[
                        lineSizeStyle,
                        Style.opacityStyle,
                        HelperStyle.mb_2,
                        getMarginTop(),
                        style,
                    ]}
                />
            </Placeholder>
        );
    };

    const renderParagraph = () => (
        <Placeholder
            Animation={Fade}
            style={HelperStyle.jc_c}
            testID={testID}
            accessibilityLabel={accessibilityLabel}
            accessibilityHint={accessibilityHint}
        >
            <MapList
                data={Array.from({ length: numberOfLines }, (v, i) => i)}
                renderItem={renderPlaceholderLine}
            />
        </Placeholder>
    );

    const renderBox = () => (
        <Placeholder
            Animation={Fade}
            style={HelperStyle.jc_c}
            testID={testID}
            accessibilityLabel={accessibilityLabel}
            accessibilityHint={accessibilityHint}
        >
            <PlaceholderMedia
                size={mediaSize}
                color={colorSkeleton}
                style={[Style.opacityStyle, style]}
                {...props}
            />
        </Placeholder>
    );

    const renderMedia = () => (
        <Placeholder
            Animation={Fade}
            style={[HelperStyle.jc_c, placeholderStyle]}
            testID={testID}
            accessibilityLabel={accessibilityLabel}
            accessibilityHint={accessibilityHint}
        >
            <PlaceholderMedia
                isRound
                size={mediaSize}
                color={colorSkeleton}
                style={[Style.opacityStyle, Style.mediaStyle, style]}
                {...props}
            />
        </Placeholder>
    );

    const renderInput = () => (
        <Placeholder
            Animation={Fade}
            style={[
                HelperStyle.jc_c,
                HelperStyle.mt_2,
                HelperStyle.mb_4,
                placeholderStyle,
            ]}
            testID={testID}
            accessibilityLabel={accessibilityLabel}
            accessibilityHint={accessibilityHint}
        >
            <PlaceholderLine
                color={colorSkeleton}
                style={[Style.inputStyle, Style.opacityStyle, style]}
                height={Scale(56)}
                {...props}
            />
        </Placeholder>
    );

    const renderButton = () => (
        <Placeholder
            Animation={Fade}
            testID={testID}
            accessibilityLabel={accessibilityLabel}
            accessibilityHint={accessibilityHint}
            style={placeholderStyle}
        >
            <PlaceholderLine
                color={colorSkeleton}
                height={Scale(56)}
                {...props}
                style={[
                    lineHeightStyle,
                    Style.buttonStyle,
                    Style.opacityStyle,
                    HelperStyle.mb_4,
                    style,
                ]}
            />
        </Placeholder>
    );

    const renderAlert = () => (
        <Placeholder
            Animation={Fade}
            testID={testID}
            accessibilityLabel={accessibilityLabel}
            accessibilityHint={accessibilityHint}
            style={placeholderStyle}
        >
            <PlaceholderLine
                color={colorSkeleton}
                height={Scale(82)}
                {...props}
                style={[
                    HelperStyle.bblr_0,
                    HelperStyle.btlr_0,
                    HelperStyle.bbrr_2,
                    HelperStyle.btrr_2,
                    Style.opacityStyle,
                    HelperStyle.mb_4,
                    style,
                ]}
            />
        </Placeholder>
    );

    const renderLine = () => (
        <Placeholder
            Animation={Fade}
            style={[
                HelperStyle.flx_i,
                HelperStyle.jc_c,
                HelperStyle.pt_1,
                HelperStyle.pb_1,
                placeholderStyle,
            ]}
            testID={testID}
            accessibilityLabel={accessibilityLabel}
            accessibilityHint={accessibilityHint}
        >
            <PlaceholderLine
                color={colorSkeleton}
                style={[lineSizeStyle, Style.opacityStyle, style]}
                {...props}
            />
        </Placeholder>
    );

    const renderRadio = () => (
        <Placeholder
            Animation={Fade}
            style={HelperStyle.jc_c}
            testID={testID}
            accessibilityLabel={accessibilityLabel}
            accessibilityHint={accessibilityHint}
        >
            <PlaceholderMedia
                isRound
                size={Scale(24)}
                color={colorSkeleton}
                style={[Style.opacityStyle, Style.mediaStyle, style]}
                {...props}
            />
        </Placeholder>
    );

    const renderSwitch = () => (
        <View style={Style.switchContainer}>
            <Placeholder
                Animation={Fade}
                testID={testID}
                accessibilityLabel={accessibilityLabel}
                accessibilityHint={accessibilityHint}
            >
                <PlaceholderLine
                    color={colorSkeleton}
                    height={Style.switch.height}
                    {...props}
                    style={[
                        Style.inputStyle,
                        Style.opacityStyle,
                        HelperStyle.br_3,
                        style,
                    ]}
                />
            </Placeholder>
        </View>
    );

    const renderPlaceholderItems = () => {
        const PlaceholderType = type.toLowerCase();
        switch (PlaceholderType) {
            case 'imagecontent':
                return renderImageContent();
            case 'imageline':
                return renderImageLine();
            case 'paragraph':
                return renderParagraph();
            case 'box':
                return renderBox();
            case 'media':
                return renderMedia();
            case 'input':
                return renderInput();
            case 'button':
                return renderButton();
            case 'alert':
                return renderAlert();
            case 'radio':
                return renderRadio();
            case 'switch':
                return renderSwitch();
            default:
                return renderLine();
        }
    };

    const renderItem = () => {
        if (col) {
            return (
                <View
                    style={[
                        HelperStyle.flx_i,
                        HelperStyle.jc_sb,
                        HelperStyle.flx_row,
                    ]}
                >
                    <View style={Style.SkeletonCol}>
                        {renderPlaceholderItems()}
                    </View>
                    <View style={Style.SkeletonCol}>
                        {renderPlaceholderItems()}
                    </View>
                </View>
            );
        }
        return (
            <View style={[HelperStyle.mb_4, contenContainerStyle]}>
                {renderPlaceholderItems()}
            </View>
        );
    };

    const renderPlaceholder = () => {
        if (numberOfItems === 1) {
            return renderPlaceholderItems();
        }
        return (
            <MapList
                data={Array.from({ length: numberOfItems }, (v, i) => i)}
                renderItem={renderItem}
            />
        );
    };

    return renderPlaceholder();
};

Skeleton.propTypes = {
    /**
     * Cantidad de skeletons.
     */
    numberOfItems: PropTypes.number,
    /**
     * Tipo de <Skeleton />.
     */
    type: PropTypes.string,
    /**
     * Estilos.
     */
    style: TYPES.style,
    /**
     * Estilos contenedor.
     */
    placeholderStyle: TYPES.style,
    /**
     * Boleano estilos tamaño small.
     */
    small: PropTypes.bool,
    /**
     * Boleano que divide los skeleton en dos columnas.
     */
    col: PropTypes.bool,
    /**
     * Boleano para estilos skeleton transparente.
     */
    transparent: PropTypes.bool,
    /**
     * Estilos para el contenedor.
     */
    contenContainerStyle: TYPES.style,
    /**
     * Identificador para pruebas.
     */
    testID: PropTypes.string,
    /**
     * Identificador para accesibilidad.
     */
    accessibilityLabel: PropTypes.string,
    /**
     * Sugerencia de accesibilidad que ayuda a los usuarios a comprender qué sucederá cuando realicen una acción.
     */
    accessibilityHint: PropTypes.string,
    /**
     * Cantidad de lineas para los tipos [imagecontent, paragraph].
     */
    numberOfLines: PropTypes.number,
};
Skeleton.defaultProps = {
    numberOfItems: 1,
    type: 'Line',
    style: DEFAULT_TYPES.style,
    placeholderStyle: DEFAULT_TYPES.style,
    small: false,
    col: false,
    transparent: false,
    contenContainerStyle: DEFAULT_TYPES.style,
    testID: '',
    accessibilityLabel: '',
    accessibilityHint: '',
    numberOfLines: 2,
};

export default memo(Skeleton);
