import React, { memo } from 'react';
import PropTypes from 'prop-types';
import { isArray, size } from 'lodash';
import { View, HelperStyle, Radio } from '../../index';

/**
 * Componente para agrupar <Radio />.
 *
 * @component
 */
const RadioGroup = ({
    items,
    horizontal,
    style,
    styleItems,
    accessibilityRole,
}) => {
    const renderRadio = (item, index = 0) => {
        const lastItem = isArray(items) ? items.length - 1 : 0;
        const itemsSize = size(items);
        const margin = horizontal ? HelperStyle.mr_4 : null;
        const conditionalMargin = horizontal
            ? lastItem !== index && index === 0
            : lastItem !== index;
        if (itemsSize) {
            return (
                <Radio
                    key={`${index}-radio`}
                    inline={horizontal}
                    {...item}
                    style={[styleItems, item?.style]}
                    styleContainer={[
                        conditionalMargin && margin,
                        item?.styleContainer,
                    ]}
                />
            );
        }
        return null;
    };

    const mapRenderRadio = (item, i) => renderRadio(item, i);

    const renderItems = () =>
        isArray(items) ? items.map(mapRenderRadio) : renderRadio(items);

    return (
        <View
            style={[horizontal && HelperStyle.flx_row, style]}
            accessibilityRole={accessibilityRole}
        >
            {renderItems()}
        </View>
    );
};

RadioGroup.propTypes = {
    /**
     * Objecto para configurar los <Radio />.
     */
    items: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
    /**
     * Boleano para definir alineación horizontal de los <CheckBox />.
     */
    horizontal: PropTypes.bool,
    /**
     * Estilos para el contenedor de los <Radio />.
     */
    style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
    /**
     * Estilos para los <CheckBox />.
     */
    styleItems: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
    /**
     * Comunica el propósito de un componente al usuario.
     */
    accessibilityRole: PropTypes.string,
};
RadioGroup.defaultProps = {
    items: [],
    horizontal: false,
    style: {},
    styleItems: {},
    accessibilityRole: 'radiogroup',
};

export default memo(RadioGroup);
