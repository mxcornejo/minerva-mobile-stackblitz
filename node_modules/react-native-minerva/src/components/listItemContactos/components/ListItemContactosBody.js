import React from 'react';
import PropTypes from 'prop-types';
import { isObject, isArray, isString } from 'lodash';
import {
    HelperStyle,
    Body,
    Text,
    Highlighter,
    Paragraph,
    Validate,
} from '../../../index';
import {
    listItemContactosPropTypes,
    listItemContactosDefaultProps,
} from '../type';

const ListItemContactosBody = ({
    disabled,
    highlighter,
    isTruncatedNombre,
    styleBody,
    styleNombre,
    nombre,
    renderDetalle,
    detalle,
    numberOfLinesNombre,
}) => {
    const renderNombre = () => {
        const propsIsTruncated = isTruncatedNombre
            ? { ellipsizeMode: 'tail', numberOfLines: numberOfLinesNombre }
            : null;
        const propsTextNombre = {
            style: [
                disabled ? HelperStyle.gray_lighter : HelperStyle.gray_dark,
                styleNombre,
            ],
            accessibilityLabel: nombre,
            testID: nombre,
            ...propsIsTruncated,
        };
        if (highlighter) {
            return (
                <Highlighter
                    searchWords={[highlighter.searchWords]}
                    textToHighlight={nombre}
                    {...propsTextNombre}
                />
            );
        }
        return (
            <Text small {...propsTextNombre}>
                {nombre}
            </Text>
        );
    };

    const handlerRenderDetalle = () => {
        if (renderDetalle) {
            return Validate.render(renderDetalle);
        }
        if (detalle) {
            if (isArray(detalle) || isString(detalle)) {
                return (
                    <Paragraph
                        smaller
                        style={HelperStyle.mb_0}
                        items={detalle}
                        disabled={disabled}
                    />
                );
            }
            if (isObject(detalle)) {
                return (
                    <Paragraph
                        smaller
                        {...detalle}
                        style={[HelperStyle.mb_0, detalle.style]}
                        disabled={disabled}
                    />
                );
            }
        }
        return null;
    };
    return (
        <Body style={styleBody}>
            {renderNombre()}
            {handlerRenderDetalle()}
        </Body>
    );
};

ListItemContactosBody.propTypes = {
    /**
     * Estilos para nombre.
     */
    styleNombre: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
    /**
     * Nombre del contacto.
     */
    nombre: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),
    /**
     * Componente que reemplaza el detalle.
     */
    renderDetalle: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
    /**
     * Arreglo de texto que se muestra en el contenido.
     */
    detalle: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.array,
        PropTypes.number,
        PropTypes.objectOf(PropTypes.any),
    ]),
    /**
     * Boleano para habilitar y deshabilitar la lista.
     */
    disabled: listItemContactosPropTypes.disabled,
    /**
     * Boleano para resaltar el campo nombre en base a una busqueda.
     */
    highlighter: listItemContactosPropTypes.highlighter,
    /**
     * Boleano para comportamiento de texto truncado para nombre.
     */
    isTruncatedNombre: listItemContactosPropTypes.isTruncatedNombre,
    /**
     * Estilos para el contenedor contenido central.
     */
    styleBody: listItemContactosPropTypes.styleBody,
    numberOfLinesNombre: PropTypes.number,
};
ListItemContactosBody.defaultProps = {
    styleNombre: {},
    nombre: '',
    detalle: '',
    renderDetalle: null,
    disabled: listItemContactosDefaultProps.disabled,
    highlighter: listItemContactosDefaultProps.highlighter,
    isTruncatedNombre: listItemContactosDefaultProps.isTruncatedNombre,
    styleBody: listItemContactosDefaultProps.styleBody,
    numberOfLinesNombre: 1,
};

export default ListItemContactosBody;
