import React, { memo } from 'react';
import PropTypes from 'prop-types';
import { HelperStyle, Avatar, Left, Icon } from '../../../index';
import {
    listItemContactosPropTypes,
    listItemContactosDefaultProps,
} from '../type';

const ListItemContactosLeft = ({
    avatarAccessibilityLabel,
    avatarAccessibilityHint,
    avatarTestID,
    disabled,
    loading,
    selected,
    resizeModeAvatarImage,
    hasBorderAvatarImage,
    alignAvatar,
    styleLeft,
    iconLeftAccessibilityLabel,
    iconLeftAccessibilityHint,
    iconLeftTestID,
    image,
    label,
    iconName,
    styleAvatar,
    sizeAvatar,
    iconLeft,
    styleIconLeft,
    source,
}) => {
    const getAvatarAlignmentStyle = () => {
        switch (alignAvatar) {
            case 'top':
                return [HelperStyle.h_100, HelperStyle.ai_fs];
            case 'end':
                return [HelperStyle.h_100, HelperStyle.ai_fe];
            default:
                return HelperStyle.ai_c;
        }
    };
    const avatarAlignStyle = getAvatarAlignmentStyle();
    if (iconLeft) {
        return (
            <Left style={styleLeft}>
                <Icon
                    name={iconName}
                    style={[HelperStyle.primary, styleIconLeft]}
                    accessibilityLabel={iconLeftAccessibilityLabel}
                    accessibilityHint={iconLeftAccessibilityHint}
                    testID={iconLeftTestID}
                />
            </Left>
        );
    }
    return (
        <Left style={[avatarAlignStyle, styleLeft]}>
            <Avatar
                source={source}
                image={image}
                label={label}
                selected={selected}
                iconName={iconName}
                loading={loading}
                style={[styleAvatar, disabled && HelperStyle.o_50]}
                accessibilityLabel={avatarAccessibilityLabel}
                accessibilityHint={avatarAccessibilityHint}
                testID={avatarTestID || avatarAccessibilityLabel}
                smaller={sizeAvatar === 'smaller'}
                small={sizeAvatar === 'small'}
                large={sizeAvatar === 'large'}
                medium={sizeAvatar === 'medium'}
                resizeModeAvatarImage={resizeModeAvatarImage}
                hasBorderAvatarImage={hasBorderAvatarImage}
            />
        </Left>
    );
};

ListItemContactosLeft.propTypes = {
    iconLeft: PropTypes.bool,
    image: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),
    label: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),
    iconName: PropTypes.string,
    styleAvatar: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
    sizeAvatar: PropTypes.oneOf(['small', 'smaller', 'large', 'medium']),
    styleIconLeft: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
    avatarAccessibilityLabel: PropTypes.string,
    avatarAccessibilityHint: PropTypes.string,
    avatarTestID: PropTypes.string,
    disabled: listItemContactosPropTypes.disabled,
    loading: listItemContactosPropTypes.loading,
    selected: listItemContactosPropTypes.selected,
    resizeModeAvatarImage: listItemContactosPropTypes.resizeModeAvatarImage,
    hasBorderAvatarImage: listItemContactosPropTypes.hasBorderAvatarImage,
    alignAvatar: listItemContactosPropTypes.alignAvatar,
    styleLeft: listItemContactosPropTypes.styleLeft,
    iconLeftAccessibilityLabel: PropTypes.string,
    iconLeftAccessibilityHint: PropTypes.string,
    iconLeftTestID: PropTypes.string,
    source: PropTypes.oneOfType([
        PropTypes.shape({
            uri: PropTypes.string,
        }),
        PropTypes.number,
        PropTypes.arrayOf(PropTypes.any),
    ]),
};
ListItemContactosLeft.defaultProps = {
    iconLeft: false,
    image: '',
    label: '',
    iconName: '',
    avatarAccessibilityLabel: '',
    avatarAccessibilityHint: '',
    avatarTestID: '',
    styleAvatar: {},
    sizeAvatar: 'medium',
    styleIconLeft: {},
    disabled: listItemContactosDefaultProps.disabled,
    loading: listItemContactosDefaultProps.loading,
    selected: listItemContactosDefaultProps.selected,
    resizeModeAvatarImage: listItemContactosDefaultProps.resizeModeAvatarImage,
    hasBorderAvatarImage: listItemContactosDefaultProps.hasBorderAvatarImage,
    alignAvatar: listItemContactosDefaultProps.alignAvatar,
    styleLeft: listItemContactosDefaultProps.styleLeft,
    iconLeftAccessibilityLabel: '',
    iconLeftAccessibilityHint: '',
    iconLeftTestID: '',
    source: null,
};

export default memo(ListItemContactosLeft);
