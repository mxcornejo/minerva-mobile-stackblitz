import PropTypes from 'prop-types';
import { DEFAULT_TYPES, TYPES } from '../../constants/propTypes';

const listItemContactosPropTypes = {
    /**
     * Boleano para mostrar listado tipo Card.
     */
    card: PropTypes.bool,
    /**
     * Arreglo de objetos para configurar los contactos.
     */
    data: PropTypes.shape({
        /**
         * Url de la imagen a mostrar dentro del <Avatar />.
         */
        image: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),
        /**
         * Url o ruta en el directorio de la imagen a mostrar dentro del Avatar.
         */
        source: PropTypes.oneOfType([
            PropTypes.shape({
                uri: PropTypes.string,
            }),
            PropTypes.number,
            PropTypes.arrayOf(PropTypes.any),
        ]),
        /**
         * Texto a mostrar dentro del <Avatar />.
         */
        label: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),
        /**
         * Nombre del contacto.
         */
        nombre: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),
        /**
         * Estilos para nombre.
         */
        styleNombre: TYPES.style,
        /**
         * Arreglo de texto que se muestra en el contenido.
         */
        detalle: PropTypes.oneOfType([
            PropTypes.string,
            PropTypes.array,
            PropTypes.number,
            PropTypes.objectOf(PropTypes.any),
        ]),
        /**
         * Componente que reemplaza el detalle.
         */
        renderDetalle: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
        /**
         * Monto que se muestra en el lado derecho de la lista.
         */
        monto: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
        /**
         * Estilos para nombre.
         */
        styleMonto: TYPES.style,
        /**
         * Identificador de accesibilidad para monto.
         */
        montoAccessibilityLabel: PropTypes.string,
        /**
         * Sugerencia de accesibilidad para monto.
         */
        montoAccessibilityHint: PropTypes.string,
        /**
         * Identificador de pruebas para monto.
         */
        montoTestID: PropTypes.string,
        /**
         * Estilos para <Avatar />.
         */
        styleAvatar: TYPES.style,
        /**
         * Nombre del icono del <Avatar /> o del <Icon /> si iconLeft es true.
         */
        iconName: PropTypes.string,
        /**
         * Boleano para reemplazar <Avatar /> por <Icon />.
         */
        iconLeft: PropTypes.bool,
        /**
         * Estilos para el <Icon />.
         */
        styleIconLeft: TYPES.style,
        /**
         * Boleano para comportamiento de texto truncado para nombre.
         */
        isTruncatedNombre: PropTypes.bool,
        /**
         * Número de lineas para comportamiento de texto truncado para nombre.
         */
        numberOfLinesNombre: PropTypes.number,
    }),
    /**
     * Boleano para habilitar y deshabilitar la lista.
     */
    disabled: PropTypes.bool,
    /**
     * Alineción del avatar posibles valores: center, top y end.
     */
    alignAvatar: PropTypes.oneOf(['center', 'top', 'end']),
    /**
     * Identificador de accesibilidad para el <Avatar />.
     */
    avatarAccessibilityLabel: PropTypes.string,
    /**
     * Sugerencia de accesibilidad para el <Avatar />.
     */
    avatarAccessibilityHint: PropTypes.string,
    /**
     * Identificador de pruebas para <Avatar />.
     */
    avatarTestID: PropTypes.string,
    /**
     * Boleano para resaltar el campo nombre en base a una busqueda.
     */
    highlighter: PropTypes.oneOfType([
        PropTypes.bool,
        PropTypes.shape({
            searchWords: PropTypes.arrayOf(
                PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
            ),
        }),
    ]),
    /**
     * Boleano para agregar estado loading al <Avatar />.
     */
    loading: PropTypes.bool,
    /**
     * Función que se llama al tocar por mas de 500 milisegundos.
     */
    onLongPress: PropTypes.func,
    /**
     * Función que se llama al tocar.
     */
    onPress: PropTypes.func,
    /**
     * Reemplaza contenido del contenido de la lista por un componente.
     */
    renderBody: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
    /**
     * Reemplaza contenido del lado derecho de la lista por un componente.
     */
    renderRight: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
    /**
     * Boleano para estado seleccionado del <Avatar />.
     */
    selected: PropTypes.bool,
    /**
     * Estilos para el contenedor de la lista.
     */
    style: TYPES.style,
    /**
     * Boleano para eliminar la sombra del Card. Cuando la lista es de tipo Card.
     */
    noShadow: PropTypes.bool,
    /**
     * Boleano para agregar bordes exterior a lista.
     */
    bordered: PropTypes.bool,
    /**
     * Habilita la accesibilidad.
     */
    accessible: PropTypes.bool,
    /**
     * Identificador para accesibilidad.
     */
    accessibilityLabel: PropTypes.string,
    /**
     * Sugerencia de accesibilidad.
     */
    accessibilityHint: PropTypes.string,
    /**
     * Identificador para pruebas.
     */
    testID: PropTypes.string,
    /**
     * Determina cómo cambiar el tamaño de la imagen.
     */
    resizeModeAvatarImage: PropTypes.string,
    /**
     * Agrega borde a la Imagen del Avatar.
     */
    hasBorderAvatarImage: PropTypes.bool,
    /**
     * Boleano para comportamiento de lista agrupada. Indica que es el primer elemento del grupo.
     */
    firstItem: PropTypes.bool,
    /**
     * Boleano para comportamiento de lista agrupada. Indica que es el último elemento del grupo.
     */
    lastItem: PropTypes.bool,
    /**
     * Boleano para comportamiento de lista agrupada. Indica que es un elemento central del grupo.
     */
    middleItem: PropTypes.bool,
    /**
     * Boleano para comportamiento de texto truncado para nombre.
     */
    isTruncatedNombre: PropTypes.bool,
    /**
     * Número de lineas para comportamiento de texto truncado para nombre.
     */
    numberOfLinesNombre: PropTypes.number,
    /**
     * Estilos para el contenedor izquierdo.
     */
    styleLeft: TYPES.style,
    /**
     * Estilos para el contenedor contenido central.
     */
    styleBody: TYPES.style,
    /**
     * Estilos para el contenedor derecho.
     */
    styleRight: TYPES.style,
    /**
     * Identificador de accesibilidad para el <Icon />. Cuando iconLeft esta definido.
     */
    iconLeftAccessibilityLabel: PropTypes.string,
    /**
     * Sugerencia de accesibilidad para el <Avatar />. Cuando iconLeft esta definido.
     */
    iconLeftAccessibilityHint: PropTypes.string,
    /**
     * Identificador de pruebas para <Icon />. Cuando iconLeft esta definido.
     */
    iconLeftTestID: PropTypes.string,
    /**
     * Funcion que se invoca cuando se monta el componente o cuando cambia las dimensiones del componente.
     */
    onLayout: PropTypes.func,
};

const listItemContactosDefaultProps = {
    avatarAccessibilityLabel: '',
    avatarAccessibilityHint: '',
    avatarTestID: '',
    iconLeftAccessibilityLabel: '',
    iconLeftAccessibilityHint: '',
    iconLeftTestID: '',
    card: false,
    disabled: false,
    highlighter: false,
    loading: false,
    onLongPress: null,
    onPress: null,
    renderBody: false,
    renderRight: false,
    selected: false,
    style: DEFAULT_TYPES.style,
    noShadow: false,
    bordered: false,
    accessible: false,
    accessibilityLabel: '',
    accessibilityHint: '',
    testID: '',
    resizeModeAvatarImage: 'cover',
    hasBorderAvatarImage: false,
    firstItem: false,
    lastItem: false,
    middleItem: false,
    alignAvatar: 'center',
    isTruncatedNombre: false,
    numberOfLinesNombre: 1,
    styleLeft: DEFAULT_TYPES.style,
    styleBody: DEFAULT_TYPES.style,
    styleRight: DEFAULT_TYPES.style,
    onLayout: DEFAULT_TYPES.func,
};

export { listItemContactosPropTypes, listItemContactosDefaultProps };
