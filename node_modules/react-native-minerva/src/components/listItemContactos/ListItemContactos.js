import React from 'react';
import { ListItem, Card, CardItem, Body, Right, Validate } from '../../index';
import ListItemContactosLeft from './components/ListItemContactosLeft';
import ListItemContactosBody from './components/ListItemContactosBody';
import ListItemContactosRight from './components/ListItemContactosRight';
import {
    listItemContactosPropTypes,
    listItemContactosDefaultProps,
} from './type';

/**
 * Componente listado de contactos.
 *
 * @component
 */
const ListItemContactos = (props) => {
    const {
        accessibilityLabel,
        accessibilityHint,
        accessible,
        alignAvatar,
        avatarAccessibilityLabel,
        avatarAccessibilityHint,
        avatarTestID,
        bordered,
        card,
        data,
        disabled,
        firstItem,
        hasBorderAvatarImage,
        highlighter,
        isTruncatedNombre,
        numberOfLinesNombre,
        lastItem,
        loading,
        middleItem,
        noShadow,
        onLongPress,
        onPress,
        renderBody,
        renderRight,
        resizeModeAvatarImage,
        selected,
        style,
        styleBody,
        styleLeft,
        styleRight,
        testID,
        iconLeftAccessibilityLabel,
        iconLeftAccessibilityHint,
        iconLeftTestID,
        onLayout,
    } = props;

    const handlerRenderLeft = () => {
        const {
            image,
            label,
            iconName,
            iconLeft,
            styleAvatar,
            sizeAvatar,
            styleIconLeft,
            source,
        } = data;
        if (image || label || iconLeft || iconName || source) {
            return (
                <ListItemContactosLeft
                    avatarAccessibilityLabel={avatarAccessibilityLabel}
                    avatarAccessibilityHint={avatarAccessibilityHint}
                    avatarTestID={avatarTestID}
                    iconLeftAccessibilityLabel={iconLeftAccessibilityLabel}
                    iconLeftAccessibilityHint={iconLeftAccessibilityHint}
                    iconLeftTestID={iconLeftTestID}
                    image={image}
                    label={label}
                    styleAvatar={styleAvatar}
                    sizeAvatar={sizeAvatar}
                    iconLeft={iconLeft}
                    styleIconLeft={styleIconLeft}
                    iconName={iconName}
                    disabled={disabled}
                    loading={loading}
                    selected={selected}
                    resizeModeAvatarImage={resizeModeAvatarImage}
                    hasBorderAvatarImage={hasBorderAvatarImage}
                    alignAvatar={alignAvatar}
                    styleLeft={styleLeft}
                    source={source}
                />
            );
        }
        return null;
    };

    const handlerRenderBody = () => {
        const { styleNombre, nombre, renderDetalle, detalle } = data;
        if (renderBody) {
            return <Body>{Validate.render(renderBody)}</Body>;
        }
        return (
            <ListItemContactosBody
                styleNombre={styleNombre}
                nombre={nombre}
                renderDetalle={renderDetalle}
                detalle={detalle}
                disabled={disabled}
                highlighter={highlighter}
                isTruncatedNombre={data?.isTruncatedNombre || isTruncatedNombre}
                numberOfLinesNombre={
                    data?.numberOfLinesNombre || numberOfLinesNombre
                }
                styleBody={styleBody}
            />
        );
    };

    const handlerRenderRight = () => {
        const {
            monto,
            montoAccessibilityLabel,
            montoAccessibilityHint,
            montoTestID,
            styleMonto,
        } = data;
        if (renderRight) {
            return <Right>{renderRight()}</Right>;
        }
        if (monto) {
            return (
                <ListItemContactosRight
                    monto={monto}
                    styleMonto={styleMonto}
                    accessibilityLabel={montoAccessibilityLabel}
                    accessibilityHint={montoAccessibilityHint}
                    testID={montoTestID}
                    disabled={disabled}
                    styleRight={styleRight}
                />
            );
        }
        return null;
    };

    const listItem = () => (
        <>
            {handlerRenderLeft()}
            {handlerRenderBody()}
            {handlerRenderRight()}
        </>
    );

    if (card) {
        return (
            <Card
                cardList
                noShadow={noShadow}
                bordered={bordered}
                accessible={accessible}
                accessibilityLabel={accessibilityLabel}
                accessibilityHint={accessibilityHint}
                testID={testID}
                style={style}
                firstItem={firstItem}
                lastItem={lastItem}
                middleItem={middleItem}
            >
                <CardItem
                    avatar
                    button={!!onPress}
                    disabled={disabled}
                    onPress={onPress}
                >
                    {listItem()}
                </CardItem>
            </Card>
        );
    }

    return (
        <ListItem
            noBorder
            avatar
            disabled={disabled}
            onPress={onPress}
            onLongPress={onLongPress}
            style={style}
            firstItem={firstItem}
            lastItem={lastItem}
            middleItem={middleItem}
            accessible={accessible}
            accessibilityLabel={accessibilityLabel}
            accessibilityHint={accessibilityHint}
            testID={testID}
            onLayout={onLayout}
        >
            {listItem()}
        </ListItem>
    );
};

ListItemContactos.propTypes = {
    accessibilityLabel: listItemContactosPropTypes.accessibilityLabel,
    accessibilityHint: listItemContactosPropTypes.accessibilityLabel,
    accessible: listItemContactosPropTypes.accessible,
    alignAvatar: listItemContactosPropTypes.alignAvatar,
    avatarAccessibilityLabel:
        listItemContactosPropTypes.avatarAccessibilityLabel,
    avatarAccessibilityHint: listItemContactosPropTypes.avatarAccessibilityHint,
    avatarTestID: listItemContactosPropTypes.avatarTestID,
    bordered: listItemContactosPropTypes.bordered,
    card: listItemContactosPropTypes.card,
    data: listItemContactosPropTypes.data.isRequired,
    disabled: listItemContactosPropTypes.disabled,
    firstItem: listItemContactosPropTypes.firstItem,
    hasBorderAvatarImage: listItemContactosPropTypes.hasBorderAvatarImage,
    highlighter: listItemContactosPropTypes.highlighter,
    isTruncatedNombre: listItemContactosPropTypes.isTruncatedNombre,
    numberOfLinesNombre: listItemContactosPropTypes.numberOfLinesNombre,
    lastItem: listItemContactosPropTypes.lastItem,
    loading: listItemContactosPropTypes.loading,
    middleItem: listItemContactosPropTypes.middleItem,
    noShadow: listItemContactosPropTypes.noShadow,
    onLongPress: listItemContactosPropTypes.onLongPress,
    onPress: listItemContactosPropTypes.onPress,
    renderBody: listItemContactosPropTypes.renderBody,
    renderRight: listItemContactosPropTypes.renderRight,
    resizeModeAvatarImage: listItemContactosPropTypes.resizeModeAvatarImage,
    selected: listItemContactosPropTypes.selected,
    style: listItemContactosPropTypes.style,
    styleBody: listItemContactosPropTypes.styleBody,
    styleLeft: listItemContactosPropTypes.styleLeft,
    styleRight: listItemContactosPropTypes.styleRight,
    testID: listItemContactosPropTypes.testID,
    iconLeftAccessibilityLabel:
        listItemContactosPropTypes.iconLeftAccessibilityLabel,
    iconLeftAccessibilityHint:
        listItemContactosPropTypes.iconLeftAccessibilityHint,
    iconLeftTestID: listItemContactosPropTypes.iconLeftTestID,
    onLayout: listItemContactosPropTypes.onLayout,
};
ListItemContactos.defaultProps = {
    accessibilityLabel: listItemContactosDefaultProps.accessibilityLabel,
    accessibilityHint: listItemContactosDefaultProps.accessibilityLabel,
    accessible: listItemContactosDefaultProps.accessible,
    alignAvatar: listItemContactosDefaultProps.alignAvatar,
    avatarAccessibilityLabel:
        listItemContactosDefaultProps.avatarAccessibilityLabel,
    avatarAccessibilityHint:
        listItemContactosDefaultProps.avatarAccessibilityHint,
    avatarTestID: listItemContactosDefaultProps.avatarTestID,
    bordered: listItemContactosDefaultProps.bordered,
    card: listItemContactosDefaultProps.card,
    disabled: listItemContactosDefaultProps.disabled,
    firstItem: listItemContactosDefaultProps.firstItem,
    hasBorderAvatarImage: listItemContactosDefaultProps.hasBorderAvatarImage,
    highlighter: listItemContactosDefaultProps.highlighter,
    isTruncatedNombre: listItemContactosDefaultProps.isTruncatedNombre,
    numberOfLinesNombre: listItemContactosDefaultProps.numberOfLinesNombre,
    lastItem: listItemContactosDefaultProps.lastItem,
    loading: listItemContactosDefaultProps.loading,
    middleItem: listItemContactosDefaultProps.middleItem,
    noShadow: listItemContactosDefaultProps.noShadow,
    onLongPress: listItemContactosDefaultProps.onLongPress,
    onPress: listItemContactosDefaultProps.onPress,
    renderBody: listItemContactosDefaultProps.renderBody,
    renderRight: listItemContactosDefaultProps.renderRight,
    resizeModeAvatarImage: listItemContactosDefaultProps.resizeModeAvatarImage,
    selected: listItemContactosDefaultProps.selected,
    style: listItemContactosDefaultProps.style,
    styleBody: listItemContactosDefaultProps.styleBody,
    styleLeft: listItemContactosDefaultProps.styleLeft,
    styleRight: listItemContactosDefaultProps.styleRight,
    testID: listItemContactosDefaultProps.testID,
    iconLeftAccessibilityLabel:
        listItemContactosDefaultProps.iconLeftAccessibilityLabel,
    iconLeftAccessibilityHint:
        listItemContactosDefaultProps.iconLeftAccessibilityHint,
    iconLeftTestID: listItemContactosDefaultProps.iconLeftTestID,
    onLayout: listItemContactosDefaultProps.onLayout,
};

export default ListItemContactos;
