import React, { memo } from 'react';
import { SwipeListView } from '../../index';
import { transformData, handlerRenderItem } from '../flatlistSticky/utils';
import {
    propTypesFlatlistSticky,
    defaultPropsFlatlistSticky,
} from '../flatlistSticky/type';
import { propTypesSwipeListView, defaultPropsSwipeListView } from './type';

/**
 * Componente listado ver mas opciones con gesto deslizar y componentes flotantes. Extiende de <FlatlistSticky />.
 *
 * @component
 */
const SwipeListViewSticky = ({
    bounces,
    buttonWidth,
    centerContent,
    contentContainerStyle,
    data,
    dataListHeader,
    error,
    hiddenItemLeft,
    hiddenItemRight,
    keyboardShouldPersistTaps,
    keyboardVerticalOffset,
    keyExtractor,
    leftOpenValue,
    ListEmptyComponent,
    ListErrorComponent,
    ListFooterComponent,
    ListHeaderComponent,
    ListLoadingComponent,
    loading,
    refreshControl,
    renderHiddenItem,
    renderItem,
    rightOpenValue,
    stickyHeaderIndices,
    styleBackgroundItem,
    swipeGestureBegan,
    closeOnRowPress,
    closeOnRowOpen,
    closeOnRowBeginSwipe,
    closeOnScroll,
    disableLeftSwipe,
    disableRightSwipe,
    recalculateHiddenLayout,
    swipeGestureEnded,
    onRowOpen,
    onRowDidOpen,
    onRowClose,
    onRowDidClose,
    onLeftActionStatusChange,
    onRightActionStatusChange,
    onLeftAction,
    onRightAction,
    onScrollEnabled,
    swipeRowStyle,
    onSwipeValueChange,
    useNativeDriver,
    useAnimatedList,
}) => (
    <SwipeListView
        buttonWidth={buttonWidth}
        hiddenItemLeft={hiddenItemLeft}
        hiddenItemRight={hiddenItemRight}
        renderHiddenItem={renderHiddenItem}
        styleBackgroundItem={styleBackgroundItem}
        swipeGestureBegan={swipeGestureBegan}
        rightOpenValue={rightOpenValue}
        leftOpenValue={leftOpenValue}
        bounces={bounces}
        centerContent={centerContent}
        contentContainerStyle={contentContainerStyle}
        data={transformData({
            data,
            dataListHeader,
            error,
            ListEmptyComponent,
            ListErrorComponent,
            ListLoadingComponent,
            loading,
        })}
        keyboardShouldPersistTaps={keyboardShouldPersistTaps}
        keyboardVerticalOffset={keyboardVerticalOffset}
        keyExtractor={keyExtractor}
        ListEmptyComponent={ListEmptyComponent}
        ListFooterComponent={ListFooterComponent}
        ListHeaderComponent={ListHeaderComponent}
        refreshControl={refreshControl}
        renderItem={handlerRenderItem({ renderItem })}
        stickyHeaderIndices={stickyHeaderIndices}
        closeOnRowPress={closeOnRowPress}
        closeOnRowOpen={closeOnRowOpen}
        closeOnRowBeginSwipe={closeOnRowBeginSwipe}
        closeOnScroll={closeOnScroll}
        disableLeftSwipe={disableLeftSwipe}
        disableRightSwipe={disableRightSwipe}
        recalculateHiddenLayout={recalculateHiddenLayout}
        swipeGestureEnded={swipeGestureEnded}
        onRowOpen={onRowOpen}
        onRowDidOpen={onRowDidOpen}
        onRowClose={onRowClose}
        onRowDidClose={onRowDidClose}
        onLeftActionStatusChange={onLeftActionStatusChange}
        onRightActionStatusChange={onRightActionStatusChange}
        onLeftAction={onLeftAction}
        onRightAction={onRightAction}
        onScrollEnabled={onScrollEnabled}
        swipeRowStyle={swipeRowStyle}
        onSwipeValueChange={onSwipeValueChange}
        useNativeDriver={useNativeDriver}
        useAnimatedList={useAnimatedList}
    />
);

SwipeListViewSticky.propTypes = {
    ...propTypesFlatlistSticky,
    ...propTypesSwipeListView,
};
SwipeListViewSticky.defaultProps = {
    ...defaultPropsFlatlistSticky,
    ...defaultPropsSwipeListView,
};

export default memo(SwipeListViewSticky);
