import PropTypes from 'prop-types';
import { Scale } from '../../index';
import { DEFAULT_TYPES, TYPES } from '../../constants/propTypes';

const swipeListButtonPropTypes = {
    /**
     * Alineación del botón.
     */
    direction: PropTypes.oneOf(['right', 'left']),
    /**
     * Boleano para indicar si es el primer botón.
     */
    firstItem: PropTypes.bool,
    /**
     * Estilos para el icono.
     */
    iconStyle: TYPES.style,
    /**
     * Estilos del boton.
     */
    style: TYPES.style,
    /**
     * Indice del boton.
     */
    index: PropTypes.number,
    /**
     * Numero de botones.
     */
    numberOfButtons: PropTypes.number,
    /**
     * Ancho de los botones ocultos.
     */
    buttonWidth: PropTypes.number,
    /**
     * Tipo de color del botón oculto.
     */
    type: PropTypes.oneOf([
        'success',
        'danger',
        'info',
        'warning',
        'primary',
        'primary_light',
    ]),
    /**
     * Nombre del icono del botón oculto.
     */
    iconName: PropTypes.string,
    /**
     * Acción del botón oculto.
     */
    onPress: PropTypes.func,
    /**
     * Boleano para habilitar accesibilidad.
     */
    accessible: PropTypes.bool,
    /**
     * Identificador para pruebas.
     */
    testID: PropTypes.string,
    /**
     * Identificador para accesibilidad.
     */
    accessibilityLabel: PropTypes.string,
    /**
     * Sugerencia de accesibilidad.
     */
    accessibilityHint: PropTypes.string,
    /**
     * Comunica el propósito de un componente al usuario.
     */
    accessibilityRole: PropTypes.string,
};

const swipeListButtonDefaultProps = {
    direction: 'right',
    firstItem: false,
    iconName: '',
    iconStyle: DEFAULT_TYPES.style,
    accessible: true,
    style: DEFAULT_TYPES.style,
    index: 0,
    numberOfButtons: 1,
    onPress: DEFAULT_TYPES.func,
    type: 'primary_light',
    buttonWidth: Scale(72),
    testID: '',
    accessibilityLabel: '',
    accessibilityHint: '',
    accessibilityRole: 'button',
};

const propTypesSwipeListView = {
    /**
     * Ancho de los botones ocultos.
     */
    buttonWidth: PropTypes.number,
    /**
     * Arreglo de objectos para configurar los item de la lista.
     */
    data: PropTypes.arrayOf(PropTypes.any),
    /**
     * Arreglo de objectos para configurar los botones ocultos en el lado izquierdo.
     */
    hiddenItemLeft: PropTypes.oneOfType([
        PropTypes.arrayOf(PropTypes.shape(swipeListButtonPropTypes)),
        PropTypes.bool,
    ]),
    /**
     * Arreglo de objectos para configurar los botones ocultos en el lado derecho.
     */
    hiddenItemRight: PropTypes.oneOfType([
        PropTypes.arrayOf(PropTypes.shape(swipeListButtonPropTypes)),
        PropTypes.bool,
    ]),
    /**
     * Valor de TranslateX para abrir la fila a la izquierda (numero positivo).
     */
    leftOpenValue: PropTypes.number,
    /**
     * Función que renderiza una fila oculta en el FlatList (renderiza detrás de la fila).
     */
    renderHiddenItem: PropTypes.func,
    /**
     * Función que renderiza por cada elemento de data.
     */
    renderItem: PropTypes.func,
    /**
     * Valor de TranslateX para abrir la fila a la derecha (numero negativo).
     */
    rightOpenValue: PropTypes.number,
    /**
     * Función que se invoca cuando se llama el gesto deslizar.
     */
    swipeGestureBegan: PropTypes.func,
    /**
     * Función que generar clave única por cada fila en la lista.
     */
    keyExtractor: PropTypes.func,
    styleBackgroundItem: TYPES.style,
    /**
     * Boleano para activar comportamiento: cerrar las filas abiertas cuando se presiona una fila.
     */
    closeOnRowPress: PropTypes.bool,
    /**
     * Boleano para activar comportamiento: cerrar las filas abiertas cuando se abre otra fila.
     */
    closeOnRowOpen: PropTypes.bool,
    /**
     * Boleano para activar comportamiento: cerrar las filas abiertas cuando una fila comienza a abrirse.
     */
    closeOnRowBeginSwipe: PropTypes.bool,
    /**
     * Boleano para activar comportamiento: cerrar las filas abiertas cuando FlatList comience a desplazarse.
     */
    closeOnScroll: PropTypes.bool,
    /**
     * Boleano para deshabilitar la capacidad de deslizar filas hacia la izquierda.
     */
    disableLeftSwipe: PropTypes.bool,
    /**
     * Boleano para deshabilitar la capacidad de deslizar filas hacia la derecha.
     */
    disableRightSwipe: PropTypes.bool,
    /**
     * Boleano para habilitar los cálculos de onLayout en filas ocultas para que se ejecuten siempre.
     * De forma predeterminada, los cálculos de tamaño de la fila oculta solo se realizan en el primer evento onLayout por motivos de rendimiento.
     * Pasar verdadero aquí hará que los cálculos se ejecuten en cada evento onLayout.
     * Es posible que desee hacer esto si los tamaños de sus filas pueden cambiar.
     * Por ejemplo para filas de diferentes alturas.
     */
    recalculateHiddenLayout: PropTypes.bool,
    /**
     * Función que se invoca cuando se termina el gesto de deslizar.
     */
    swipeGestureEnded: PropTypes.func,
    /**
     * Función que se invoca cuando una fila deslizada está ejecutando animación abrir.
     */
    onRowOpen: PropTypes.func,
    /**
     * Función que se invoca cuando una fila deslizada finalizo animación abrir.
     */
    onRowDidOpen: PropTypes.func,
    /**
     * Función que se invoca cuando una fila deslizada está ejecutando animación cerrar.
     */
    onRowClose: PropTypes.func,
    /**
     * Función que se invoca cuando una fila deslizada finalizo animación cerrar.
     */
    onRowDidClose: PropTypes.func,
    /**
     * Función que se invoca cuando el valor de deslizar cruza el valor de la prop "leftActivationValue".
     */
    onLeftActionStatusChange: PropTypes.func,
    /**
     * Función que se invoca cuando el valor de deslizar cruza el valor de la prop "rightActivationValue".
     */
    onRightActionStatusChange: PropTypes.func,
    /**
     * Función que se invoca cuando la fila se desplazó al valor de la prop "leftActivationValue".
     */
    onLeftAction: PropTypes.func,
    /**
     * Función que se invoca cuando la fila se desplazó al valor de la prop "rightActivationValue".
     */
    onRightAction: PropTypes.func,
    /**
     * Función que se invoca cuando el desplazamiento ha sido habilitado/deshabilitado.
     */
    onScrollEnabled: PropTypes.func,
    /**
     * Estilos para el contenedor principal.
     */
    swipeRowStyle: TYPES.style,
    /**
     * Función que se invoca cada vez que cambia el valor de translateX de una fila.
     */
    onSwipeValueChange: PropTypes.func,
    /**
     * Boleano para activar animaciónes nativas.
     */
    useNativeDriver: PropTypes.bool,
    /**
     * Boleano para usar Animated.Flatlist o Animated.Sectionlist.
     */
    useAnimatedList: PropTypes.bool,
};

const defaultPropsSwipeListView = {
    buttonWidth: Scale(72),
    data: false,
    hiddenItemLeft: false,
    hiddenItemRight: false,
    leftOpenValue: 0,
    renderHiddenItem: null,
    rightOpenValue: 0,
    swipeGestureBegan: null,
    keyExtractor: null,
    styleBackgroundItem: DEFAULT_TYPES.style,
    closeOnRowBeginSwipe: false,
    closeOnScroll: true,
    closeOnRowPress: true,
    closeOnRowOpen: true,
    disableLeftSwipe: false,
    disableRightSwipe: false,
    recalculateHiddenLayout: false,
    swipeGestureEnded: null,
    onRowOpen: null,
    onRowDidOpen: null,
    onRowClose: null,
    onRowDidClose: null,
    onLeftActionStatusChange: null,
    onRightActionStatusChange: null,
    onLeftAction: null,
    onRightAction: null,
    onScrollEnabled: null,
    swipeRowStyle: DEFAULT_TYPES.style,
    onSwipeValueChange: null,
    useNativeDriver: true,
    useAnimatedList: false,
};

export {
    propTypesSwipeListView,
    defaultPropsSwipeListView,
    swipeListButtonPropTypes,
    swipeListButtonDefaultProps,
};
