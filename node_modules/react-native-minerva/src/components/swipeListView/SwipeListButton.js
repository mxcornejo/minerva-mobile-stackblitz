import React from 'react';
import { TouchableOpacity } from 'react-native';
import { HelperStyle, Icon } from '../../index';
import Style from './style';
import { swipeListButtonPropTypes, swipeListButtonDefaultProps } from './type';

const SwipeListButton = (props) => {
    const {
        direction,
        firstItem,
        iconName,
        iconStyle,
        index,
        numberOfButtons,
        onPress,
        style,
        type,
        buttonWidth,
        testID,
        accessible,
        accessibilityLabel,
        accessibilityHint,
        accessibilityRole,
        ...viewProps
    } = props;

    const getBackgroundColor = () => {
        const typeColors = {
            success: HelperStyle.bg_success,
            danger: HelperStyle.bg_danger,
            info: HelperStyle.bg_success,
            warning: HelperStyle.bg_info,
            primary: HelperStyle.bg_primary,
            primary_light: HelperStyle.bg_primary_light,
        };
        return typeColors[type];
    };

    const position = index + 1;
    const positionReverse = numberOfButtons - position;
    const stylePosition =
        direction === 'right'
            ? { right: buttonWidth * positionReverse }
            : { left: buttonWidth * positionReverse };
    const styleWidthButton = { width: buttonWidth };

    const styleFirstItem =
        direction === 'right'
            ? Style.firstBackRightBtn
            : Style.firstBackLeftBtn;

    return (
        <TouchableOpacity
            {...viewProps}
            testID={testID}
            accessible={accessible}
            accessibilityLabel={accessibilityLabel}
            accessibilityHint={accessibilityHint}
            accessibilityRole={accessibilityRole}
            style={[
                firstItem ? styleFirstItem : null,
                getBackgroundColor(),
                stylePosition,
                styleWidthButton,
                Style.backBtn,
                style,
            ]}
            onPress={onPress}
        >
            <Icon name={iconName} style={[HelperStyle.white, iconStyle]} />
        </TouchableOpacity>
    );
};

SwipeListButton.propTypes = {
    direction: swipeListButtonPropTypes.direction,
    firstItem: swipeListButtonPropTypes.firstItem,
    iconStyle: swipeListButtonPropTypes.iconStyle,
    style: swipeListButtonPropTypes.style,
    index: swipeListButtonPropTypes.index,
    numberOfButtons: swipeListButtonPropTypes.numberOfButtons,
    buttonWidth: swipeListButtonPropTypes.buttonWidth,
    type: swipeListButtonPropTypes.type,
    iconName: swipeListButtonPropTypes.iconName,
    onPress: swipeListButtonPropTypes.onPress,
    accessible: swipeListButtonPropTypes.accessible,
    testID: swipeListButtonPropTypes.testID,
    accessibilityLabel: swipeListButtonPropTypes.accessibilityLabel,
    accessibilityHint: swipeListButtonPropTypes.accessibilityHint,
    accessibilityRole: swipeListButtonPropTypes.accessibilityRole,
};
SwipeListButton.defaultProps = {
    direction: swipeListButtonDefaultProps.direction,
    firstItem: swipeListButtonDefaultProps.firstItem,
    iconName: swipeListButtonDefaultProps.iconName,
    iconStyle: swipeListButtonDefaultProps.iconStyle,
    accessible: swipeListButtonDefaultProps.accessible,
    style: swipeListButtonDefaultProps.style,
    index: swipeListButtonDefaultProps.index,
    numberOfButtons: swipeListButtonDefaultProps.numberOfButtons,
    onPress: swipeListButtonDefaultProps.onPress,
    type: swipeListButtonDefaultProps.type,
    buttonWidth: swipeListButtonDefaultProps.buttonWidth,
    testID: swipeListButtonDefaultProps.testID,
    accessibilityLabel: swipeListButtonDefaultProps.accessibilityLabel,
    accessibilityHint: swipeListButtonDefaultProps.accessibilityHint,
    accessibilityRole: swipeListButtonDefaultProps.accessibilityRole,
};

export default SwipeListButton;
