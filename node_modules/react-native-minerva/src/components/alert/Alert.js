import React, { memo } from 'react';
import * as Animatable from 'react-native-animatable';
import { isUndefined } from 'lodash';
import {
    Card,
    CardItem,
    HelperStyle,
    Left,
    Validate,
    getActiveProp,
} from '../../index';
import AlertBody from './components/AlertBody';
import AlertIcon from './components/AlertIcon';
import { propTypes, defaultProps } from './type';

/**
 * Componente para mostrar mensajes informativos.
 *
 * @component
 */
const AlertBCH = (props) => {
    const {
        animation,
        children,
        duration,
        iconAccessibilityLabel,
        iconAccessibilityHint,
        style,
        alertRef,
        delay,
        buttonsGroup,
        icon,
        renderLeft,
        neutral,
        type,
        testID,
        accessibilityLabel,
        accessibilityHint,
        accessibilityRole,
        animatableTestID,
    } = props;
    const colorsName = ['success', 'info', 'warning', 'danger', 'neutral'];
    const activeColor =
        type !== 'none' ? type : getActiveProp(props, colorsName);

    const handlerRenderLeft = () => {
        const hasButtonConditional = isUndefined(icon) ? false : icon;
        const notButtonConditional = isUndefined(icon) ? true : icon;
        const iconConditional = buttonsGroup
            ? hasButtonConditional
            : notButtonConditional;
        if (renderLeft) return Validate.render(renderLeft);
        if (iconConditional) {
            return (
                <Left>
                    <AlertIcon
                        neutral={neutral}
                        icon={icon}
                        iconAccessibilityLabel={iconAccessibilityLabel}
                        iconAccessibilityHint={iconAccessibilityHint}
                        renderLeft={renderLeft}
                        buttonsGroup={buttonsGroup}
                        activeColor={activeColor}
                    />
                </Left>
            );
        }
        return null;
    };

    const isActiveColor = (name) => activeColor === name;

    const renderAlert = () => {
        const marginAlert = Validate.style(buttonsGroup, {
            ...HelperStyle.pt_2,
            ...HelperStyle.pb_2,
        });
        return (
            <Card
                alert
                noShadow
                {...props}
                testID={testID}
                accessibilityLabel={accessibilityLabel}
                accessibilityHint={accessibilityHint}
                accessibilityRole={accessibilityRole}
                success={isActiveColor('success')}
                info={isActiveColor('info')}
                warning={isActiveColor('warning')}
                danger={isActiveColor('danger')}
                neutral={isActiveColor('neutral')}
                style={style}
            >
                <CardItem avatar style={marginAlert}>
                    {handlerRenderLeft()}
                    <AlertBody buttonsGroup={buttonsGroup}>
                        {children}
                    </AlertBody>
                </CardItem>
            </Card>
        );
    };
    if (animation || alertRef) {
        return (
            <Animatable.View
                animation={animation}
                duration={duration}
                delay={delay}
                useNativeDriver
                ref={alertRef}
                testID={animatableTestID}
            >
                {renderAlert()}
            </Animatable.View>
        );
    }
    return renderAlert();
};

AlertBCH.propTypes = propTypes;
AlertBCH.defaultProps = defaultProps;

export default memo(AlertBCH);
