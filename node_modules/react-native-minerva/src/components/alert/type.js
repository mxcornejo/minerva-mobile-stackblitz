import PropTypes from 'prop-types';
import ANIMATABLE_STR from '../../constants/animatableStr';

const propTypes = {
    /**
     * Nombre de animación.
     */
    animation: PropTypes.oneOf(ANIMATABLE_STR.animation),
    /**
     * Componente a renderizar en el centro del Alert.
     */
    children: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),
    /**
     * Componente a renderizar en el lado izquierdo del Alert.
     */
    renderLeft: PropTypes.oneOfType([
        PropTypes.node,
        PropTypes.func,
        PropTypes.bool,
    ]),
    /**
     * Mensaje de tipo error.
     */
    danger: PropTypes.bool,
    /**
     * Tiempo para retrazar la animación definida en la prop animation.
     */
    delay: PropTypes.number,
    /**
     * Dureación de la animacion definida en la prop animation.
     */
    duration: PropTypes.number,
    /**
     * Identificador de accesibilidad para el icono del mensaje.
     */
    iconAccessibilityLabel: PropTypes.string,
    /**
     * Sugerencia de accesibilidad para el icono del mensaje.
     */
    iconAccessibilityHint: PropTypes.string,
    /**
     * Mensaje de tipo informativo.
     */
    info: PropTypes.bool,
    /**
     * Mensaje de tipo éxito.
     */
    success: PropTypes.bool,
    /**
     * Referencia al componente.
     */
    alertRef: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.string,
        PropTypes.shape({
            current: PropTypes.oneOfType([
                PropTypes.objectOf(PropTypes.any),
                PropTypes.string,
            ]),
        }),
    ]),
    /**
     * Mensaje de tipo alerta.
     */
    warning: PropTypes.bool,
    /**
     * Nombre del icono o objecto con propiedades para configurar el <Icon />.
     */
    icon: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),
    /**
     * Objecto con propiedades para configurar botones.
     */
    buttonsGroup: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.array,
        PropTypes.bool,
    ]),
    /**
     * Mensaje de tipo neutral.
     */
    neutral: PropTypes.bool,
    /**
     * Tipo de mensaje.
     */
    type: PropTypes.oneOf([
        'success',
        'info',
        'warning',
        'danger',
        'neutral',
        'none',
    ]),
    /**
     * Identificador para pruebas.
     */
    testID: PropTypes.string,
    /**
     * Identificador para accesibilidad.
     */
    accessibilityLabel: PropTypes.string,
    /**
     * Sugerencia de accesibilidad.
     */
    accessibilityHint: PropTypes.string,
    /**
     * Comunica el propósito de un componente al usuario.
     */
    accessibilityRole: PropTypes.string,
    /**
     * Identificador de pruebas para contenedor del mensaje con animación.
     */
    animatableTestID: PropTypes.string,
};

const defaultProps = {
    animation: null,
    danger: false,
    delay: 0,
    duration: 500,
    iconAccessibilityLabel: '',
    iconAccessibilityHint: '',
    info: false,
    success: false,
    alertRef: undefined,
    warning: false,
    icon: undefined,
    renderLeft: false,
    buttonsGroup: false,
    neutral: false,
    children: null,
    type: 'none',
    testID: '',
    accessibilityLabel: '',
    accessibilityHint: '',
    animatableTestID: '',
    accessibilityRole: 'alert',
};

export { propTypes, defaultProps };
