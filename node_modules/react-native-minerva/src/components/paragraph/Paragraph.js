import React, { memo, Fragment } from 'react';
import { isArray, isObject, has } from 'lodash';
import { View, Text, HelperStyle, Validate } from '../../index';
import { propTypes, defaultProps } from './types';

/**
 * Componente para PÃ¡rrafos.
 *
 * @component
 */
const Paragraph = (props) => {
    const { items, disabled, style, wrapperStyle, wrapper } = props;

    const renderText = (item, index = false) => {
        if (has(item, 'renderText')) {
            return (
                <Fragment key={index}>
                    {Validate.render(item?.renderText)}
                </Fragment>
            );
        }
        const textValue = isObject(item) ? item?.text : item;
        const textProps = isObject(item) ? { ...props, ...item } : props;
        return (
            <Text
                key={index}
                accessibilityLabel={Validate.safeLabel(
                    textProps?.accessibilityLabel,
                    textValue,
                )}
                accessibilityHint={Validate.safeLabel(
                    textProps?.accessibilityHint,
                )}
                testID={Validate.safeLabel(textProps?.testID, textValue)}
                {...textProps}
                style={[
                    style,
                    disabled && HelperStyle.gray_lighter,
                    isObject(item) && has(item, 'style') ? item?.style : null,
                ]}
            >
                {textValue}
            </Text>
        );
    };
    const renderItems = () =>
        isArray(items)
            ? items.map((item, i) => renderText(item, i))
            : renderText(items);

    if (wrapper) {
        return <View style={wrapperStyle}>{renderItems()}</View>;
    }
    return renderItems();
};

Paragraph.propTypes = {
    /**
     * Arreglo de textos o objecto con propiedades para configurar textos y sus proppiedades.
     */
    items: propTypes.items,
    /**
     * Boleano para habilitar y deshabilitar.
     */
    disabled: propTypes.disabled,
    /**
     * Estilos que se aplica a todos los <Text /> dentro del arreglo de items.
     */
    style: propTypes.style,
    /**
     * Boleano para definir si envuelve los item en un View o no.
     */
    wrapper: propTypes.wrapper,
    /**
     * Estilos del wrapper.
     */
    wrapperStyle: propTypes.style,
};
Paragraph.defaultProps = {
    items: defaultProps.items,
    disabled: defaultProps.disabled,
    style: defaultProps.style,
    wrapper: defaultProps.wrapper,
    wrapperStyle: defaultProps.style,
};

export default memo(Paragraph);
