/* eslint-disable react/display-name */
import React, { memo, forwardRef, useImperativeHandle } from 'react';
import { isBoolean } from 'lodash';
import PropTypes from 'prop-types';
import {
    View,
    HelperStyle,
    Input,
    Grid,
    Col,
    InputHelperText,
} from '../../index';

/**
 * Componente DigiCard.
 *
 * @component
 */
const InputDigiCard = forwardRef((props, ref) => {
    const { error, helperText, propsInput } = props;
    const inputs = [];
    const setFocus = (index = 0) =>
        inputs[`input_${index}`] && inputs[`input_${index}`]._root.focus();
    const handlerSetFocus = () => ({ setFocus });

    useImperativeHandle(ref, handlerSetFocus);

    const handleInput = (input) => (evt) => {
        const { text } = evt.nativeEvent;
        const { nextInput } = inputs[input.inputDigiCardRef].props;
        if (text.length === 2 && nextInput && inputs[nextInput]) {
            inputs[nextInput]._root.focus();
        }
    };

    const hasError = (input) => (isBoolean(input.error) ? input.error : error);

    const mapInputs = (item, index) => {
        let input = {};
        if (index === 0) {
            input = {
                ...item,
                inputDigiCardRef: 'input_0',
                nextInput: 'input_1',
            };
        }
        if (index === 1) {
            input = {
                ...item,
                inputDigiCardRef: 'input_1',
                nextInput: 'input_2',
            };
        }
        if (index === 2) {
            input = {
                ...item,
                inputDigiCardRef: 'input_2',
            };
        }
        const key = `${input.inputDigiCardRef}-${index}`;
        return (
            <Col key={key} style={index < 2 && HelperStyle.pr_4}>
                <Input
                    secureTextEntry
                    maxLength={2}
                    pass
                    {...input}
                    error={hasError(input)}
                    digiCard
                    inputRef={(component) => {
                        inputs[input.inputDigiCardRef] = component;
                    }}
                    keyboardType="number-pad"
                    returnKeyType="done"
                    onChange={handleInput(input)}
                />
            </Col>
        );
    };

    const renderInputs = () =>
        propsInput.map((item, index) => mapInputs(item, index));

    return (
        <View style={HelperStyle.mb_4}>
            <Grid style={HelperStyle.pa_0}>{renderInputs()}</Grid>
            <InputHelperText error={error}>{helperText}</InputHelperText>
        </View>
    );
});

InputDigiCard.propTypes = {
    /**
     * Boleano para definir estado de error.
     */
    error: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number,
        PropTypes.bool,
    ]),
    /**
     * Texto de ayuda.
     */
    helperText: PropTypes.string,
    /**
     * Objecto para configurar los inputs.
     */
    propsInput: PropTypes.arrayOf(
        PropTypes.shape({
            /**
             * Etiqueta del campo.
             */
            label: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
            /**
             * Valor del campo.
             */
            value: PropTypes.oneOfType([
                PropTypes.string,
                PropTypes.number,
                PropTypes.bool,
            ]),
            /**
             * Funci√≥n que se invoca cuando value cambia de valor.
             */
            onChangeText: PropTypes.func,
            /**
             * Boleano para definir estado de error.
             */
            error: PropTypes.oneOfType([
                PropTypes.string,
                PropTypes.number,
                PropTypes.bool,
            ]),
        }),
    ).isRequired,
};
InputDigiCard.defaultProps = {
    error: false,
    helperText: '',
};

export default memo(InputDigiCard);
