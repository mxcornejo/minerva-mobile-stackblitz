import React, { memo } from 'react';
import { TouchableOpacity, Image, ImageBackground } from 'react-native';
import { isBoolean } from 'lodash';
import {
    Left,
    Body,
    Card,
    CardItem,
    Validate,
    Paragraph,
    Icon,
    HelperStyle,
    Right,
    Scale,
    View,
} from '../../index';
import ContentCollapsed from './components/ContentCollapsed';
import ImageMask from './components/ImageMask';
import Styles from './style';
import { propTypesCardTrampolin, defaultPropsCardTrampolin } from './types';
import CARDTRAMPOLIN_STR from './CardTrampolinStr';

/**
 * Componente Card tipo trampolin.
 *
 * @component
 */
const CardTrampolin = ({
    children,
    close,
    contentCollapse,
    customIconCloseName,
    customIconCloseStyle,
    dataBody,
    image,
    imageMask,
    onPress,
    onPressClose,
    renderBody,
    renderLeft,
    renderRight,
    style,
    styleBody,
    styleCard,
    styleImageMask,
    styleLeft,
    styleRight,
    imageBackgroundTestID,
    imageBackgroundAccessibilityLabel,
    imageBackgroundAccessibilityHint,
    imageTestID,
    imageAccessibilityLabel,
    imageAccessibilityHint,
    // campaÃ±as
    background,
    backgroundStyle,
    cardItemProps,
}) => {
    /**
     * Renderiza contenido left del card.
     */
    const renderLeftItem = () => {
        if (renderLeft) {
            return Validate.render(renderLeft);
        }
        if (imageMask) {
            return (
                <ImageMask
                    image={image}
                    type={imageMask}
                    styleImageMask={styleImageMask}
                    imageTestID={imageTestID}
                    imageAccessibilityLabel={imageAccessibilityLabel}
                    imageAccessibilityHint={imageAccessibilityHint}
                />
            );
        }
        return (
            <Image
                source={image}
                style={Styles.image}
                imageTestID={imageTestID}
                imageAccessibilityLabel={imageAccessibilityLabel}
                imageAccessibilityHint={imageAccessibilityHint}
            />
        );
    };

    /**
     * Renderiza contenido del body del card.
     */
    const handlerRenderBody = () => {
        if (renderBody) {
            return Validate.render(renderBody);
        }
        if (dataBody.length) {
            return <Paragraph items={dataBody} />;
        }
        return children;
    };

    /**
     * Renderiza contenido colapsable en el body si contentCollapse?.collapsed esta definido.
     */
    const handlerRenderContentCollapse = () =>
        isBoolean(contentCollapse?.collapsed) && (
            <ContentCollapsed
                onPressItem={contentCollapse?.onPressItem}
                collapsed={contentCollapse?.collapsed}
                data={contentCollapse?.data}
                onPressClose={contentCollapse?.onPressClose}
            />
        );

    /**
     * Renderiza contenido right del card.
     */
    const handlerRenderRight = () => {
        const hasIcon = () =>
            close && (
                <TouchableOpacity
                    style={Styles.iconClose}
                    onPress={onPressClose}
                    accessible
                    accessibilityLabel={
                        CARDTRAMPOLIN_STR.close.accessibilityLabel
                    }
                    accessibilityHint={
                        CARDTRAMPOLIN_STR.close.accessibilityHint
                    }
                >
                    <Icon
                        name={
                            customIconCloseName ||
                            CARDTRAMPOLIN_STR.close.iconName
                        }
                        style={[
                            HelperStyle.gray,
                            HelperStyle.fs_4,
                            customIconCloseStyle,
                        ]}
                    />
                </TouchableOpacity>
            );
        if (close || renderRight) {
            return (
                <Right
                    style={[
                        Styles.cardRight,
                        close && Styles.cardRightClose,
                        styleRight,
                    ]}
                >
                    {renderRight && Validate.render(renderRight)}
                    {close && hasIcon()}
                </Right>
            );
        }
        return null;
    };

    const styleImageBody = {
        ...HelperStyle.pl_4,
    };

    const styleImageLeft = {
        maxWidth: Scale(100),
    };

    const handleRenderLeft = () => {
        if (background) {
            return (
                <ImageBackground
                    source={image}
                    style={[Styles.imageBackground, backgroundStyle]}
                    testID={imageBackgroundTestID}
                    accessible
                    accessibilityRole="image"
                    accessibilityLabel={imageBackgroundAccessibilityLabel}
                    accessibilityHint={imageBackgroundAccessibilityHint}
                />
            );
        }
        return (
            <Left
                style={[
                    Styles.cardLeft,
                    !imageMask && styleImageLeft,
                    styleLeft,
                ]}
            >
                {renderLeftItem()}
            </Left>
        );
    };

    return (
        <View style={style}>
            <Card style={styleCard}>
                <CardItem
                    pointerEvents="none"
                    onPress={onPress}
                    button
                    style={Styles.cardItem}
                    {...cardItemProps}
                >
                    {handleRenderLeft()}
                    <Body
                        style={[
                            Styles.cardBody,
                            !imageMask && styleImageBody,
                            styleBody,
                        ]}
                    >
                        {handlerRenderBody()}
                    </Body>
                    {handlerRenderRight()}
                </CardItem>
            </Card>
            {handlerRenderContentCollapse()}
        </View>
    );
};

CardTrampolin.propTypes = propTypesCardTrampolin;
CardTrampolin.defaultProps = defaultPropsCardTrampolin;

export default memo(CardTrampolin);
