import PropTypes from 'prop-types';
import { DEFAULT_TYPES, TYPES } from '../../constants/propTypes';
import CARDTRAMPOLIN_STR from './CardTrampolinStr';

const propTypesImageMask = {
    /**
     * Tipo de recorte de la mascara de recorte.
     */
    type: PropTypes.oneOf(['waves_left', 'miinversion']),
    /**
     * La ruta de la imagen (ya sea una URL remota o un recurso de archivo local) a mostrar en la mascara de recorte.
     */
    image: PropTypes.oneOfType([
        PropTypes.shape({
            uri: PropTypes.string.isRequired,
        }),
        PropTypes.string,
    ]),
    /**
     * Estilos componente mascara de recorte (MaskedView).
     */
    styleImageMask: TYPES.style,
    /**
     * Identificador de pruebas para Image.
     */
    imageTestID: PropTypes.string,
    /**
     * Identificador de accesibilidad para Image.
     */
    imageAccessibilityLabel: PropTypes.string,
    /**
     * Sugerencia de accesibilidad para Image.
     */
    imageAccessibilityHint: PropTypes.string,
};

const defaultPropsImageMask = {
    type: null,
    styleImageMask: DEFAULT_TYPES.style,
    imageTestID: CARDTRAMPOLIN_STR.image.testID,
    imageAccessibilityLabel: '',
    imageAccessibilityHint: '',
};

const propTypesContentCollapsed = {
    /**
     * Acci贸n para los item del contenido colapsable.
     */
    onPressItem: PropTypes.func.isRequired,
    /**
     * Boleano para mostrar/ocultar contenido.
     */
    collapsed: PropTypes.oneOfType([PropTypes.string, PropTypes.bool])
        .isRequired,
    /**
     * Arreglo de objectos para configurar el contenido colapsable.
     */
    data: PropTypes.arrayOf(
        PropTypes.shape({
            /**
             * Texto del contenido colapsable.
             */
            label: PropTypes.string.isRequired,
            /**
             * Nombre del icono del contenido colapsable.
             */
            icon: PropTypes.string.isRequired,
            /**
             * Identificador de accesibilidad.
             */
            accessibilityLabel: PropTypes.string,
            /**
             * Sugerencia de accesibilidad.
             */
            accessibilityHint: PropTypes.string,
        }),
    ).isRequired,
    /**
     * Acci贸n ocultar/mostrar contenido colapsable.
     */
    onPressClose: PropTypes.func.isRequired,
};

const propTypesCardTrampolin = {
    /**
     * Componente a renderizar en el centro del Card Trampolin.
     */
    children: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),
    /**
     * Componente a renderizar en el centro del Card Trampolin.
     */
    renderBody: PropTypes.oneOfType([
        PropTypes.node,
        PropTypes.func,
        PropTypes.bool,
    ]),
    /**
     * Componente a renderizar en el lado derecho del Card Trampolin.
     */
    renderRight: PropTypes.oneOfType([
        PropTypes.node,
        PropTypes.func,
        PropTypes.bool,
    ]),
    /**
     * Acci贸n para el Card Trampolin.
     */
    onPress: PropTypes.func,
    /**
     * Estilos para el contenedor del Card Trampolin.
     */
    style: TYPES.style,
    /**
     * Estilos para el contenedor interno del lado izquierdo.
     */
    styleLeft: TYPES.style,
    /**
     * Estilos para el contenedor interno del lado derecho.
     */
    styleRight: TYPES.style,
    /**
     * Arreglo de objectos de textos que hereda <Paragraph /> para mostrar en el centro del Card.
     */
    dataBody: PropTypes.arrayOf(PropTypes.any),
    /**
     * Tipo de recorte de la mascara de recorte.
     */
    imageMask: propTypesImageMask.type,
    /**
     * La ruta de la imagen (ya sea una URL remota o un recurso de archivo local) a mostrar en la mascara de recorte.
     */
    image: propTypesImageMask.image,
    /**
     * Arreglo para configurar el contenido colapsable.
     */
    contentCollapse: PropTypes.oneOfType([
        PropTypes.shape(propTypesContentCollapsed),
        PropTypes.string,
    ]),
    /**
     * Boleano para mostrar icono cerrar.
     */
    close: PropTypes.bool,
    /**
     * Acci贸n para el icono cerrar.
     */
    onPressClose: PropTypes.func,
    /**
     * Boleano para mostrar la props image como imagen de fondo del Card.
     */
    background: PropTypes.bool,
    /**
     * Estilos para el ImageBackground.
     */
    backgroundStyle: TYPES.style,
    /**
     * Objecto con propiedades para CardItem.
     */
    cardItemProps: PropTypes.objectOf(PropTypes.any),
    /**
     * Identificador de pruebas para ImageBackground.
     */
    imageBackgroundTestID: PropTypes.string,
    /**
     * Identificador de accesibilidad para ImageBackground.
     */
    imageBackgroundAccessibilityLabel: PropTypes.string,
    /**
     * Sugerencia de accesibilidad para ImageBackground.
     */
    imageBackgroundAccessibilityHint: PropTypes.string,
    /**
     * Identificador de pruebas para Image.
     */
    imageTestID: PropTypes.string,
    /**
     * Identificador de pruebas para Image.
     */
    imageAccessibilityLabel: PropTypes.string,
    /**
     * Identificador de pruebas para Image.
     */
    imageAccessibilityHint: PropTypes.string,
};

const defaultPropsCardTrampolin = {
    children: undefined,
    renderBody: false,
    image: undefined,
    onPress: DEFAULT_TYPES.func,
    style: DEFAULT_TYPES.style,
    styleLeft: DEFAULT_TYPES.style,
    stystyleRightle: DEFAULT_TYPES.style,
    dataBody: [],
    imageMask: defaultPropsImageMask.type,
    contentCollapse: undefined,
    close: false,
    onPressClose: DEFAULT_TYPES.func,
    background: false,
    backgroundStyle: DEFAULT_TYPES.style,
    cardItemProps: null,
    imageBackgroundTestID: CARDTRAMPOLIN_STR.imageBackground.testID,
    imageBackgroundAccessibilityLabel: '',
    imageBackgroundAccessibilityHint: '',
    imageTestID: CARDTRAMPOLIN_STR.image.testID,
    imageAccessibilityLabel: '',
    imageAccessibilityHint: '',
};

export {
    propTypesImageMask,
    propTypesContentCollapsed,
    propTypesCardTrampolin,
    defaultPropsCardTrampolin,
    defaultPropsImageMask,
};
