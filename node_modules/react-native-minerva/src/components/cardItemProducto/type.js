import PropTypes from 'prop-types';
import { PRODUCTS } from 'bch-mobile-constants';
import CARDITEMPRODUCTO_STR from './CardItemProductoStr';

const { PRODUCT_TYPE, CARD_TYPE, BRAND } = PRODUCTS;

const CardBodyItemTitlePropTypes = {
    /**
     * Título del producto.
     */
    title: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number,
        PropTypes.arrayOf(PropTypes.string),
    ]),
    /**
     * Estilos del titulo.
     */
    styleTitle: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),
};
const CardBodyItemTitleDefaultProps = {
    title: '',
    styleTitle: {},
};
const CardBodyItemValuePropTypes = {
    /**
     * Indice.
     */
    index: PropTypes.number,
    /**
     * Estilos del value.
     */
    styleValue: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),
    /**
     * Texto que se muestra en el lado derecho de la lista.
     */
    value: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number,
        PropTypes.arrayOf(PropTypes.string),
    ]),
    /**
     * Boleano para destacar el valor de la prop value.
     */
    valueDestacado: PropTypes.bool,
    /**
     * Boleano para mostrar indicador alza y baja al lado del value.
     */
    valueIndicadorShow: PropTypes.bool,
};
const CardBodyItemValueDefaultProps = {
    index: 0,
    styleValue: {},
    value: '',
    valueDestacado: false,
    valueIndicadorShow: false,
};
const CardBodyRightLeftPropTypes = {
    item: PropTypes.shape({
        lineSeparator: PropTypes.bool,
        renderLeft: PropTypes.objectOf(PropTypes.any),
        renderRight: PropTypes.objectOf(PropTypes.any),
        separator: PropTypes.bool,
        styleTitle: CardBodyItemTitlePropTypes.styleTitle,
        styleValue: CardBodyItemValuePropTypes.styleValue,
        title: CardBodyItemTitlePropTypes.title,
        value: CardBodyItemValuePropTypes.value,
        valueDestacado: CardBodyItemValuePropTypes.valueDestacado,
        valueIndicadorShow: CardBodyItemValuePropTypes.valueIndicadorShow,
        valueIndicadorState: PropTypes.bool,
        valueLoading: PropTypes.bool,
    }).isRequired,
    index: PropTypes.number,
    value: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number,
        PropTypes.arrayOf(PropTypes.string),
    ]),
    isArrayOfTwoItems: PropTypes.func.isRequired,
};
const CardBodyRightLeftdefaultProps = {
    index: 0,
    value: '',
};
const CardErrorPropTypes = {
    /**
     * Boleano para definir estado de error en el card.
     */
    error: PropTypes.bool,
    /**
     * Boleano para definir estado de error solo en el contenido.
     */
    errorBody: PropTypes.bool,
    /**
     * Mensaje del error.
     */
    errorText: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.shape({
            text: PropTypes.string,
            props: PropTypes.objectOf(PropTypes.any),
        }),
    ]),
    /**
     * Objecto para configurar el botón de error.
     */
    errorButton: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.bool,
        PropTypes.shape({
            title: PropTypes.string,
            props: PropTypes.objectOf(PropTypes.any),
        }),
    ]),
    /**
     * Renderiza componente cuando error es true.
     */
    renderError: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
};
const CardErrordefaultProps = {
    errorText: '',
    errorButton: false,
};
const tarjetaEstadoTypes = PropTypes.oneOf(
    Object.values(CARDITEMPRODUCTO_STR.estado),
);
const CardHeaderSubTitlePropTypes = {
    /**
     * Nombre del logo de la marca de la tarjeta (Visa o MasterCard).
     */
    marca: PropTypes.string,
    /**
     * Componente que reemplaza el subtitle.
     */
    renderSubtitle: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
    /**
     * Subtítulo del producto.
     */
    subtitle: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number,
        PropTypes.shape({
            badge: PropTypes.string,
            text: PropTypes.string,
            textProps: PropTypes.objectOf(PropTypes.any),
            helperText: PropTypes.shape({
                onPress: PropTypes.func,
                testID: PropTypes.string,
                accessibilityLabel: PropTypes.string,
            }),
        }),
    ]),
    /**
     * Identificador para accesibilidad y pruebas de subtitle.
     */
    subtitleAccessibility: PropTypes.string,
    /**
     * Componente que reemplaza el subtitle con ancho del 100%.
     */
    renderSubtitleCardFullWidth: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.bool,
    ]),
    /**
     * Boleano para enmascarar numero de tarjeta en subtitle.
     */
    subtitleCardNumber: PropTypes.bool,
    /**
     * Nombre del tipo de producto.
     */
    tipoProducto: PropTypes.string,
    /**
     * Nombre del tipo de tarjeta.
     */
    tipoTarjeta: PropTypes.string,
};
const CardHeaderSubTitleDefaultProps = {
    subtitleCardNumber: null,
    marca: '',
    subtitle: '',
    renderSubtitle: false,
    renderSubtitleCardFullWidth: false,
    subtitleAccessibility: '',
    tipoProducto: '',
    tipoTarjeta: '',
};
const CardHeaderTitlePropTypes = {
    /**
     * Título del producto.
     */
    title: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number,
        PropTypes.shape({
            text: PropTypes.string,
            textProps: PropTypes.objectOf(PropTypes.any),
            helperText: PropTypes.shape({
                onPress: PropTypes.func,
                testID: PropTypes.string,
                accessibilityLabel: PropTypes.string,
            }),
        }),
    ]),
    /**
     * Estilos del titulo.
     */
    titleStyle: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),
    /**
     * Si esta definido indica el numero de lineas que puede tener el texto antes de truncarlo.
     */
    titleNumberOfLines: PropTypes.number,
    /**
     * Boleano para enmascarar numero de tarjeta en title.
     */
    titleCardNumber: PropTypes.bool,
    /**
     * Nombre del tipo de producto.
     */
    tipoProducto: PropTypes.string,
    /**
     * Nombre del tipo de tarjeta.
     */
    tipoTarjeta: PropTypes.string,
};
const CardHeaderTitleDefaultProps = {
    title: '',
    titleStyle: {},
    titleNumberOfLines: 1,
    titleCardNumber: null,
    tipoProducto: '',
    tipoTarjeta: '',
};
const CardItemProductoPropTypes = {
    data: PropTypes.shape({
        /**
         * Nombre del icono que se muestra en el lado izquierdo superior en la cabecera del producto. Por defecto representa el logo de la marca de la tarjeta (Visa o MasterCard).
         */
        icon: PropTypes.string,
        /**
         * Nombre del logo de la marca de la tarjeta (Visa o MasterCard).
         */
        marca: PropTypes.oneOf(Object.values(BRAND)),
        /**
         * Renderiza un componente al lado izquierdo del `title` Título del producto.
         */
        renderLeftTitle: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
        /**
         * Renderiza un componente al lado derecho del `title` Título del producto.
         */
        renderRightTitle: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
        /**
         * Título del producto.
         */
        title: CardHeaderTitlePropTypes.title,
        /**
         * Estilos del titulo.
         */
        titleStyle: CardHeaderTitlePropTypes.titleStyle,
        /**
         * Identificador para accesibilidad y pruebas de subtitle.
         */
        subtitleAccessibility:
            CardHeaderSubTitlePropTypes.subtitleAccessibility,
        /**
         * Boleano para enmascarar numero de tarjeta en subtitle.
         */
        subtitleCardNumber: CardHeaderSubTitlePropTypes.subtitleCardNumber,
        /**
         * Boleano para enmascarar numero de tarjeta en title.
         */
        titleCardNumber: CardHeaderTitlePropTypes.titleCardNumber,
        /**
         * Si esta definido indica el numero de lineas que puede tener el texto antes de truncarlo.
         */
        titleNumberOfLines: CardHeaderTitlePropTypes.titleNumberOfLines,
        /**
         * Boleano para darle al titulo altura automatica.
         */
        titleFreeHeight: PropTypes.bool,
        /**
         * Subtítulo del producto.
         */
        subtitle: CardHeaderSubTitlePropTypes.subtitle,
        /**
         * Componente que reemplaza el subtitle.
         */
        renderSubtitle: CardHeaderSubTitlePropTypes.renderSubtitle,
        /**
         * Componente que reemplaza el subtitle con ancho del 100%.
         */
        renderSubtitleCardFullWidth:
            CardHeaderSubTitlePropTypes.renderSubtitleCardFullWidth,
        /**
         * Nombre del tipo de producto.
         */
        tipoProducto: PropTypes.oneOf(Object.values(PRODUCT_TYPE)),
        /**
         * Nombre del tipo de tarjeta.
         */
        tipoTarjeta: PropTypes.oneOf(Object.values(CARD_TYPE)),
        /**
         * Boleano para estado bloqueado.
         */
        tarjetaBloqueada: PropTypes.bool,
        /**
         * Nombre del estado de la tarjeta. El estado se muestra con un <Badge /> en la parte superior derecha del card de Producto.
         */
        tarjetaEstado: tarjetaEstadoTypes,
        /**
         * Acción principal: Función que se ejecuta al presionar el producto.
         */
        actionCard: PropTypes.oneOfType([
            PropTypes.string,
            PropTypes.objectOf(PropTypes.any),
            PropTypes.array,
            PropTypes.func,
        ]),
        /**
         * Objecto para configurar botón que se muestra en el lado derecho superior de la cabecera del producto.
         */
        button: PropTypes.shape({
            title: PropTypes.string,
            props: PropTypes.objectOf(PropTypes.any),
        }),
        /**
         * Listado información en dos columnas que se muestra en el cuerpo del Producto.
         */
        list: PropTypes.arrayOf(CardBodyRightLeftPropTypes.item),
        /**
         * Componente que reemplaza el contenido del card de producto.
         */
        renderShowCard: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
        ...CardErrorPropTypes,
    }).isRequired,
    /**
     * Función para cambiar el estado de collapsed.
     */
    setCollapsed: PropTypes.func,
    /**
     * Boleano para colapsar las card de productos.
     */
    collapsed: PropTypes.bool,
    /**
     * Boleano para desactivar altura minima del card de producto.
     */
    disabledMinHeightCard: PropTypes.bool,
    /**
     * Boleano para mostrar o ocultar icono colapsar cuando collapsed esta definido. Este icono se muestra en la parte superior derecho de la card de productos.
     */
    collapsedButton: PropTypes.bool,
    /**
     * Renderiza un componente en el area inferior de las Card de Productos.
     */
    renderFooter: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
    /**
     * Renderiza un componente en el area del contenido de la Card de Productos.
     */
    renderBody: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
    /**
     * Identificador de pruebas para el Card.
     */
    testID: PropTypes.string,
    /**
     * Identificador de accesibilidad para el Card.
     */
    accessibilityLabel: PropTypes.string,
    /**
     * Sugerencia de accesibilidad para el Card.
     */
    accessibilityHint: PropTypes.string,
    /**
     * Controla el evento touch del CardBody dentro del Card de productos.
     */
    pointerEventsCardBody: PropTypes.oneOf(['none', 'auto', 'box-none']),
    /**
     * Boleano para mostrar o ocultar la sombra del Card de productos.
     */
    showShadow: PropTypes.bool,
};
const CardItemProductoDefaultProps = {
    setCollapsed: () => null,
    collapsed: undefined,
    disabledMinHeightCard: false,
    renderBody: false,
    renderFooter: false,
    accessibilityLabel: '',
    accessibilityHint: '',
    testID: '',
    collapsedButton: true,
    pointerEventsCardBody: 'none',
    showShadow: false,
};

export {
    CardBodyItemTitlePropTypes,
    CardBodyItemTitleDefaultProps,
    CardBodyItemValuePropTypes,
    CardBodyItemValueDefaultProps,
    CardBodyRightLeftPropTypes,
    CardBodyRightLeftdefaultProps,
    CardErrorPropTypes,
    CardErrordefaultProps,
    tarjetaEstadoTypes,
    CardHeaderSubTitlePropTypes,
    CardHeaderSubTitleDefaultProps,
    CardHeaderTitlePropTypes,
    CardHeaderTitleDefaultProps,
    CardItemProductoPropTypes,
    CardItemProductoDefaultProps,
};
