import React, { memo } from 'react';
import {
    CardBodyRightLeftPropTypes,
    CardBodyRightLeftdefaultProps,
} from '../../type';
import { HelperStyle, View, Skeleton } from '../../../../index';
import CardIndicatorIconArrow from './CardIndicatorIconArrow';
import CardBodyItemTitle from './CardBodyItemTitle';
import CardBodyItemValue from './CardBodyItemValue';

/**
 * Componente area del contenido derecho del card de Productos.
 *
 * @component
 */
const CardBodyRight = ({ item, index, isArrayOfTwoItems }) => {
    const {
        value,
        valueLoading,
        valueDestacado,
        valueIndicadorShow,
        valueIndicadorState,
        styleValue,
        title,
        styleTitle,
        renderRight,
    } = item;
    if (!value && renderRight) return renderRight;
    if (isArrayOfTwoItems(title)) {
        return <CardBodyItemTitle title={title[1]} styleTitle={styleTitle} />;
    }
    if (valueLoading) {
        return <Skeleton numberOfItems={1} style={HelperStyle.mb_0} />;
    }
    if (valueIndicadorShow) {
        if (isArrayOfTwoItems(value)) {
            return (
                <View style={[HelperStyle.flx_row, HelperStyle.as_c]}>
                    <CardIndicatorIconArrow
                        valueIndicadorState={valueIndicadorState}
                    />
                    <CardBodyItemValue
                        value={value[1]}
                        index={index}
                        styleValue={styleValue}
                        valueIndicadorShow={valueIndicadorShow}
                    />
                </View>
            );
        }
        return (
            <View style={[HelperStyle.flx_row, HelperStyle.as_c]}>
                <CardIndicatorIconArrow
                    valueIndicadorState={valueIndicadorState}
                />
                <CardBodyItemValue
                    value={value}
                    index={index}
                    valueDestacado={valueDestacado}
                    styleValue={styleValue}
                    valueIndicadorShow={valueIndicadorShow}
                />
            </View>
        );
    }
    if (isArrayOfTwoItems(value)) {
        return (
            <CardBodyItemValue
                value={value[1]}
                index={index}
                styleValue={styleValue}
            />
        );
    }
    return (
        <CardBodyItemValue
            value={value}
            index={index}
            valueDestacado={valueDestacado}
            styleValue={styleValue}
        />
    );
};

CardBodyRight.propTypes = CardBodyRightLeftPropTypes;
CardBodyRight.defaultProps = CardBodyRightLeftdefaultProps;

export default memo(CardBodyRight);
