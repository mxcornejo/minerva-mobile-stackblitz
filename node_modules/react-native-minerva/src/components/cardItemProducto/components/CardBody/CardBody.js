import React, { memo } from 'react';
import { isBoolean, isFunction, isArray, size } from 'lodash';
import {
    Text,
    HelperStyle,
    CardItem,
    Right,
    View,
    Collapsible,
    ListItem,
    Left,
    Validate,
    ProgressBar,
    MapList,
} from '../../../../index';
import { isCardBgWhite } from '../../utils';
import {
    CardItemProductoPropTypes,
    CardItemProductoDefaultProps,
} from '../../type';
import Style from '../../style';
import CardBodyRight from './CardBodyRight';
import CardBodyLeft from './CardBodyLeft';

/**
 * Componente area del contenido del card de Productos.
 *
 * @component
 */
const CardBody = ({
    renderFooter,
    data,
    collapsed,
    renderBody,
    pointerEventsCardBody,
}) => {
    const { tipoProducto } = data;

    /*
     * Renderiza título de separación del detalle del card body (list).
     */
    const renderItemSeparator = (item) => (
        <ListItem itemDivider small accessible={false}>
            <Text
                bold
                numberOfLines={1}
                ellipsizeMode="tail"
                style={HelperStyle.gray_dark}
                accessibilityLabel={item}
                testID={item}
            >
                {item}
            </Text>
        </ListItem>
    );

    const isArrayOfTwoItems = (item) => isArray(item) && size(item) === 2;

    /*
     * Si un item contiene: { lineSeparator: true }. se muestra la línea de separación.
     */
    const renderLineSeparator = () => (
        <View
            style={[
                HelperStyle.flx_i,
                HelperStyle.mh_4,
                HelperStyle.mv_2,
                HelperStyle.bc_gray_transparent,
                Style.lineSeparatorStyle,
            ]}
        />
    );

    /**
     * Renderiza el item del detalle del card body (list).
     */
    const renderItem = ({ item, index }) => {
        const { progressBar } = item;
        if (Validate.isElement(item) || isFunction(item)) {
            return Validate.render(item);
        }
        if (progressBar) {
            return (
                <View
                    style={[
                        HelperStyle.ph_4,
                        HelperStyle.pt_1,
                        HelperStyle.pb_2,
                    ]}
                >
                    <ProgressBar {...progressBar} />
                </View>
            );
        }
        if (item.separator) return renderItemSeparator(item.title);
        return (
            <>
                <ListItem noBorder ammounts small accessible={false}>
                    <Left>
                        <CardBodyLeft
                            item={item}
                            index={index}
                            isArrayOfTwoItems={isArrayOfTwoItems}
                        />
                    </Left>
                    <Right>
                        <CardBodyRight
                            item={item}
                            index={index}
                            isArrayOfTwoItems={isArrayOfTwoItems}
                        />
                    </Right>
                </ListItem>
                {item.lineSeparator && renderLineSeparator()}
            </>
        );
    };

    /**
     * Obtiene índice para el flatlist del detalle del card body (list).
     */
    const keyExtractor = (item, index) => index.toString();

    /**
     * Renderiza el body del carditem.
     */
    const handlerRenderBody = () => {
        if (renderBody) return Validate.render(renderBody);
        return (
            <View
                style={HelperStyle.flx_i}
                pointerEvents={pointerEventsCardBody}
            >
                <MapList
                    data={data.list}
                    renderItem={renderItem}
                    keyExtractor={keyExtractor}
                    style={Validate.style(
                        !isBoolean(collapsed),
                        HelperStyle.jc_fs,
                    )}
                />
            </View>
        );
    };

    /**
     * Renderiza el footer del carditem.
     */
    const handlerRenderFooter = () => {
        if (renderFooter) return Validate.render(renderFooter);
        return null;
    };

    /**
     * Renderiza el cardItem.
     */
    const renderCardItem = () => {
        const borderStyleCardBgWhite = [
            HelperStyle.btw_1,
            HelperStyle.bc_gray_lighter,
        ];
        return (
            <CardItem
                body
                small
                style={[
                    HelperStyle.pt_2,
                    HelperStyle.pb_3,
                    HelperStyle.pr_0,
                    HelperStyle.pl_0,
                    Validate.style(
                        isCardBgWhite(tipoProducto),
                        borderStyleCardBgWhite,
                    ),
                ]}
                accessible={false}
            >
                {handlerRenderBody()}
                {handlerRenderFooter()}
            </CardItem>
        );
    };

    /**
     * Renderiza el cardItem con colapsar.
     */
    if (isBoolean(collapsed)) {
        return (
            <Collapsible layoutAnimation collapsed={collapsed} duration={300}>
                {renderCardItem()}
            </Collapsible>
        );
    }

    return renderCardItem();
};

CardBody.propTypes = CardItemProductoPropTypes;
CardBody.defaultProps = CardItemProductoDefaultProps;

export default memo(CardBody);
