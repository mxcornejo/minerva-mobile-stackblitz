import React, { memo } from 'react';
import { isObject, isString, isBoolean } from 'lodash';
import {
    HelperStyle,
    View,
    Text,
    Button,
    Collapsible,
    Validate,
} from '../../../index';
import { isCardBgWhite } from '../utils';
import { CardErrorPropTypes, CardErrordefaultProps } from '../type';

/**
 * Componente estado de error del producto.
 *
 * @component
 */
const CardError = ({ data, collapsed }) => {
    const { errorText, errorButton, renderError, tipoProducto } = data;

    const handlerErrorText = () => {
        if (isString(errorText)) {
            return (
                <Text
                    smaller
                    style={HelperStyle.ta_c}
                    accessibilityLabel={errorText}
                    testID={errorText}
                >
                    {errorText}
                </Text>
            );
        }
        if (isObject(errorText)) {
            return (
                <Text
                    smaller
                    {...errorText?.props}
                    style={[HelperStyle.ta_c, errorText?.props?.style]}
                >
                    {errorText?.text}
                </Text>
            );
        }
        return null;
    };

    const handlerErrorButton = () => {
        if (isObject(errorButton)) {
            const { title } = errorButton;
            return (
                <Button
                    style={HelperStyle.as_c}
                    primary
                    small
                    iconName="icon-bch-circle-refresh"
                    accessibilityLabel={title}
                    testID={title}
                    {...errorButton.props}
                >
                    <Text>{title}</Text>
                </Button>
            );
        }
        return null;
    };

    if (renderError) return renderError();

    const borderStyleCardBgWhite = [
        HelperStyle.btw_1,
        HelperStyle.bc_gray_lighter,
    ];
    const renderCardItem = () => (
        <View
            style={[
                HelperStyle.pa_4,
                HelperStyle.jc_c,
                HelperStyle.flx_i,
                Validate.style(
                    isCardBgWhite(tipoProducto),
                    borderStyleCardBgWhite,
                ),
            ]}
        >
            {handlerErrorText()}
            {handlerErrorButton()}
        </View>
    );

    /**
     * Renderiza el cardItem con colapsar.
     */
    if (isBoolean(collapsed)) {
        return (
            <Collapsible layoutAnimation collapsed={collapsed} duration={300}>
                {renderCardItem()}
            </Collapsible>
        );
    }

    return renderCardItem();
};

CardError.propTypes = CardErrorPropTypes;
CardError.defaultProps = CardErrordefaultProps;

export default memo(CardError);
