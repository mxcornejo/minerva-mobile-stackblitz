import React, { memo } from 'react';
import { ImageBackground } from 'react-native';
import { isBoolean } from 'lodash';
import Images from 'bch-assets';
import {
    Text,
    HelperStyle,
    CardItem,
    Button,
    View,
    LinearGradient,
    Validate,
} from '../../../../index';
import Style from '../../style';
import {
    getBgGradientTipoProducto,
    getIsBloqueado,
    isProductosMiInversion,
} from '../../utils';
import {
    CardItemProductoPropTypes,
    CardItemProductoDefaultProps,
} from '../../type';
import IconosMiInversion from './IconosMiInversion';
import CardState from './CardState';
import LogoMarcaTarjeta from './LogoMarcaTarjeta';
import CardHeaderTitle from './CardHeaderTitle';
import ButtonCollapse from './ButtonCollapse';
import CardHeaderSubTitle from './CardHeaderSubTitle';

/**
 * Componente area del encabezado del card de Productos.
 *
 * @component
 */
const CardHeader = ({ setCollapsed, data, collapsed, collapsedButton }) => {
    const {
        components: {
            cardItemProducto: { bloqueado, bgCardHeaderMiInversion },
        },
    } = Images;
    const {
        icon,
        tipoProducto,
        tipoTarjeta,
        marca,
        title,
        titleStyle,
        titleNumberOfLines,
        titleFreeHeight,
        button,
        renderSubtitle,
        subtitle,
        subtitleAccessibility,
        renderLeftTitle,
        renderRightTitle,
        renderSubtitleCardFullWidth,
        tarjetaBloqueada,
        tarjetaEstado,
        titleCardNumber,
        subtitleCardNumber,
        subtitleFullWidth,
    } = data;

    const isBloqueado = getIsBloqueado(tarjetaBloqueada, tarjetaEstado);
    const isBgMiInversion = isProductosMiInversion(tipoProducto);
    const condicionalSubtitleFullWidth =
        renderSubtitleCardFullWidth || subtitleFullWidth;

    /*
     * Renderiza la marca de la Tarjeta de Crédito.
     */
    const renderIconTitleCard = () => (
        <View style={[HelperStyle.pr_2, HelperStyle.jc_c, HelperStyle.ai_fs]}>
            <LogoMarcaTarjeta
                icon={icon}
                marca={marca}
                tipoTarjeta={tipoTarjeta}
            />
        </View>
    );

    /*
     * Renderiza el campo title.
     * Caso 1, cuando titleCardNumber esta definido mostrar (true/false) el componente para enmascara el numero de la tarjeta
     * Caso 2, caso contrario renderiza el title en el componente H4
     */
    const renderTitleCard = () => (
        <CardHeaderTitle
            title={title}
            titleStyle={titleStyle}
            titleNumberOfLines={titleNumberOfLines}
            titleCardNumber={titleCardNumber}
            tipoProducto={tipoProducto}
            tipoTarjeta={tipoTarjeta}
        />
    );

    /*
     * Renderiza un boton estilo x al lado superior derecho de la card.
     */
    const renderRightHeaderButton = () => {
        if (button) {
            return (
                <Button {...button.props}>
                    <Text
                        numberOfLines={1}
                        ellipsizeMode="tail"
                        accessibilityLabel={button.title}
                        testID={button.title}
                    >
                        {button.title}
                    </Text>
                </Button>
            );
        }
        return null;
    };

    /*
     * Renderiza la capa o imagen de fondo para cuando una Card está bloqueada.
     * Funcionará si tarjetaBloqueada: true.
     */
    const renderImageBackground = () => {
        if (isBloqueado) {
            return (
                <ImageBackground
                    source={bloqueado}
                    style={Style.imageBackgroundTop}
                />
            );
        }
        if (isBgMiInversion) {
            return (
                <ImageBackground
                    source={bgCardHeaderMiInversion}
                    style={Style.imageBackgroundTop}
                />
            );
        }
        return null;
    };

    /*
     * Renderiza un texto que dice Bloqueado.
     * Funcionará si tarjetaBloqueada: true.
     */
    const renderBadgeTarjetaEstado = () => (
        <CardState tarjetaEstado={tarjetaEstado} />
    );

    /*
     * Renderiza un boton colapsable ubicado al lado superior derecho de la card.
     */
    const renderRightHeaderButtonCollapse = () => {
        const renderCollapsedButton = collapsedButton && isBoolean(collapsed);
        if (renderCollapsedButton) {
            return (
                <ButtonCollapse
                    tipoProducto={tipoProducto}
                    setCollapsed={setCollapsed}
                    collapsed={collapsed}
                    collapsedButton={collapsedButton}
                />
            );
        }
        return null;
    };

    /*
     * Renderiza el campo subtitle.
     * Caso 1, cuando es TC (data.marca este definida) enmascara el numero de la tarjeta (CardNumberMask)
     * Caso 2, cuando subtitleCardNumber esta definido mostrar (true/false) el componente para enmascara el numero de la tarjeta
     * Caso 3, cuando no es TC, mostrará lo que se envía.
     */
    const renderSubtitleCard = () => (
        <CardHeaderSubTitle
            marca={marca}
            renderSubtitle={renderSubtitle}
            subtitle={subtitle}
            subtitleAccessibility={subtitleAccessibility}
            renderSubtitleCardFullWidth={renderSubtitleCardFullWidth}
            subtitleCardNumber={subtitleCardNumber}
            tipoProducto={tipoProducto}
            tipoTarjeta={tipoTarjeta}
        />
    );

    /*
     * Renderiza componente en el contenido izquierdo del card header
     */
    const handlerRenderLeft = () => {
        if (renderLeftTitle) {
            return (
                <View
                    style={[
                        HelperStyle.mr_2,
                        HelperStyle.jc_c,
                        Style.heightTitleCard,
                    ]}
                >
                    {Validate.render(renderLeftTitle)}
                </View>
            );
        }
        return null;
    };

    /*
     * Renderiza el contenido central del card header
     */
    const handlerRenderBody = () => (
        <View style={HelperStyle.flx_i}>
            <View
                style={[
                    Style.cardItemHeaderTitleContainer,
                    Validate.style(!titleFreeHeight, Style.heightTitleCard),
                ]}
            >
                {(icon || marca) && renderIconTitleCard()}
                {renderTitleCard()}
            </View>
            {!condicionalSubtitleFullWidth && subtitle && (
                <View style={[HelperStyle.flx_i, HelperStyle.mt_1]}>
                    {renderSubtitleCard()}
                </View>
            )}
        </View>
    );

    const renderIconoMiInversion = () =>
        isProductosMiInversion(tipoProducto) && (
            <IconosMiInversion tipoProducto={tipoProducto} />
        );

    /*
     * Condiciona el renderiza del tipo de button del contenido derecho del card header
     * Caso 1, si tarjetaBloqueada esta definido renderiza button para tarjetas bloqueadas
     * Caso 2, si data.button esta definido renderiza button
     * Caso 3, si las propiedades de "collapse" estan definidas renderiza button con icono de colapsar
     */
    const handlerRenderRight = () => {
        if (renderRightTitle) {
            return <View>{Validate.render(renderRightTitle)}</View>;
        }
        if (tarjetaEstado || tarjetaBloqueada) {
            return <View>{renderBadgeTarjetaEstado()}</View>;
        }
        return (
            <View style={HelperStyle.flx_row}>
                {renderRightHeaderButton()}
                {renderRightHeaderButtonCollapse()}
            </View>
        );
    };

    /*
     * Renderiza el contenido del card header
     */
    const renderContent = () => (
        <View style={Style.headerContent}>
            <View style={HelperStyle.flx_row}>
                {handlerRenderLeft()}
                {handlerRenderBody()}
                {handlerRenderRight()}
                {renderIconoMiInversion()}
            </View>
            {condicionalSubtitleFullWidth && (
                <View style={[HelperStyle.flx_i, HelperStyle.mt_1]}>
                    {renderSubtitleCard()}
                </View>
            )}
        </View>
    );

    /*
     * Sí collapsed esta definida el card header tendra bordes rendondeados en la parte inferior
     */
    const borderBottomRadius = Validate.style(collapsed === true, [
        HelperStyle.bblr_3,
        HelperStyle.bbrr_3,
    ]);

    return (
        <CardItem header small style={Style.cardItemHeader}>
            <LinearGradient
                start={{ x: 0, y: 0 }}
                end={{ x: 1, y: 0 }}
                locations={[0.0, 0.99]}
                colors={getBgGradientTipoProducto({
                    tipoProducto,
                    tipoTarjeta,
                })}
                style={[Style.LinearGradientStyle, borderBottomRadius]}
            >
                {renderImageBackground()}
                {renderContent()}
            </LinearGradient>
        </CardItem>
    );
};

CardHeader.propTypes = CardItemProductoPropTypes;
CardHeader.defaultProps = CardItemProductoDefaultProps;

export default memo(CardHeader);
