import React, { memo } from 'react';
import { TouchableWithoutFeedback } from 'react-native';
import { Card } from 'native-base';
import { HelperStyle, Validate } from '../../util/index';
import Style from './style';
import CardHeader from './components/CardHeader/CardHeader';
import CardBody from './components/CardBody/CardBody';
import CardError from './components/CardError';
import {
    CardItemProductoPropTypes,
    CardItemProductoDefaultProps,
} from './type';

/**
 * Componente Card de Productos.
 *
 * @component
 */
const CardItemProducto = (props) => {
    const {
        data,
        collapsed,
        disabledMinHeightCard,
        style,
        testID,
        accessibilityLabel,
        accessibilityHint,
        showShadow,
        renderFooter,
        renderBody,
        pointerEventsCardBody,
        setCollapsed,
        collapsedButton,
    } = props;
    const { actionCard, error, renderShowCard, errorBody } = data;

    /*
     * Renderiza contenido de la card.
     */
    const renderContentType = () => {
        if (errorBody) {
            return (
                <>
                    <CardHeader
                        setCollapsed={setCollapsed}
                        data={data}
                        collapsed={collapsed}
                        collapsedButton={collapsedButton}
                    />
                    <CardError data={data} collapsed={collapsed} />
                </>
            );
        }
        if (error) {
            return <CardError data={data} collapsed={collapsed} />;
        }
        if (renderShowCard) return Validate.render(renderShowCard);
        return (
            <>
                <CardHeader
                    setCollapsed={setCollapsed}
                    data={data}
                    collapsed={collapsed}
                    collapsedButton={collapsedButton}
                />
                <CardBody
                    renderFooter={renderFooter}
                    data={data}
                    collapsed={collapsed}
                    renderBody={renderBody}
                    pointerEventsCardBody={pointerEventsCardBody}
                />
            </>
        );
    };

    /*
     * Se válida la sombra de las cards.
     */
    const validarShadow = () => showShadow || data.actionCard;

    /*
     * Renderiza card.
     */
    const renderProducto = () => {
        const marginErrorGeneral = error && {
            ...HelperStyle.mr_4,
            ...HelperStyle.ml_4,
        };
        const shadow = validarShadow();
        const alturaCard = !collapsed && Style.minHeightCard;
        return (
            <Card
                cardList
                style={[
                    HelperStyle.flx_i,
                    !disabledMinHeightCard && alturaCard,
                    marginErrorGeneral,
                    style,
                ]}
                accessibilityLabel={accessibilityLabel}
                accessibilityHint={accessibilityHint}
                testID={testID}
                noShadow={!shadow}
            >
                {renderContentType()}
            </Card>
        );
    };

    /*
     * Envuelve el card en un Touchable para ejecutar una acción sobre el card.
     * Si actionCard esta definido.
     * Si renderShowCard no esta definido.
     */
    if (actionCard && !renderShowCard) {
        return (
            <TouchableWithoutFeedback
                style={HelperStyle.flx_i}
                {...data.actionCard}
                accessible={false}
            >
                {renderProducto()}
            </TouchableWithoutFeedback>
        );
    }
    return renderProducto();
};

CardItemProducto.propTypes = CardItemProductoPropTypes;
CardItemProducto.defaultProps = CardItemProductoDefaultProps;

export default memo(CardItemProducto);
