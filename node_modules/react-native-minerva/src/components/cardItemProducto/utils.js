import { PRODUCTS } from 'bch-mobile-constants';
import { isEmpty } from 'lodash';
import {
    HelperStyle,
    HelperOptions,
    ColorsBCH,
    ColorsBEC,
    ColorsCCH,
} from '../../index';

const {
    PRODUCT_TYPE: {
        PRODUCT_CC,
        PRODUCT_CC_ME,
        PRODUCT_LC,
        PRODUCT_CV,
        PRODUCT_TC,
        PRODUCT_CF,
        PRODUCT_CA,
        PRODUCT_CA_MI_INVERSION,
        PRODUCT_DAP,
        PRODUCT_BILLETERA,
        PRODUCT_FFMM,
        PRODUCT_ACCIONES_NACIONALES,
        PRODUCT_ACCIONES_INTERNACIONALES,
        PRODUCT_ETF,
        PRODUCT_COMPRA_DOLARES,
        PRODUCT_COMPRA_VENTA_DOLARES,
        PRODUCT_FONDOS_INVERSION,
        PRODUCT_APV,
        PRODUCT_OTROS,
        OTROS_BANCOS,
        PRODUCT_PERSHING,
    },
    CARD_TYPE,
} = PRODUCTS;
const { DEFAULT, GOLD, SILVER, BLACK, BRAND, GRAY, WHITE } = CARD_TYPE;

const colorBrand = {
    BCH: [ColorsBCH.brand_light, ColorsBCH.brand_dark],
    BEC: [ColorsBEC.brand_light, ColorsBEC.brand_dark],
    CCH: [ColorsCCH.brand_light, ColorsCCH.brand_dark],
};

const configTipoTarjeta = {
    DEFAULT: {
        BCH: colorBrand.BCH,
        BEC: colorBrand.BEC,
        CCH: colorBrand.CCH,
    },
    DEFAULT_BCH: colorBrand.BCH,
    DEFAULT_BEC: colorBrand.BEC,
    DEFAULT_CCH: colorBrand.CCH,
};

const productosMiInversion = [
    PRODUCT_DAP,
    PRODUCT_CA_MI_INVERSION,
    PRODUCT_BILLETERA,
    PRODUCT_FFMM,
    PRODUCT_ACCIONES_NACIONALES,
    PRODUCT_ACCIONES_INTERNACIONALES,
    PRODUCT_ETF,
    PRODUCT_COMPRA_DOLARES,
    PRODUCT_COMPRA_VENTA_DOLARES,
    PRODUCT_FONDOS_INVERSION,
    PRODUCT_APV,
    PRODUCT_OTROS,
    PRODUCT_PERSHING,
];

const cardsBackgroundWhite = [PRODUCT_LC, OTROS_BANCOS];

/**
 * Obtener color de fondo para el header de la card por el tipoTarjeta.
 */
const getBgGradientTipoTarjeta = (tipoTarjeta = GRAY) => {
    const colorFondo = configTipoTarjeta[tipoTarjeta];
    switch (tipoTarjeta) {
        case DEFAULT:
            return configTipoTarjeta.DEFAULT[HelperOptions.brandName];
        case GOLD:
            return [HelperStyle.gold_light.color, HelperStyle.gold_dark.color];
        case SILVER:
            return [
                HelperStyle.silver_light.color,
                HelperStyle.silver_dark.color,
            ];
        case BLACK:
            return [HelperStyle.dark_light.color, HelperStyle.dark_dark.color];
        case GRAY:
            return [HelperStyle.gray_background.color, HelperStyle.white.color];
        case WHITE:
            return [HelperStyle.white.color, HelperStyle.white.color];
        case BRAND:
            return [
                HelperStyle.brand_light.color,
                HelperStyle.brand_dark.color,
            ];
        default:
            return colorFondo;
    }
};

/**
 * Obtener color de fondo para el header de la card por el tipoProducto o tipoTarjeta.
 */
const getBgGradientTipoProducto = (props) => {
    const { tipoProducto, tipoTarjeta } = props;
    const configWhite = [HelperStyle.white.color, HelperStyle.white.color];
    const configBrand = [
        HelperStyle.brand_light.color,
        HelperStyle.brand_dark.color,
    ];
    const configGray = [
        HelperStyle.gray_background.color,
        HelperStyle.white.color,
    ];
    const configProductosMiInversion = [
        HelperStyle.primary_background.color,
        HelperStyle.primary_background.color,
    ];
    const cardsBackgroundGradientBrand = [
        PRODUCT_CC,
        PRODUCT_CC_ME,
        PRODUCT_CV,
        PRODUCT_CA,
    ];
    let colorFondo = configWhite;

    if (tipoProducto) {
        if (productosMiInversion.includes(tipoProducto)) {
            colorFondo = configProductosMiInversion;
        }
        if (cardsBackgroundWhite.includes(tipoProducto)) {
            colorFondo = configWhite;
        }
        if (cardsBackgroundGradientBrand.includes(tipoProducto)) {
            colorFondo = configBrand;
        }
        if (tipoProducto === PRODUCT_TC || tipoProducto === PRODUCT_CF) {
            colorFondo = configGray;
        }
    }
    if (
        tipoTarjeta &&
        (cardsBackgroundGradientBrand.includes(tipoProducto) ||
            tipoProducto === PRODUCT_TC)
    ) {
        colorFondo = getBgGradientTipoTarjeta(tipoTarjeta);
    }
    return colorFondo;
};

const isCardBgWhite = (tipoProducto) =>
    cardsBackgroundWhite.includes(tipoProducto);

const isCuentaFan = (tipoProducto) => tipoProducto === PRODUCT_CF;

/**
 * Tarjetas de color de fondo oscuro.
 */
const isTipoTarjetaDark = [BLACK, BRAND, DEFAULT, GOLD, SILVER];

/**
 * El isTextWhite es true si:
 * tipoTarjeta no existe en isTipoTarjetaDark.
 */
const isTextWhite = (tipoTarjeta) => isTipoTarjetaDark.includes(tipoTarjeta);
const isOtrosBancos = (tipoProducto) => tipoProducto === OTROS_BANCOS;
const isProductosMiInversion = (tipoProducto) =>
    productosMiInversion.includes(tipoProducto);
const getIsBloqueado = (tarjetaBloqueada, tarjetaEstado) => {
    const estadosBloqueado = ['bloqueado', 'permanente', 'temporal'];
    if (tarjetaBloqueada || estadosBloqueado.indexOf(tarjetaEstado) >= 0) {
        return true;
    }
    return false;
};

/**
 * El isTextHeaderWhite es true si el producto:
 * si tipoProducto es PRODUCT_CF (cuenta fan)
 * si tipoProducto es PRODUCT_LC (lÃ­nea de credito)
 * si tipoProducto no esta definido
 * si tipoProducto es PRODUCT_TC (Tarjeta de credito) y no esta definido en isTextWhite.
 */
const isTextHeaderWhite = (tipoProducto, tipoTarjeta) =>
    isCardBgWhite(tipoProducto) ||
    isCuentaFan(tipoProducto) ||
    isOtrosBancos(tipoProducto) ||
    isProductosMiInversion(tipoProducto) ||
    isEmpty(tipoProducto) ||
    (tipoProducto === PRODUCT_TC &&
        (!tipoTarjeta || !isTextWhite(tipoTarjeta)));
export {
    getBgGradientTipoTarjeta,
    getBgGradientTipoProducto,
    getIsBloqueado,
    isCardBgWhite,
    isCuentaFan,
    isTextWhite,
    isOtrosBancos,
    isProductosMiInversion,
    isTextHeaderWhite,
};
