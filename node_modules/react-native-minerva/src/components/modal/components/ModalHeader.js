import React, { memo } from 'react';
import { isObject, has, isString } from 'lodash';
import {
    View,
    Icon,
    H2,
    HelperStyle,
    LottieIcon,
    Validate,
} from '../../../index';
import { modalPropTypes, modalDefaultProps } from '../type';
import LOTTIEICON_STR from '../../lottieIcon/LottieIconStr';

const ModalHeader = ({
    icon,
    iconAccessibilityLabel,
    lottieIcon,
    lottieIconAccessibilityLabel,
    lottieIconAccessibilityHint,
    renderHeader,
    styleTextModalDark,
    title,
    titleAccessibilityLabel,
    titleAccessibilityHint,
    titleTestID,
    titleStyle,
}) => {
    const renderlottieIcon = () => {
        if (isObject(lottieIcon) && has(lottieIcon, 'type')) {
            return (
                <LottieIcon
                    size={LOTTIEICON_STR.size.small}
                    accessible
                    {...lottieIcon}
                />
            );
        }
        if (lottieIcon) {
            return (
                <LottieIcon
                    type={lottieIcon}
                    accessible
                    accessibilityLabel={lottieIconAccessibilityLabel}
                    accessibilityHint={lottieIconAccessibilityLabel}
                    testID={lottieIconAccessibilityLabel}
                    size={LOTTIEICON_STR.size.small}
                />
            );
        }
        return null;
    };

    const renderIcon = () => {
        const { color, style, accessibilityLabel, accessibilityHint, testID } =
            icon;
        if (isObject(icon) && has(icon, 'name')) {
            return (
                <Icon
                    {...icon}
                    style={[
                        styleTextModalDark,
                        color,
                        HelperStyle.mb_4,
                        HelperStyle.as_c,
                        HelperStyle.fs_8,
                        style,
                    ]}
                    accessible
                    accessibilityLabel={Validate.safeLabel(
                        accessibilityLabel,
                        iconAccessibilityLabel,
                    )}
                    accessibilityHint={Validate.safeLabel(
                        accessibilityHint,
                        lottieIconAccessibilityHint,
                    )}
                    testID={testID || iconAccessibilityLabel}
                />
            );
        }
        if (isString(icon)) {
            return (
                <Icon
                    name={icon}
                    style={[
                        HelperStyle.mb_4,
                        HelperStyle.as_c,
                        HelperStyle.fs_8,
                        styleTextModalDark,
                    ]}
                    accessible
                    accessibilityLabel={iconAccessibilityLabel}
                    accessibilityHint={lottieIconAccessibilityHint}
                    testID={iconAccessibilityLabel}
                />
            );
        }
        return null;
    };

    const renderTitle = () => {
        const typesLottieIcon = ['success', 'warning', 'danger', 'info'];
        return (
            <H2
                style={[
                    HelperStyle.brand,
                    typesLottieIcon.includes(lottieIcon) &&
                        HelperStyle[lottieIcon],
                    lottieIcon && HelperStyle.ta_c,
                    titleStyle,
                    styleTextModalDark,
                ]}
                accessible
                accessibilityLabel={Validate.safeLabel(
                    titleAccessibilityLabel,
                    title,
                )}
                accessibilityHint={titleAccessibilityHint}
                testID={Validate.safeLabel(titleTestID, title)}
            >
                {title}
            </H2>
        );
    };

    if (renderHeader) return Validate.render(renderHeader);

    return (
        <View>
            {renderlottieIcon()}
            {renderIcon()}
            {Validate.render(renderTitle, title)}
        </View>
    );
};

ModalHeader.propTypes = {
    icon: modalPropTypes.icon,
    iconAccessibilityLabel: modalPropTypes.iconAccessibilityLabel,
    lottieIcon: modalPropTypes.lottieIcon,
    lottieIconAccessibilityLabel: modalPropTypes.lottieIconAccessibilityLabel,
    lottieIconAccessibilityHint: modalPropTypes.lottieIconAccessibilityHint,
    renderHeader: modalPropTypes.renderHeader,
    styleTextModalDark: modalPropTypes.style,
    title: modalPropTypes.title,
    titleAccessibilityLabel: modalPropTypes.titleAccessibilityLabel,
    titleAccessibilityHint: modalPropTypes.titleAccessibilityHint,
    titleTestID: modalPropTypes.titleTestID,
    titleStyle: modalPropTypes.titleStyle,
};
ModalHeader.defaultProps = {
    icon: modalDefaultProps.icon,
    iconAccessibilityLabel: modalDefaultProps.iconAccessibilityLabel,
    lottieIcon: modalDefaultProps.lottieIcon,
    lottieIconAccessibilityLabel:
        modalDefaultProps.lottieIconAccessibilityLabel,
    lottieIconAccessibilityHint: modalDefaultProps.lottieIconAccessibilityHint,
    renderHeader: modalDefaultProps.renderHeader,
    title: modalDefaultProps.title,
    titleAccessibilityLabel: modalDefaultProps.titleAccessibilityLabel,
    titleAccessibilityHint: modalDefaultProps.titleAccessibilityHint,
    titleTestID: modalDefaultProps.titleTestID,
    titleStyle: modalDefaultProps.titleStyle,
    styleTextModalDark: modalDefaultProps.style,
};

export default memo(ModalHeader);
