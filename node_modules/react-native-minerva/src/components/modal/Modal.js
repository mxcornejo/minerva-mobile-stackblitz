import React, { memo, useState, useRef, useEffect } from 'react';
import { ScrollView, StatusBar, Platform } from 'react-native';
import Modal from 'react-native-modal';
import { View } from 'native-base';
import { HelperStyle, dimensions, DropdownAlert, Validate } from '../../index';
import Style from './style';
import ModalBody from './components/ModalBody';
import ModalFooter from './components/ModalFooter';
import ModalHeader from './components/ModalHeader';
import { modalPropTypes, modalDefaultProps } from './type';
import ModalCampaign from './components/ModalCampaign';
import ModalTop from './components/ModalTop';

/**
 * Componente Modal. Extiende de react-native-modal.
 *
 * @component
 */
const ModalBCH = (props) => {
    const scrollViewRef = useRef(null);
    const [scrollOffset, setScrollOffset] = useState(0);
    const [scrollViewHeight, setScrollViewHeight] = useState(0);
    const {
        buttonsGroup,
        children,
        content,
        contentStyle,
        dropDownAlert,
        footerStyle,
        headerStyle,
        icon,
        iconAccessibilityLabel,
        lottieIcon,
        lottieIconAccessibilityLabel,
        renderContent,
        renderFooter,
        renderHeader,
        renderTop,
        setVisible,
        style,
        title,
        titleStyle,
        visible,
        onModalWillHide,
        onModalWillShow,
        statusBarBackgroundColorOnShowModal,
        statusBarBackgroundColorOnHideModal,
        modalDark,
        modalCampaign,
        backgroundModalSource,
        noPadding,
        swipeDirection,
        ...propsModal
    } = props;
    const isModalDarkTheme = modalDark || modalCampaign;

    const styleTextModalDark = Validate.style(
        isModalDarkTheme,
        HelperStyle.white,
    );

    const handleOnScroll = (event) =>
        setScrollOffset(event.nativeEvent.contentOffset.y);

    const handleScrollTo = (p) => scrollViewRef?.current.scrollTo(p);

    const handlerHide = () => setVisible && setVisible(false);

    const handlerHeader = () =>
        (lottieIcon || icon || title || renderHeader) && (
            <ModalHeader
                lottieIcon={lottieIcon}
                lottieIconAccessibilityLabel={lottieIconAccessibilityLabel}
                icon={icon}
                iconAccessibilityLabel={iconAccessibilityLabel}
                title={title}
                titleStyle={titleStyle}
                modalDark={modalDark}
                renderHeader={renderHeader}
                styleTextModalDark={styleTextModalDark}
            />
        );

    const handlerContent = () => (
        <ModalBody
            renderContent={renderContent}
            content={content}
            lottieIcon={lottieIcon}
            modalDark={modalDark}
            styleTextModalDark={styleTextModalDark}
        />
    );

    const handlerFooter = () => (
        <ModalFooter renderFooter={renderFooter} buttonsGroup={buttonsGroup} />
    );

    const findDimesions = (layout) => {
        const { height } = layout;
        setScrollViewHeight(height + 56);
    };

    const contentHeightModal =
        dimensions.fullHeight - dimensions.fullHeight * 0.2;
    const contentHeightModalCampaign = dimensions.fullHeight * 0.95;
    const maxHeight = {
        maxHeight: modalCampaign
            ? contentHeightModalCampaign
            : contentHeightModal,
    };
    const hasScroll = scrollViewHeight > contentHeightModal;
    const hasScrollProps = {
        scrollTo: handleScrollTo,
        scrollOffset,
        scrollOffsetMax: scrollViewHeight - contentHeightModal,
    };
    const propsModalWithScroll = hasScroll ? hasScrollProps : {};
    const scrollViewStyle = noPadding
        ? style
        : [HelperStyle.ph_4, HelperStyle.pt_5, HelperStyle.pb_6, style];

    /**
     * Fix para android con statusBar translucent.
     * OnHide Restaura a transparent (color por defecto) background del statusbar cuando se cierra.
     * OnShow Oscurece background del statusbar cuando el modal aparece.
     *
     * @param {string} color - Color background del statusbar.
     */
    const setBackgroundColor = (color) => {
        if (Platform.OS === 'android') StatusBar.setBackgroundColor(color);
    };

    const handlerOnModalWillShow = () => {
        Validate.func(onModalWillShow);
        setBackgroundColor(statusBarBackgroundColorOnShowModal);
    };

    const handlerOnModalWillHide = () => {
        Validate.func(onModalWillHide);
        setBackgroundColor(statusBarBackgroundColorOnHideModal);
    };

    const handleRenderModalTop = () => (
        <ModalTop renderTop={renderTop} isModalDarkTheme={isModalDarkTheme} />
    );

    const handlerOnLayout = (event) => findDimesions(event.nativeEvent.layout);

    const renderContentModal = () => (
        <View
            style={[
                Style.modalContent,
                maxHeight,
                HelperStyle.bg_white,
                Validate.style(modalDark, HelperStyle.bg_gray_dark),
                Validate.style(modalCampaign, HelperStyle.bg_transparent),
            ]}
        >
            {handleRenderModalTop()}
            <ScrollView
                ref={scrollViewRef}
                onScroll={hasScroll && handleOnScroll}
                scrollEventThrottle={16}
                contentContainerStyle={scrollViewStyle}
                bounces={false}
            >
                <View onLayout={handlerOnLayout}>
                    {children || (
                        <>
                            <View style={headerStyle}>{handlerHeader()}</View>
                            <View style={contentStyle}>{handlerContent()}</View>
                            <View style={footerStyle}>{handlerFooter()}</View>
                        </>
                    )}
                </View>
            </ScrollView>
        </View>
    );

    const handleContentModal = () => {
        if (modalCampaign) {
            return (
                <ModalCampaign
                    style={maxHeight}
                    backgroundModalSource={backgroundModalSource}
                >
                    {renderContentModal()}
                </ModalCampaign>
            );
        }
        return renderContentModal();
    };

    /**
     * Fix para android con statusBar translucent.
     * Restaura a transparent (color por defecto) background del statusbar cuando se desmonta el modal.
     */
    useEffect(
        () => () => setBackgroundColor(statusBarBackgroundColorOnHideModal),
    );

    return (
        <Modal
            backdropTransitionInTiming={100}
            animationInTiming={200}
            animationOutTiming={200}
            backdropColor={HelperStyle.gray.color}
            backdropOpacity={0.4}
            onSwipeComplete={handlerHide}
            onBackdropPress={handlerHide}
            onBackButtonPress={handlerHide}
            {...propsModal}
            style={[Style.modal, style]}
            isVisible={visible}
            swipeDirection={swipeDirection}
            {...propsModalWithScroll}
            onModalWillShow={handlerOnModalWillShow}
            onModalWillHide={handlerOnModalWillHide}
        >
            {dropDownAlert && <DropdownAlert />}
            {handleContentModal()}
        </Modal>
    );
};

ModalBCH.propTypes = modalPropTypes;
ModalBCH.defaultProps = modalDefaultProps;

export default memo(ModalBCH);
