import PropTypes from 'prop-types';

const modalPropTypes = {
    /**
     * Objecto con propiedades para configurar botones. Esto se muestra en la parte inferior del modal.
     */
    buttonsGroup: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.bool,
        PropTypes.array,
    ]),
    /**
     * Renderiza componente que reemplaza el header, content y footer por defecto.
     */
    children: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),
    /**
     * Arreglo de objectos o string para configurar el contenido <Paragraph />.
     */
    content: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.bool,
        PropTypes.array,
        PropTypes.object,
    ]),
    /**
     * Boleano para renderizar dropDownAlert dentro del modal.
     */
    dropDownAlert: PropTypes.bool,
    /**
     * Nombre del icono o objecto con propiedades para configurar el <Icon />. El icono se muestra en la parte superior del modal (header).
     */
    icon: PropTypes.oneOfType([
        PropTypes.bool,
        PropTypes.string,
        PropTypes.shape({
            name: PropTypes.string,
            color: PropTypes.shape(),
            style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
            accessibilityLabel: PropTypes.string,
            accessibilityHint: PropTypes.string,
            testID: PropTypes.string,
        }),
    ]),
    /**
     * Identificador de accesibilidad para el icono.
     */
    iconAccessibilityLabel: PropTypes.string,
    /**
     * Tipo de lottieicon a mostrar.
     */
    lottieIcon: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.bool,
        PropTypes.object,
    ]),
    /**
     * Identificador de accesibilidad para <LottieIcon />.
     */
    lottieIconAccessibilityLabel: PropTypes.string,
    /**
     * Sugerencia de accesibilidad para <LottieIcon />.
     */
    lottieIconAccessibilityHint: PropTypes.string,
    /**
     * Componente a renderizar en el parte central interna del modal (content).
     */
    renderContent: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
    /**
     * Componente a renderizar en el parte inferior interna del modal (footer).
     */
    renderFooter: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
    /**
     * Componente a renderizar en el parte superior interna del modal (header).
     */
    renderHeader: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
    /**
     * Componente a renderizar en el parte superior del modal (header).
     */
    renderTop: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
    /**
     * Función para cambiar el estado de visible.
     */
    setVisible: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
    /**
     * Título del modal que se muestra en la superior interna del modal (header).
     */
    title: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),
    /**
     * Identificador de accesibilidad para title.
     */
    titleAccessibilityLabel: PropTypes.string,
    /**
     * Sugerencia de accesibilidad que ayuda a los usuarios a comprender qué sucederá cuando realicen una acción.
     */
    titleAccessibilityHint: PropTypes.string,
    /**
     * Identificador de pruebas para title.
     */
    titleTestID: PropTypes.string,
    /**
     * Boleano para mostrar o ocultar el modal.
     */
    visible: PropTypes.bool.isRequired,
    /**
     * Color de fondo del statusbar cuando el modal se muestra.
     */
    statusBarBackgroundColorOnShowModal: PropTypes.string,
    /**
     * Color de fondo del statusbar cuando el modal se oculta.
     */
    statusBarBackgroundColorOnHideModal: PropTypes.string,
    /**
     * Boleano para modal de tipo darkMode.
     */
    modalDark: PropTypes.bool,
    /**
     * Estilos para el <Modal />.
     */
    style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
    /**
     * Estilos para el contenedor del content.
     */
    contentStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
    /**
     * Estilos para el contenedor del footer.
     */
    footerStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
    /**
     * Estilos para el contenedor del header.
     */
    headerStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
    /**
     * Estilos para el título.
     */
    titleStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
    /**
     * SOLO Campaña: Boleanos estilos modal campaña.
     */
    modalCampaign: PropTypes.bool,
    /**
     * SOLO Campaña: ruta de la imagen.
     */
    backgroundModalSource: PropTypes.oneOfType([
        PropTypes.object,
        PropTypes.string,
        PropTypes.bool,
    ]),
    /**
     * Boleano para eliminar el padding por defecto del interno del contenedor del modal.
     */
    noPadding: PropTypes.bool,
    /**
     * Define la dirección en la que se puede deslizar el modal. Puede ser "up", "down", "left o "right", o una combinación de ellos como ['up", "down"].
     */
    swipeDirection: PropTypes.oneOf(['up', 'down', 'left', 'right', null]),
};

const modalDefaultProps = {
    buttonsGroup: false,
    children: false,
    content: false,
    dropDownAlert: false,
    icon: false,
    iconAccessibilityLabel: '',
    lottieIcon: false,
    lottieIconAccessibilityLabel: '',
    lottieIconAccessibilityHint: '',
    renderContent: false,
    renderFooter: false,
    renderHeader: false,
    renderTop: false,
    setVisible: false,
    title: false,
    titleAccessibilityLabel: '',
    titleAccessibilityHint: '',
    titleTestID: '',
    statusBarBackgroundColorOnShowModal: 'rgba(82,103,123,0.40)', // gray con opacity 0.40
    statusBarBackgroundColorOnHideModal: 'transparent',
    modalDark: false,
    contentStyle: {},
    footerStyle: {},
    headerStyle: {},
    style: {},
    titleStyle: {},
    modalCampaign: false,
    backgroundModalSource: false,
    noPadding: false,
    swipeDirection: 'down',
};

export { modalPropTypes, modalDefaultProps };
