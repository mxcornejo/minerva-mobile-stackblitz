import React, { memo } from 'react';
import PropTypes from 'prop-types';
import { View } from 'react-native';
import { HelperStyle, Validate } from '../../../index';
import buildStyles from './style';
import { inputPropTypes, inputDefaultProps } from '../type';

const InputBorder = ({
    borderWidth,
    disabled,
    error,
    inputHeight,
    inverse,
    isFocus,
    isOpenSelect,
    multiline,
    value,
    success,
}) => {
    const widthBorderWidthBold = [isFocus, isOpenSelect, error, success];
    const colorBorder = () => {
        const BORDERS_COLOR = {
            error: HelperStyle.danger.color,
            disabled: HelperStyle.gray_lighter.color,
            isFocus: HelperStyle.primary.color,
            isOpenSelect: HelperStyle.primary.color,
            inverse: HelperStyle.white.color,
            success: HelperStyle.success.color,
            default: HelperStyle.gray_light.color,
        };
        const typesColorName = {
            error,
            disabled,
            success,
            isFocus,
            isOpenSelect,
            inverse,
        };
        const colorName = Object.keys(typesColorName).find(
            (i) => typesColorName[i] === true,
        );
        return BORDERS_COLOR[colorName] || BORDERS_COLOR.default;
    };
    const Styles = buildStyles({ colorBorder, inputHeight });

    const changeBorderWidth = (style, toValue) =>
        Object.keys(style).forEach((key) => {
            style[key] = toValue;
        });

    const borderWidthStyle = (position = 'right') => {
        let styleBorderWidth = { ...HelperStyle.btw_2, ...HelperStyle.bbw_2 };
        if (position === 'left') {
            styleBorderWidth = { ...HelperStyle.blw_2, ...styleBorderWidth };
        }
        if (position === 'right') {
            styleBorderWidth = { ...HelperStyle.brw_2, ...styleBorderWidth };
        }
        if (widthBorderWidthBold.includes(true)) {
            changeBorderWidth(styleBorderWidth, 2);
        } else {
            changeBorderWidth(styleBorderWidth, 1);
        }
        if (position === 'middle') {
            styleBorderWidth =
                isFocus || isOpenSelect || value
                    ? { ...Styles.borderTopTransparent, ...styleBorderWidth }
                    : { ...styleBorderWidth };
        }
        return styleBorderWidth;
    };
    const bordersStyle = {
        ...Validate.style(
            multiline,
            { ...Styles.inputHeight, ...Styles.inputHeightBaseMultiline },
            Styles.inputHeightBase,
        ),
        ...Styles.inputBorderColor,
    };
    return (
        <View style={Styles.borderInputContainer}>
            <View
                style={[
                    Styles.borderInputLeft,
                    bordersStyle,
                    borderWidthStyle('left'),
                ]}
            />
            <View
                style={[bordersStyle, borderWidthStyle('middle'), borderWidth]}
            />
            <View
                style={[
                    Styles.borderInputRight,
                    bordersStyle,
                    borderWidthStyle('right'),
                ]}
            />
        </View>
    );
};

InputBorder.propTypes = {
    borderWidth: PropTypes.shape({
        width: PropTypes.number,
    }).isRequired,
    disabled: inputPropTypes.disabled,
    error: inputPropTypes.error,
    inputHeight: PropTypes.number.isRequired,
    inverse: inputPropTypes.inverse,
    isFocus: PropTypes.bool.isRequired,
    isOpenSelect: inputPropTypes.isOpenSelect,
    multiline: inputPropTypes.multiline,
    value: inputPropTypes.value,
    success: PropTypes.bool,
};
InputBorder.defaultProps = {
    disabled: inputDefaultProps.disabled,
    error: inputDefaultProps.error,
    inverse: inputDefaultProps.inverse,
    isOpenSelect: inputDefaultProps.isOpenSelect,
    multiline: inputDefaultProps.multiline,
    value: inputDefaultProps.value,
    success: false,
};

export default memo(InputBorder);
