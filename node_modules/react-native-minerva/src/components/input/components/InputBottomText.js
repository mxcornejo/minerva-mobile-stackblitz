import React, { memo } from 'react';
import { size } from 'lodash';
import { View } from 'react-native';
import { HelperStyle, Validate, Text, InputHelperText } from '../../../index';
import { inputPropTypes, inputDefaultProps } from '../type';

const InputBottomText = ({
    digiCard,
    error,
    helperText,
    inverse,
    maxLength,
    multiline,
    value,
}) => {
    const renderInputHelperText = () => {
        if (!digiCard) {
            return (
                <InputHelperText
                    error={error}
                    style={Validate.style(inverse, HelperStyle.gray_lighter)}
                >
                    {helperText}
                </InputHelperText>
            );
        }
        return null;
    };
    const renderTextStatusMultiline = () => {
        const statusText = maxLength
            ? `${size(value)}/${maxLength}`
            : `${size(value)}`;
        return (
            <Text
                smaller
                style={[HelperStyle.ml_3, HelperStyle.lh_1, HelperStyle.mb_0]}
            >
                {statusText}
            </Text>
        );
    };
    if (multiline) {
        return (
            <View style={[HelperStyle.flx_row, HelperStyle.jc_sb]}>
                {renderInputHelperText()}
                {renderTextStatusMultiline()}
            </View>
        );
    }
    return renderInputHelperText();
};

InputBottomText.propTypes = {
    digiCard: inputPropTypes.digiCard,
    error: inputPropTypes.error,
    helperText: inputPropTypes.helperText,
    inverse: inputPropTypes.inverse,
    maxLength: inputPropTypes.maxLength,
    multiline: inputPropTypes.multiline,
    value: inputPropTypes.value,
};
InputBottomText.defaultProps = {
    digiCard: inputDefaultProps.digiCard,
    error: inputDefaultProps.error,
    helperText: inputDefaultProps.helperText,
    inverse: inputDefaultProps.inverse,
    maxLength: inputDefaultProps.maxLength,
    multiline: inputDefaultProps.multiline,
    value: inputDefaultProps.value,
};

export default memo(InputBottomText);
