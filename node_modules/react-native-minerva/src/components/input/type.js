import PropTypes from 'prop-types';
import { DEFAULT_TYPES, TYPES } from '../../constants/propTypes';

const inputPropTypes = {
    /**
     * Boleano para campo tipo digiCard.
     */
    digiCard: PropTypes.bool,
    /**
     * Boleano para habilitar y deshabilitar.
     */
    disabled: PropTypes.bool,
    /**
     * Boleano para definir estado de error.
     */
    error: PropTypes.bool,
    /**
     * Texto de ayuda.
     */
    helperText: PropTypes.string,
    /**
     * Referencia.
     */
    inputRef: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.string,
        PropTypes.shape({
            current: PropTypes.oneOfType([
                PropTypes.objectOf(PropTypes.any),
                PropTypes.string,
            ]),
        }),
    ]),
    /**
     * Etiqueta del campo.
     */
    label: PropTypes.string,
    /**
     * Identificador de pruebas para label.
     */
    labelTestID: PropTypes.string,
    /**
     * Identificador de accesibilidad para label.
     */
    labelAccessibilityLabel: PropTypes.string,
    /**
     * Sugerencia de accesibilidad que ayuda a los usuarios a comprender qué sucederá cuando realicen una acción.
     */
    labelAccessibilityHint: PropTypes.string,
    /**
     * Estilos tamaño large.
     */
    large: PropTypes.bool,
    /**
     * Boleano para campo de tipo multilineas.
     */
    multiline: PropTypes.bool,
    /**
     * Boleano para campo de tipo numérico.
     */
    number: PropTypes.bool,
    /**
     * Función que se invoca cuando sale de foco.
     */
    onBlur: PropTypes.func,
    /**
     * Función que se invoca cuando entra en foco.
     */
    onFocus: PropTypes.func,
    /**
     * Boleano para campo de tipo contraseña.
     */
    pass: PropTypes.bool,
    /**
     * Renderiza componente en el lado izquierdo interior del campo.
     */
    renderLeft: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
    /**
     * Renderiza componente en el lado izquierdo exterior del campo.
     */
    renderLeftSide: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
    /**
     * Renderiza componente en el lado derecho interior del campo.
     */
    renderRight: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
    /**
     * Renderiza componente en el lado derecho exterior del campo.
     */
    renderRightSide: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
    /**
     * Valor del campo.
     */
    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    /**
     * Estilos para fondo oscuro.
     */
    inverse: PropTypes.bool,
    /**
     * Boleano para campo tipo select.
     */
    select: PropTypes.bool,
    /**
     * Identificador para pruebas.
     */
    testID: PropTypes.string,
    /**
     * Identificador para accesibilidad.
     */
    accessibilityLabel: PropTypes.string,
    /**
     * Sugerencia de accesibilidad que ayuda a los usuarios a comprender qué sucederá cuando realicen una acción.
     */
    accessibilityHint: PropTypes.string,
    /**
     * Estilos.
     */
    style: TYPES.style,
    /**
     * Define los eventos de touch.
     */
    pointerEvents: PropTypes.oneOf(['auto', 'none', 'box-none', 'box-only']),
    /**
     * Boleano para definir si el renderRight debe ser visible o no. Por defecto es visible solo si value esta definido.
     */
    isRenderRightVisible: PropTypes.bool,
    /**
     * Boleano para eliminar el padding interno del campo.
     */
    disabledPadding: PropTypes.bool,
    /**
     * Boleano con el estado del select.
     */
    isOpenSelect: PropTypes.bool,
    /**
     * Define altura máxima del campo cuando es multiline.
     */
    maxHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * Limita el número máximo de caracteres que se pueden introducir.
     */
    maxLength: PropTypes.number,
    /**
     * Boleano para definir estado loading.
     */
    loading: PropTypes.bool,
    /**
     * Boleano para definir estado success.
     */
    success: PropTypes.bool,
    /**
     * Boleano para mostrar icono cuando este en estado success.
     */
    showStateIconRight: PropTypes.bool,
};
const inputDefaultProps = {
    digiCard: false,
    disabled: false,
    error: false,
    helperText: '',
    inputRef: undefined,
    label: '',
    large: false,
    multiline: false,
    number: false,
    onBlur: DEFAULT_TYPES.func,
    onFocus: DEFAULT_TYPES.func,
    pass: false,
    renderLeft: false,
    renderLeftSide: false,
    renderRight: false,
    renderRightSide: false,
    value: '',
    inverse: false,
    select: false,
    testID: '',
    accessibilityLabel: '',
    accessibilityHint: '',
    style: DEFAULT_TYPES.style,
    pointerEvents: 'auto',
    isRenderRightVisible: false,
    disabledPadding: false,
    isOpenSelect: false,
    maxHeight: 96,
    maxLength: null,
    loading: false,
    success: false,
    showStateIconRight: false,
    labelAccessibilityHint: '',
    labelAccessibilityLabel: '',
    labelTestID: '',
};

export { inputPropTypes, inputDefaultProps };
