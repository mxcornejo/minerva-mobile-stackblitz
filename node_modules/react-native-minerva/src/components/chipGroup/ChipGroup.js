import React, { memo } from 'react';
import PropTypes from 'prop-types';
import { HelperStyle, Chip, View } from '../../index';
import { chipPropTypes } from '../chip/type';
import buildStyle from './style';

/**
 * Componente para agrupar <Chip />.
 *
 * @component
 */
const ChipGroup = (props) => {
    const { data, horizontal, style, testID } = props;
    const dataSize = data?.length;
    const lastItem = dataSize - 1;
    const Style = buildStyle(HelperStyle);

    const renderItems = ({ item, index }) => {
        const hasMargin = lastItem !== index && dataSize > 1;
        return (
            <Chip
                key={`chip-${index}`}
                {...item}
                style={[
                    HelperStyle.mb_4,
                    hasMargin && HelperStyle.mr_4,
                    item?.style,
                ]}
            />
        );
    };

    const mapItems = () =>
        data.map((item, index) => renderItems({ item, index }));

    return (
        <View
            testID={testID}
            style={[horizontal && Style.horizontalStyle, style]}
        >
            {mapItems()}
        </View>
    );
};

ChipGroup.propTypes = {
    /**
     * Objecto para configurar los <Chip />.
     */
    data: PropTypes.arrayOf(PropTypes.shape(chipPropTypes)).isRequired,
    /**
     * Boleano para definir alineaci√≥n horizontal de los <Chip />.
     */
    horizontal: PropTypes.bool,
    /**
     * Estilos para el contenedor de los <Chip />.
     */
    style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
    /**
     * Identificador para pruebas.
     */
    testID: PropTypes.string,
};
ChipGroup.defaultProps = {
    horizontal: false,
    style: {},
    testID: '',
};

export default memo(ChipGroup);
