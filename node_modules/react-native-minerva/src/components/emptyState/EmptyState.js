import React, { memo } from 'react';
import { isObject, isString, has } from 'lodash';
import PropTypes from 'prop-types';
import {
    HelperStyle,
    LottieView,
    View,
    Icon,
    H3,
    Paragraph,
    ButtonsGroup,
    Scale,
    Validate,
} from '../../index';
import Style from './style';

/**
 * Componente para estados vacíos.
 *
 * @component
 */
const EmptyState = ({
    backgroundImages,
    buttonsGroup,
    content,
    icon,
    lottie,
    renderBackgroundImages,
    renderContent,
    renderFooter,
    renderImage,
    renderTitle,
    title,
    titleAccessibilityLabel,
    titleAccessibilityHint,
    titleTestID,
    style,
    circlesPosition,
    circlesSmallPosition3,
    paragraph,
    styleContainerIconImage,
    styleViewTitleContent,
}) => {
    const handlerRenderBackground = () => {
        if (renderBackgroundImages) {
            return Validate.render(renderBackgroundImages);
        }
        if (backgroundImages) {
            let styleCircleMedium;
            let styleCircleLarge;
            let styleCircleSmall;
            switch (circlesPosition) {
                case 'position2': {
                    styleCircleMedium = Style.circleMedium2;
                    styleCircleLarge = Style.circleLarge2;
                    styleCircleSmall = Style.circleSmall2;
                    break;
                }
                case 'position3': {
                    styleCircleMedium = Style.circleMedium3;
                    styleCircleLarge = Style.circleLarge3;
                    styleCircleSmall = Style.circleSmall3a;
                    break;
                }
                default: {
                    // position1 or empty
                    styleCircleMedium = Style.circleMedium1;
                    styleCircleLarge = Style.circleLarge1;
                    styleCircleSmall = Style.circleSmall1;
                }
            }
            return (
                <View style={Style.circleContainer}>
                    <View
                        style={[
                            styleCircleMedium,
                            HelperStyle.bg_brand_lighter,
                            HelperStyle.o_10,
                        ]}
                    />
                    <View
                        style={[
                            styleCircleLarge,
                            HelperStyle.bg_brand_lighter,
                            HelperStyle.o_10,
                        ]}
                    />
                    <View
                        style={[
                            circlesSmallPosition3
                                ? Style.circleSmall3
                                : styleCircleSmall,
                            HelperStyle.bg_brand_lighter,
                        ]}
                    />
                </View>
            );
        }
        return null;
    };

    const renderLottie = () => {
        if (isObject(lottie)) {
            return (
                <>
                    {handlerRenderBackground()}
                    <View
                        style={[Style.containerImage, styleContainerIconImage]}
                    >
                        {has(lottie, 'source') ? (
                            <LottieView autoPlay loop={false} source={lottie} />
                        ) : (
                            <LottieView autoPlay loop={false} {...lottie} />
                        )}
                    </View>
                </>
            );
        }
        return null;
    };

    const renderIcon = () => {
        const IconStyle = [HelperStyle.brand, { fontSize: Scale(150) }];
        if (isString(icon)) {
            return (
                <>
                    {handlerRenderBackground()}
                    <View
                        style={[Style.containerImage, styleContainerIconImage]}
                    >
                        <Icon name={icon} style={[IconStyle, icon.style]} />
                    </View>
                </>
            );
        }
        if (isObject(icon) && has(icon, 'name')) {
            return (
                <>
                    {handlerRenderBackground()}
                    <View
                        style={[Style.containerImage, styleContainerIconImage]}
                    >
                        <Icon {...icon} style={[IconStyle, icon.style]} />
                    </View>
                </>
            );
        }
        return null;
    };

    const handlerRenderImage = () => {
        if (renderImage) {
            return Validate.render(renderImage);
        }
        return (
            <>
                {renderLottie()}
                {renderIcon()}
            </>
        );
    };

    const handlerRenderTitle = () => {
        if (renderTitle) {
            return Validate.render(renderTitle);
        }
        return (
            <H3
                accessibilityLabel={Validate.safeLabel(
                    titleAccessibilityLabel,
                    title,
                )}
                accessibilityHint={Validate.safeLabel(titleAccessibilityHint)}
                testID={Validate.safeLabel(titleTestID, title)}
                style={[HelperStyle.ta_c, HelperStyle.mb_0]}
            >
                {title}
            </H3>
        );
    };

    const handlerRenderContent = () => {
        if (renderContent) {
            return Validate.render(renderContent);
        }

        if (content) {
            return (
                <Paragraph
                    style={[HelperStyle.ta_c, HelperStyle.mb_0]}
                    items={content}
                    {...paragraph}
                />
            );
        }
        return null;
    };

    const handlerRenderFooter = () => {
        if (renderFooter) {
            return Validate.render(renderFooter);
        }
        if (buttonsGroup) {
            return <ButtonsGroup items={buttonsGroup} />;
        }
        return null;
    };

    return (
        <View style={[HelperStyle.flx_i, HelperStyle.jc_c, style]}>
            {handlerRenderImage()}
            <View
                style={[
                    HelperStyle.pv_4,
                    HelperStyle.pt_1,
                    HelperStyle.pb_4,
                    styleViewTitleContent,
                ]}
            >
                {handlerRenderTitle()}
                {handlerRenderContent()}
            </View>
            <View style={HelperStyle.ph_4}>{handlerRenderFooter()}</View>
        </View>
    );
};

EmptyState.propTypes = {
    /**
     * Boleano para mostrar imagenes de circulos de fondo.
     */
    backgroundImages: PropTypes.bool,
    /**
     * Objecto para configurar los botones que se muestra en la parte inferior.
     */
    buttonsGroup: PropTypes.oneOfType([PropTypes.array, PropTypes.bool]),
    /**
     * Arreglo de objectos o string para configurar el contenido <Paragraph />.
     */
    content: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.bool,
        PropTypes.array,
    ]),
    /**
     * Nombre de icono o Objecto para configurar el componente <Icon />. Se muestra en la Cabecera del componente.
     */
    icon: PropTypes.oneOfType([
        PropTypes.shape({
            name: PropTypes.string,
        }),
        PropTypes.string,
        PropTypes.bool,
    ]),
    /**
     * Nombre del lottie o objecto para configurar el componente <LottieView />. Se muestra en la Cabecera del componente.
     */
    lottie: PropTypes.oneOfType([
        PropTypes.shape({
            source: PropTypes.string,
        }),
        PropTypes.string,
        PropTypes.bool,
    ]),
    /**
     * Componente a renderizar en el fondo.
     */
    renderBackgroundImages: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.bool,
        PropTypes.node,
    ]),
    /**
     * Componente a renderizar en el contenido.
     */
    renderContent: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.bool,
        PropTypes.node,
    ]),
    /**
     * Componente a renderizar en la parte inferior.
     */
    renderFooter: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.bool,
        PropTypes.node,
    ]),
    /**
     * Componente a renderizar en la cabecera del componente.
     */
    renderImage: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.bool,
        PropTypes.node,
    ]),
    /**
     * Componente a renderizar en el area del title.
     */
    renderTitle: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.bool,
        PropTypes.node,
    ]),
    /**
     * Texto del título.
     */
    title: PropTypes.string,
    /**
     * Identificador de accesibilidad para title.
     */
    titleAccessibilityLabel: PropTypes.string,
    /**
     * Sugerencia de accesibilidad que ayuda a los usuarios a comprender qué sucederá cuando realicen una acción.
     */
    titleAccessibilityHint: PropTypes.string,
    /**
     * Identificador de pruebas para title.
     */
    titleTestID: PropTypes.string,
    /**
     * Posicíon de los circulos que se muestra en el fondo del componente posibles valores: position1, position2 y position3.
     */
    circlesPosition: PropTypes.oneOf(['position1', 'position2', 'position3']),
    /**
     * Objectos con propiedades para configurar el componente <Paragraph />.
     */
    paragraph: PropTypes.shape({
        textBreakStrategy: PropTypes.oneOf([
            'simple',
            'highQuality',
            'balanced',
        ]),
    }),
    /**
     * Estilos para el contenedor.
     */
    style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
    /**
     * Estilos para el contenedor de la imagen o lottie.
     */
    styleContainerIconImage: PropTypes.oneOfType([
        PropTypes.object,
        PropTypes.array,
    ]),
    /**
     * Estilos para el contenedor del titulo y el contenido.
     */
    styleViewTitleContent: PropTypes.oneOfType([
        PropTypes.object,
        PropTypes.array,
    ]),
    circlesSmallPosition3: PropTypes.bool,
};
EmptyState.defaultProps = {
    backgroundImages: true,
    buttonsGroup: false,
    content: false,
    icon: false,
    lottie: false,
    renderBackgroundImages: false,
    renderContent: false,
    renderFooter: false,
    renderImage: false,
    renderTitle: false,
    title: '',
    circlesPosition: 'position1',
    paragraph: { textBreakStrategy: 'simple' },
    style: {},
    styleContainerIconImage: {},
    styleViewTitleContent: {},
    circlesSmallPosition3: false,
    titleAccessibilityLabel: '',
    titleAccessibilityHint: '',
    titleTestID: '',
};

export default memo(EmptyState);
