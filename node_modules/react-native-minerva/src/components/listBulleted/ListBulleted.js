import React, { memo } from 'react';
import PropTypes from 'prop-types';
import {
    ListItem,
    Left,
    Body,
    HelperStyle,
    Text,
    Badge,
    MapList,
    Validate,
} from '../../index';

/**
 * Componente listado con bullet.
 *
 * @component
 */
const ListBulleted = ({
    items,
    customStyleListItemLeft,
    customStyleListItemRight,
}) => {
    /**
     * Renderiza bullet a la izquierda.
     *
     * @param {object} item - Objecto.
     * @param {object} index - Indice.
     */
    const renderLeftItem = (item, index) => {
        const { renderLeft } = item;
        if (renderLeft) {
            return Validate.render(renderLeft);
        }
        return (
            <Badge
                size={18}
                noPadding
                text={{
                    title: index + 1,
                    props: {
                        style: [
                            HelperStyle.white,
                            HelperStyle.fs_1,
                            HelperStyle.fw_b,
                            HelperStyle.mb_0,
                        ],
                        unformatted: true,
                        accessibilityLabel: `Punto ${index + 1}`,
                        testID: `Punto ${index + 1}`,
                    },
                }}
                style={[HelperStyle.mt_1, HelperStyle.bg_dark_dark]}
            />
        );
    };

    /**
     * Renderiza el texto que acompaña el bullet.
     *
     * @param {object} item - Objecto.
     */
    const renderRightItem = (item) => {
        const { value, valueProps, renderRight } = item;
        if (renderRight) {
            return Validate.render(renderRight);
        }
        return (
            <Text
                small
                {...valueProps}
                accessibilityLabel={Validate.safeLabel(
                    valueProps?.accessibilityLabel,
                    value,
                )}
                accessibilityHint={Validate.safeLabel(
                    valueProps?.accessibilityHint,
                )}
                testID={Validate.safeLabel(valueProps?.testID, value)}
                style={[HelperStyle.mr_0, valueProps?.style]}
            >
                {value}
            </Text>
        );
    };

    const renderItemBulleted = ({ item, index }) => (
        <ListItem
            noBorder
            accessible={false}
            style={[HelperStyle.pt_1, HelperStyle.pb_1]}
        >
            <Left
                style={[
                    HelperStyle.as_fs,
                    HelperStyle.flx_0,
                    HelperStyle.mr_4,
                    customStyleListItemLeft,
                ]}
            >
                {renderLeftItem(item, index)}
            </Left>
            <Body
                style={[
                    HelperStyle.as_fs,
                    HelperStyle.mr_0,
                    HelperStyle.flx_grow,
                    customStyleListItemRight,
                ]}
            >
                {renderRightItem(item)}
            </Body>
        </ListItem>
    );
    return <MapList data={items} renderItem={renderItemBulleted} />;
};

ListBulleted.propTypes = {
    items: PropTypes.arrayOf(
        PropTypes.shape({
            /**
             * Renderiza componente en el lado izquierdo.
             */
            renderLeft: PropTypes.oneOfType([
                PropTypes.node,
                PropTypes.func,
                PropTypes.bool,
            ]),
            /**
             * Renderiza componente en el lado derecho.
             */
            renderRight: PropTypes.oneOfType([
                PropTypes.node,
                PropTypes.func,
                PropTypes.bool,
            ]),
            /**
             * Texto del elemento del listado.
             */
            value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
            /**
             * Propiedades del <Text> de value.
             */
            valueProps: PropTypes.shape({
                /**
                 * Identificador de accesibilidad para value.
                 */
                accessibilityLabel: PropTypes.string,
                /**
                 * Sugerencia de accesibilidad que ayuda a los usuarios a comprender qué sucederá cuando realicen una acción.
                 */
                accessibilityHint: PropTypes.string,
                /**
                 * Identificador de pruebas para value.
                 */
                testID: PropTypes.string,
                /**
                 * Estilos para value.
                 */
                style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
            }),
        }),
    ).isRequired,
    /**
     * Estilos contenedor izquierdo.
     */
    customStyleListItemLeft: PropTypes.oneOfType([
        PropTypes.object,
        PropTypes.array,
    ]),
    /**
     * Estilos contenedor derecho.
     */
    customStyleListItemRight: PropTypes.oneOfType([
        PropTypes.object,
        PropTypes.array,
    ]),
};
ListBulleted.defaultProps = {
    customStyleListItemLeft: {},
    customStyleListItemRight: {},
};

export default memo(ListBulleted);
