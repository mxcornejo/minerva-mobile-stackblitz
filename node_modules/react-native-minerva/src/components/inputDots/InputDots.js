import React, { memo, useRef, useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { size } from 'lodash';
import * as Animatable from 'react-native-animatable';
import { HelperStyle, View, Text, Dots, Validate } from '../../index';
import { DEFAULT_TYPES, TYPES } from '../../constants/propTypes';
import Style from './style';

/**
 * Componente contraseña PIN.
 *
 * @component
 */
const InputDots = ({
    activeStyle,
    code,
    errorMessage,
    errorMessageAccessibilityLabel,
    errorMessageAccessibilityHint,
    errorMessageTestID,
    errorStyle,
    inactiveStyle,
    inputDotsRef,
    length,
    loading,
    onFulfill,
    style,
}) => {
    const defaultInputRef = useRef(null);
    const ref = inputDotsRef || defaultInputRef;
    const [didMount, setDidMount] = useState(false);

    useEffect(() => {
        if (length === size(code) && onFulfill) {
            onFulfill(code);
        }
    }, [code]);

    useEffect(() => {
        if (didMount && errorMessage) {
            if (ref) ref.current.shake(650);
        } else {
            setDidMount(true);
        }
    }, [errorMessage]);

    const renderDots = (idx) => {
        const key = `passwordItem-${idx}`;
        const dotsProps = {
            activeStyle,
            inactiveStyle,
            active: code.length > idx,
        };
        if (loading) {
            return (
                <Animatable.View
                    delay={idx * 100}
                    animation="zoomIn"
                    iterationCount="infinite"
                    direction="alternate"
                    duration={600}
                    useNativeDriver
                    key={key}
                >
                    <Dots {...dotsProps} active />
                </Animatable.View>
            );
        }
        return <Dots {...dotsProps} key={key} />;
    };

    const renderTypeInput = () => (
        <Animatable.View
            ref={ref}
            style={[Style.dotsContainer, HelperStyle.mb_4]}
        >
            {Array(...Array(length)).map((_, idx) => renderDots(idx))}
        </Animatable.View>
    );

    const renderErrorMessage = () => (
        <Text
            smaller
            style={[
                HelperStyle.p_a,
                HelperStyle.as_c,
                HelperStyle.mb_0,
                HelperStyle.ta_c,
                HelperStyle.white,
                errorStyle,
            ]}
            accessibilityLabel={Validate.safeLabel(
                errorMessageAccessibilityLabel,
                errorMessage,
            )}
            accessibilityHint={errorMessageAccessibilityHint}
            testID={Validate.safeLabel(errorMessageTestID, errorMessage)}
        >
            {errorMessage}
        </Text>
    );

    return (
        <View style={style}>
            {renderTypeInput()}
            {renderErrorMessage()}
        </View>
    );
};

InputDots.propTypes = {
    /**
     * Estilos para caso activo.
     */
    activeStyle: TYPES.style,
    /**
     * Arreglo de codigos.
     */
    code: PropTypes.arrayOf(
        PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    ),
    /**
     * Mensaje de error.
     */
    errorMessage: PropTypes.string,
    /**
     * Estilos para el mensaje de error.
     */
    errorStyle: TYPES.style,
    /**
     * Identificador para accesibilidad.
     */
    errorMessageAccessibilityLabel: PropTypes.string,
    /**
     * Sugerencia de accesibilidad que ayuda a los usuarios a comprender qué sucederá cuando realicen una acción.
     */
    errorMessageAccessibilityHint: PropTypes.string,
    /**
     * Identificador para pruebas.
     */
    errorMessageTestID: PropTypes.string,
    /**
     * Estilos para inactivo.
     */
    inactiveStyle: TYPES.style,
    /**
     * Referencia.
     */
    inputDotsRef: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.string,
        PropTypes.shape({
            current: PropTypes.oneOfType([
                PropTypes.objectOf(PropTypes.any),
                PropTypes.string,
            ]),
        }),
    ]),
    /**
     * Longitud del PIN.
     */
    length: PropTypes.number,
    /**
     * Boleano para estado loading.
     */
    loading: PropTypes.bool,
    /**
     * Función que se invoca cuando la longitud de code es igual a length.
     */
    onFulfill: PropTypes.func,
    /**
     * Estilos.
     */
    style: TYPES.style,
};
InputDots.defaultProps = {
    activeStyle: DEFAULT_TYPES.style,
    code: [],
    errorMessage: '',
    errorMessageAccessibilityHint: '',
    errorMessageAccessibilityLabel: '',
    errorMessageTestID: '',
    errorStyle: DEFAULT_TYPES.style,
    inactiveStyle: DEFAULT_TYPES.style,
    inputDotsRef: undefined,
    length: 5,
    loading: false,
    onFulfill: DEFAULT_TYPES.func,
    style: DEFAULT_TYPES.style,
};

export default memo(InputDots);
