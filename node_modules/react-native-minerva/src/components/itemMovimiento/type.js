import PropTypes from 'prop-types';
import { propTypes as CheckBoxType } from '../checkBox/type';
import { DEFAULT_TYPES, TYPES } from '../../constants/propTypes';
import { propTypes as paragraphPropTypes } from '../paragraph/types';

const propTypesMedia = {
    /**
     * Nombre del icono.
     */
    iconName: PropTypes.string,
    /**
     * Forma del contenedor de la imagen/icono puede ser circle o square.
     */
    shape: PropTypes.oneOf(['circle', 'square']),
    /**
     * Fuente de la imagen.
     */
    imageSource: PropTypes.oneOfType([
        PropTypes.shape({
            uri: PropTypes.string,
        }),
        PropTypes.number,
        PropTypes.arrayOf(PropTypes.any),
    ]),
    /**
     * Identificador para la accesibilidad.
     */
    accessibilityLabel: PropTypes.string,
    /**
     * Identificador para pruebas.
     */
    testID: PropTypes.string,
    /**
     * Sugerencia de accesibilidad que ayuda a los usuarios a comprender qué sucederá cuando realicen una acción.
     */
    accessibilityHint: PropTypes.string,
};

const defaultPropsMedia = {
    iconName: '',
    shape: 'circle',
    imageSource: null,
    accessibilityLabel: '',
    accessibilityHint: '',
    testID: '',
};

const propTypesItem = {
    /**
     * Objecto para configurar el monto.
     */
    amount: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.shape({
            /**
             * Texto de accesibilidad del monto.
             */
            accessibilityLabel: PropTypes.string,
            /**
             * Estilo bold.
             */
            bold: PropTypes.bool,
            /**
             * Estilo Disabled.
             */
            disabled: PropTypes.bool,
            /**
             * Propiedad para tipo truncado del texto.
             */
            ellipsizeMode: PropTypes.string,
            /**
             * Si showIcon es true define el tipo de icono del monto (ingreso/egreso).
             */
            isIncomeIcon: PropTypes.bool,
            /**
             * Si esta definido indica el numero de lineas que puede tener el texto antes de truncarlo.
             */
            numberOfLines: PropTypes.number,
            /**
             * Muestra icono (ingreso/egreso).
             */
            showIcon: PropTypes.bool,
            /**
             * Estilo small.
             */
            small: PropTypes.bool,
            /**
             * Estilo smaller.
             */
            smaller: PropTypes.bool,
            /**
             * Estilos para el Text.
             */
            style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
            /**
             * Identificador para pruebas.
             */
            testID: PropTypes.string,
            /**
             * Estilo sin formato.
             */
            unformatted: PropTypes.bool,
            /**
             * Texto a renderizar.
             */
            text: PropTypes.string,
        }),
    ]),
    /**
     * Objecto con props para el componente checkbox.
     */
    checkBox: PropTypes.shape(CheckBoxType),
    /**
     * Detalle del movimiento.
     */
    detail: paragraphPropTypes.items,
    /**
     * Estilos primera elemento.
     */
    firstItem: PropTypes.bool,
    /**
     * Estilos ultima elemento.
     */
    lastItem: PropTypes.bool,
    /**
     * Imagen o icono del movimiento.
     */
    media: PropTypes.shape(propTypesMedia),
    /**
     * Estilos elemento del medio.
     */
    middleItem: PropTypes.bool,
    /**
     * Objecto para configurar el estado del movimiento.
     */
    status: PropTypes.shape({
        text: PropTypes.string,
        success: PropTypes.bool,
        warning: PropTypes.bool,
        danger: PropTypes.bool,
        info: PropTypes.bool,
        primary: PropTypes.bool,
    }),
    /**
     * Titulo del movimiento.
     */
    title: paragraphPropTypes.items,
    /**
     * Muestra icono icon-bch-options-horizontal en el lado derecho del elemento.
     */
    isMoreOptions: PropTypes.bool,
    /**
     * Estilo de caja fondo blanco y border redondeado.
     */
    box: PropTypes.bool,
    /**
     * Estilos para el contenedor.
     */
    style: TYPES.style,
};

const defaultPropsItem = {
    checkBox: null,
    detail: '',
    firstItem: false,
    lastItem: false,
    middleItem: false,
    status: null,
    media: null,
    amount: null,
    title: '',
    isMoreOptions: false,
    box: false,
    style: DEFAULT_TYPES.style,
};

export { propTypesItem, defaultPropsItem, propTypesMedia, defaultPropsMedia };
