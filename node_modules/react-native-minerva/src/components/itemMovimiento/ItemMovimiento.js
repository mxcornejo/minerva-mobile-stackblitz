import React from 'react';
import { isArray, isString, isEmpty } from 'lodash';
import {
    HelperStyle,
    CheckBox,
    Text,
    Badge,
    TextAmount,
    Paragraph,
    PressableOpacity,
    View,
    Icon,
    Validate,
} from '../../index';
import ItemMovimientoMedia from './ItemMovimientoMedia';
import { defaultPropsItem, propTypesItem } from './type';
import ITEMMOVIMIENTO_STR from './itemMovimientoStr';
import buildStyle from './style';

/**
 * Componente para mostrar un movimiento.
 *
 * @component
 */
const ItemMovimiento = ({
    amount,
    checkBox,
    detail,
    firstItem,
    lastItem,
    media,
    middleItem,
    status,
    title,
    style,
    isMoreOptions,
    box,
}) => {
    const Styles = buildStyle({ firstItem, lastItem, middleItem });
    const handleRenderLeft = () => {
        if (checkBox || media) {
            return (
                <View
                    style={[
                        HelperStyle.mr_2,
                        HelperStyle.ai_fs,
                        HelperStyle.flx_row,
                    ]}
                >
                    {checkBox && (
                        <CheckBox
                            checked={checkBox?.checked}
                            style={[HelperStyle.mr_2, checkBox?.style]}
                            onPress={checkBox?.onPress}
                            disabled={checkBox?.disabled}
                        />
                    )}
                    {media && (
                        <ItemMovimientoMedia
                            iconName={media?.iconName}
                            iconStyle={media?.iconStyle}
                            shape={media?.shape}
                            imageSource={media?.imageSource}
                            testID={media?.testID}
                            accessibilityLabel={media?.accessibilityLabel}
                            accessibilityHint={media?.accessibilityHint}
                            style={media?.style}
                        />
                    )}
                </View>
            );
        }
        return null;
    };

    const renderText = ({ text, textStyle, small, smaller }) => {
        if (isArray(text)) {
            return (
                <Paragraph
                    smaller={smaller}
                    small={small}
                    style={[HelperStyle.mb_0, HelperStyle.lh_1, textStyle]}
                    numberOfLines={2}
                    ellipsizeMode="tail"
                    items={text}
                />
            );
        }
        return (
            <Text
                smaller
                style={[HelperStyle.mb_0, HelperStyle.lh_1, textStyle]}
                numberOfLines={2}
                ellipsizeMode="tail"
            >
                {text}
            </Text>
        );
    };

    const handleRenderBody = () => (
        <View
            style={[
                HelperStyle.flx_i,
                HelperStyle.minWidth(83),
                Validate.style(
                    detail && title,
                    HelperStyle.jc_fs,
                    HelperStyle.jc_c,
                ),
            ]}
        >
            {!isEmpty(title) &&
                renderText({
                    text: title,
                    small: true,
                    textStyle: [
                        HelperStyle.lineHeight(20),
                        HelperStyle.gray_dark,
                    ],
                })}
            {renderText({ text: detail, smaller: true })}
        </View>
    );

    const handleRenderRight = () => {
        const amountText = isString(amount) ? amount : amount?.text;
        return (
            <>
                <View style={[HelperStyle.flx_shrink, HelperStyle.ml_2]}>
                    {status && (
                        <Badge
                            success={status?.success}
                            warning={status?.warning}
                            danger={status?.danger}
                            info={status?.info}
                            primary={status?.primary}
                            text={{
                                title: status?.text,
                                props: { style: HelperStyle.lh_1 },
                            }}
                            style={[
                                HelperStyle.as_fe,
                                HelperStyle.h_auto,
                                HelperStyle.pl_1,
                                HelperStyle.pr_1,
                            ]}
                        />
                    )}
                    <TextAmount
                        showIcon={amount?.showIcon}
                        isIncomeIcon={amount?.isIncomeIcon}
                        small
                        containerStyle={HelperStyle.as_fe}
                        style={[
                            HelperStyle.gray_dark,
                            HelperStyle.ta_r,
                            amount?.style,
                        ]}
                    >
                        {amountText}
                    </TextAmount>
                </View>
                {isMoreOptions && (
                    <Icon
                        style={[HelperStyle.ml_3, HelperStyle.gray]}
                        name={ITEMMOVIMIENTO_STR.iconNameIsMoreOptions}
                    />
                )}
            </>
        );
    };

    return (
        <PressableOpacity
            style={[
                HelperStyle.flx_row,
                HelperStyle.shadow_none,
                HelperStyle.mb_4,
                box && Styles.boxStyle,
                style,
            ]}
        >
            {handleRenderLeft()}
            {handleRenderBody()}
            {handleRenderRight()}
        </PressableOpacity>
    );
};

ItemMovimiento.propTypes = {
    box: propTypesItem.box,
    isMoreOptions: propTypesItem.isMoreOptions,
    style: propTypesItem.style,
    title: propTypesItem.title,
    amount: propTypesItem.amount,
    checkBox: propTypesItem.checkBox,
    detail: propTypesItem.detail,
    firstItem: propTypesItem.firstItem,
    lastItem: propTypesItem.lastItem,
    media: propTypesItem.media,
    middleItem: propTypesItem.middleItem,
    status: propTypesItem.status,
};
ItemMovimiento.defaultProps = {
    box: defaultPropsItem.box,
    isMoreOptions: defaultPropsItem.isMoreOptions,
    style: defaultPropsItem.style,
    title: defaultPropsItem.title,
    checkBox: defaultPropsItem.checkBox,
    detail: defaultPropsItem.detail,
    firstItem: defaultPropsItem.firstItem,
    lastItem: defaultPropsItem.lastItem,
    middleItem: defaultPropsItem.middleItem,
    status: defaultPropsItem.status,
    media: defaultPropsItem.media,
    amount: defaultPropsItem.amount,
};

export default ItemMovimiento;
