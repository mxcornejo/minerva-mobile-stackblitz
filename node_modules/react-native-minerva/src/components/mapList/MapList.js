import React, { Fragment, memo } from 'react';
import { View } from 'react-native';
import PropTypes from 'prop-types';
import { Validate } from '../../index';
import { TYPES, DEFAULT_TYPES } from '../../constants/propTypes';

/**
 * Componente para renderizar listas cortas con componentes simples.
 *
 * @component
 */
const MapList = ({
    data,
    keyExtractor,
    renderItem,
    style,
    wrapper,
    loading,
    ListLoadingComponent,
}) => {
    /**
     * Función que retorna el indice del elemento.
     * Si keyExtractor no esta definido retorna un indice por defecto "defaultKey".
     *
     * @param {string} item - Elemento del arreglo data.
     * @param {number} index - Indice del elemento del arreglo data.
     */
    const handlerkeyExtractor = (item, index) => {
        const defaultKey = `item-${index}`;
        if (keyExtractor) return keyExtractor(item, index);
        return defaultKey;
    };

    /**
     * Función que retorna un componente por cada elemento de data.
     *
     * @param {object} options - Objeto.
     * @param {string} options.item - Elemento del arreglo data.
     * @param {number} options.index - Indice del elemento del arreglo data.
     */
    const handlerRenderItem = ({ item, index }) => {
        const isFirstItem = index === 0;
        const isLastItem = index === data.length - 1;
        return (
            <Fragment key={handlerkeyExtractor(item, index)}>
                {renderItem({ item, index, isFirstItem, isLastItem })}
            </Fragment>
        );
    };

    const mapRender = data.map((item, index) =>
        handlerRenderItem({ item, index }),
    );

    if (loading) {
        return Validate.render(ListLoadingComponent);
    }

    if (wrapper) {
        return <View style={style}>{mapRender}</View>;
    }
    return mapRender;
};

MapList.propTypes = {
    /**
     * Arreglo de elementos a renderizar.
     */
    data: PropTypes.arrayOf(
        PropTypes.oneOfType([
            PropTypes.string,
            PropTypes.number,
            PropTypes.func,
            PropTypes.objectOf(PropTypes.any),
        ]),
    ),
    /**
     * Función que generar clave única por cada fila en la lista.
     */
    keyExtractor: PropTypes.func,
    /**
     * Función que retorna un componente por cada elemento de data.
     */
    renderItem: PropTypes.func.isRequired,
    /**
     * Estilos del cuerpo de la lista.
     */
    style: TYPES.style,
    /**
     * Boleano para definir si envuelve los item en un View o no.
     */
    wrapper: PropTypes.bool,
    /**
     * Muestra componente ListLoadingComponent.
     */
    loading: PropTypes.bool,
    /**
     * Componente para estado de carga.
     */
    ListLoadingComponent: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
};
MapList.defaultProps = {
    data: [],
    keyExtractor: null,
    style: DEFAULT_TYPES.style,
    wrapper: true,
    loading: false,
    ListLoadingComponent: DEFAULT_TYPES.render,
};

export default memo(MapList);
