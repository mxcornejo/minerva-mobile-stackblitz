import React, { memo } from 'react';
import { View } from 'react-native';
import { isObject, isString, get } from 'lodash';
import PropTypes from 'prop-types';
import { Badge } from 'native-base';
import { Text, HelperStyle, Icon, getActiveProp, Validate } from '../../index';
import buildStyle from './style';

/**
 * Componente para indicar estados o para resaltar un elemento.
 *
 * @component
 */
const BadgeBCH = (props) => {
    const {
        text,
        children,
        icon,
        close,
        size,
        testID,
        accessibilityLabel,
        accessibilityHint,
        ...badgeProps
    } = props;
    const Styles = buildStyle(HelperStyle, size);
    const hasText = isObject(text) || isString(text);
    const getText = get(text, 'title', text);
    const renderText = () =>
        getText && (
            <Text
                smaller
                uppercase
                accessibilityLabel={Validate.safeLabel(
                    text?.props?.accessibilityLabel,
                    getText,
                )}
                accessibilityHint={Validate.safeLabel(
                    text?.props?.accessibilityHint,
                )}
                testID={Validate.safeLabel(text?.props?.testID, getText)}
                numberOfLines={1}
                ellipsizeMode="tail"
                {...text?.props}
            >
                {getText}
            </Text>
        );

    const getIconColor = () => {
        const colorsName = ['success', 'info', 'warning', 'danger', 'primary'];
        const colorName = getActiveProp(badgeProps, colorsName);
        if (colorName) return HelperStyle[colorName];
        return HelperStyle.gray_dark;
    };

    const getIconSize = () => {
        const { large } = props;
        if (large) return HelperStyle.fs_7;
        return HelperStyle.fs_1;
    };

    const renderIcon = () => {
        if (isString(icon)) {
            return (
                <Icon
                    name={icon}
                    style={[
                        getIconSize(),
                        getIconColor(),
                        hasText && Styles.iconTextStyle,
                    ]}
                />
            );
        }
        if (isObject(icon)) {
            return (
                <Icon
                    style={[
                        getIconSize(),
                        getIconColor(),
                        get(icon, 'style', null),
                        hasText && Styles.iconTextStyle,
                    ]}
                    {...icon}
                />
            );
        }
        return null;
    };

    const handlerContent = () => {
        if (children) return children;
        return (
            <View style={HelperStyle.flx_row}>
                {renderIcon()}
                {renderText()}
            </View>
        );
    };

    if (close) {
        return (
            <Badge
                close
                testID={testID}
                accessibilityLabel={accessibilityLabel}
                accessibilityHint={accessibilityHint}
                style={[
                    HelperStyle.as_fs,
                    HelperStyle.jc_c,
                    HelperStyle.ai_c,
                    badgeProps.style,
                ]}
            >
                <Icon name="icon-bch-close" style={Styles.iconClose} />
            </Badge>
        );
    }

    return (
        <Badge
            {...badgeProps}
            testID={testID}
            accessibilityLabel={accessibilityLabel}
            accessibilityHint={accessibilityHint}
            style={[
                HelperStyle.as_fs,
                HelperStyle.jc_c,
                HelperStyle.ai_c,
                Validate.style(size, Styles.customSize),
                badgeProps.style,
            ]}
        >
            {handlerContent()}
        </Badge>
    );
};

BadgeBCH.propTypes = {
    /**
     * Estilo estado success.
     */
    success: PropTypes.bool,
    /**
     * Estilo estado info.
     */
    info: PropTypes.bool,
    /**
     * Estilo estado warning.
     */
    warning: PropTypes.bool,
    /**
     * Estilo estado danger.
     */
    danger: PropTypes.bool,
    /**
     * Agrega icono cerrar.
     */
    close: PropTypes.bool,
    /**
     * Texto dentro del badge.
     */
    text: PropTypes.oneOfType([
        PropTypes.bool,
        PropTypes.string,
        PropTypes.object,
    ]),
    /**
     * Agrega un icono al badge.
     */
    icon: PropTypes.oneOfType([
        PropTypes.bool,
        PropTypes.string,
        PropTypes.object,
    ]),
    /**
     * Componente a renderizar dentro del badge.
     */
    children: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),
    /**
     * Estilos para icono tipo large.
     */
    large: PropTypes.bool,
    /**
     * Dimensi√≥n (width/height/borderRadius) del badge.
     */
    size: PropTypes.number,
    /**
     * Identificador para pruebas.
     */
    testID: PropTypes.string,
    /**
     * Identificador para accesibilidad.
     */
    accessibilityLabel: PropTypes.string,
    /**
     * Sugerencia de accesibilidad.
     */
    accessibilityHint: PropTypes.string,
};
BadgeBCH.defaultProps = {
    children: false,
    close: false,
    danger: false,
    icon: false,
    info: false,
    large: false,
    success: false,
    text: false,
    warning: false,
    size: null,
    testID: '',
    accessibilityLabel: '',
    accessibilityHint: '',
};

export default memo(BadgeBCH);
