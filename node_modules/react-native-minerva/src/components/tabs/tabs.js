import React, { memo } from 'react';
import PropTypes from 'prop-types';
import { Tabs } from 'native-base';
import { HelperStyle, ScrollableTab } from '../../index';
import Style from './style';

/**
 * Componente Tabs.
 *
 * @component
 */
const TabsBCH = (props) => {
    const {
        children,
        contentProps,
        initialPage,
        locked,
        onChangeTab,
        onScroll,
        page,
        ref,
        renderTabBar,
        scroll,
        scrollWithoutAnimation,
        style,
        tabBarPosition,
        tabBarUnderlineStyle,
        white,
    } = props;

    const renderScrollableTabs = () => (
        <ScrollableTab style={Style.scrollableTab} />
    );
    const customTabBarUnderlineStyle = white
        ? { ...Style.underlineStyle, ...HelperStyle.bg_white }
        : Style.underlineStyle;
    const defaultScroll = scroll ? renderScrollableTabs : null;
    const handleRenderTabBar = renderTabBar || defaultScroll;
    return (
        <Tabs
            initialPage={initialPage}
            locked={locked}
            onChangeTab={onChangeTab}
            onScroll={onScroll}
            page={page}
            ref={ref}
            renderTabBar={handleRenderTabBar}
            scroll={scroll}
            scrollWithoutAnimation={scrollWithoutAnimation}
            style={style}
            tabBarPosition={tabBarPosition}
            accessibilityRole="tablist"
            tabBarUnderlineStyle={
                tabBarUnderlineStyle || customTabBarUnderlineStyle
            }
            contentProps={contentProps}
            white={white}
        >
            {children}
        </Tabs>
    );
};

TabsBCH.propTypes = {
    /**
     * Pestañas (<Tab>) a renderizar dentro del contenedor de pestañas <Tabs />.
     */
    children: PropTypes.node.isRequired,
    /**
     * Objecto de props para el ScrollView dentro de Tabs cuando tabs sea scroll.
     */
    contentProps: PropTypes.shape({
        /**
         * Identificador para pruebas del ScrollView dentro de Tabs cuando tabs sea scroll.
         */
        testID: PropTypes.string,
    }),
    /**
     * Establece la pestañas (<Tab>) activa inicialmente.
     */
    initialPage: PropTypes.number,
    /**
     * Boleano que deshabilita el gesto deslizar (swipe).
     */
    locked: PropTypes.bool,
    /**
     * Función que se llama cuando cambia la pestaña.
     */
    onChangeTab: PropTypes.func,
    /**
     * Función que se llama cuando las páginas se deslizan.
     */
    onScroll: PropTypes.func,
    /**
     * Establece pestaña seleccionada.
     */
    page: PropTypes.number,
    /**
     * Referencia.
     */
    ref: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.string,
        PropTypes.shape({
            current: PropTypes.oneOfType([
                PropTypes.objectOf(PropTypes.any),
                PropTypes.string,
            ]),
        }),
    ]),
    /**
     * Renderiza <ScrollableTab />.
     */
    renderTabBar: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
    /**
     * Boleano que le agrega scroll a las pestañas (<Tab>).
     */
    scroll: PropTypes.bool,
    /**
     * Boleano que deshabilita la animación de cambio de pestaña.
     */
    scrollWithoutAnimation: PropTypes.bool,
    /**
     * Estilos personalizados.
     */
    style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
    /**
     * Establece la posición de las pestañas (<Tab>).
     */
    tabBarPosition: PropTypes.oneOf([
        'top',
        'bottom',
        'overlayTop',
        'overlayBottom',
    ]),
    /**
     * Estilos para la linea inferior de la pestaña (<Tab>) activa.
     */
    tabBarUnderlineStyle: PropTypes.oneOfType([
        PropTypes.object,
        PropTypes.array,
    ]),
    /**
     * Boleano para agregar estilo color white a linea inferior de la pestaña (<Tab>) activa.
     */
    white: PropTypes.bool,
};
TabsBCH.defaultProps = {
    contentProps: {},
    initialPage: 0,
    locked: false,
    onChangeTab: () => null,
    onScroll: () => null,
    page: -1,
    ref: null,
    renderTabBar: null,
    scroll: false,
    scrollWithoutAnimation: false,
    style: {},
    tabBarPosition: 'top',
    tabBarUnderlineStyle: null,
    white: false,
};

export default memo(TabsBCH);
