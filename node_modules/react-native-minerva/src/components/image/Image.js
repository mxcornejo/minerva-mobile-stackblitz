import React from 'react';
import PropTypes from 'prop-types';
import Animated from 'react-native-reanimated';
import FastImage from 'react-native-fast-image';
import Assets from 'bch-assets';
import { HelperStyle } from '../../index';
import useImage from './hook/useImage';
import IMAGE_STR from './ImageStr';
import { DEFAULT_TYPES, TYPES } from '../../constants/propTypes';

/**
 * Componente para cargar imagenes con source tipo url y manejar lo estados de carga y error.
 *
 * @component
 */
const Image = ({
    style,
    source,
    resizeMethod,
    resizeMode,
    accessibilityLabel,
    accessibilityRole,
    testID,
    accessible,
    testIDImagePlaceholder,
    styleLoading,
}) => {
    const {
        thumbnailAnimatedStyle,
        imageAnimatedStyle,
        errorLoad,
        onLoadEnd,
        onLoadStart,
        onError,
    } = useImage();
    const hasError = errorLoad !== '' || !source;
    return (
        <>
            <Animated.View style={thumbnailAnimatedStyle}>
                <FastImage
                    style={[
                        HelperStyle.p_a,
                        HelperStyle.bg_gray_lighter,
                        style,
                        styleLoading,
                    ]}
                    source={Assets.placeholder.imgLoading}
                    resizeMode={FastImage.resizeMode.contain}
                    resizeMethod={resizeMethod}
                    accessibilityRole={accessibilityRole}
                    testID={testIDImagePlaceholder}
                />
            </Animated.View>
            <Animated.Image
                style={[
                    imageAnimatedStyle,
                    style,
                    hasError && HelperStyle.bg_gray_lighter,
                ]}
                source={hasError ? Assets.placeholder.imgError : source}
                onLoadEnd={onLoadEnd}
                onLoadStart={onLoadStart}
                onError={onError}
                resizeMode={
                    hasError ? IMAGE_STR.resizeMode.contain : resizeMode
                }
                resizeMethod={resizeMethod}
                accessibilityLabel={accessibilityLabel}
                accessibilityRole={accessibilityRole}
                testID={testID}
                accessible={accessible}
            />
        </>
    );
};

Image.propTypes = {
    /**
     * Estilos.
     */
    style: TYPES.style,
    /**
     * Estilos para imagen loading.
     */
    styleLoading: TYPES.style,
    /**
     * Fuente de la imagen.
     */
    source: PropTypes.oneOfType([
        PropTypes.shape({
            uri: PropTypes.string,
        }),
        PropTypes.number,
        PropTypes.arrayOf(PropTypes.any),
    ]),
    /**
     * Determina cómo cambiar el tamaño de la imagen cuando el marco no coincide con las dimensiones de la imagen.
     */
    resizeMode: PropTypes.oneOf(Object.values(IMAGE_STR.resizeMode)),
    /**
     * Para Android: Determina cómo cambiar el tamaño de la imagen cuando el marco no coincide con las dimensiones de la imagen.
     */
    resizeMethod: PropTypes.oneOf(Object.values(IMAGE_STR.resizeMethod)),
    /**
     * Identificador para accesibilidad.
     */
    accessibilityLabel: PropTypes.string,
    /**
     * Identificador para pruebas.
     */
    testID: PropTypes.string,
    /**
     * Identificador para pruebas.
     */
    testIDImagePlaceholder: PropTypes.string,
    /**
     * Habilita la accesibilidad.
     */
    accessible: PropTypes.bool,
    /**
     * Comunica el propósito de un componente al usuario.
     */
    accessibilityRole: PropTypes.string,
};
Image.defaultProps = {
    source: null,
    style: DEFAULT_TYPES.style,
    styleLoading: DEFAULT_TYPES.style,
    resizeMode: IMAGE_STR.resizeMode.cover,
    resizeMethod: IMAGE_STR.resizeMethod.auto,
    accessibilityLabel: '',
    accessibilityRole: IMAGE_STR.accessibilityRole,
    testID: '',
    accessible: true,
    testIDImagePlaceholder: '',
};

export default Image;
