import React, { memo } from 'react';
import PropTypes from 'prop-types';
import { KeyboardAvoidingView, Platform } from 'react-native';
import { HelperStyle } from '../../index';
import KEYBOARDAVOIDINGVIEW_STR from './KeyboardAvoidingViewStr';

/**
 * Componente KeyboardAvoidingView.
 *
 * @component
 */
const KeyboardAvoidingViewBCH = ({
    children,
    style,
    behavior,
    keyboardVerticalOffset,
    enabled,
    hasDefaultKeyboardVerticalOffset,
    testID,
}) => {
    const isIOS = Platform.OS === 'ios';
    const defaultBehaviorByPlatform = isIOS
        ? KEYBOARDAVOIDINGVIEW_STR.behavior.padding
        : KEYBOARDAVOIDINGVIEW_STR.behavior.height;
    const currentBehavior = behavior || defaultBehaviorByPlatform;

    /**
     * Determina el valor por defecto de keyboardVerticalOffset.
     * Dependiendo del SO y del valor de behavior.
     */
    const getDefaultKeyboardVerticalOffset = () => {
        if (
            isIOS &&
            currentBehavior === KEYBOARDAVOIDINGVIEW_STR.behavior.padding
        ) {
            return (
                KEYBOARDAVOIDINGVIEW_STR.keyboardVerticalOffset.header +
                keyboardVerticalOffset
            );
        }
        return keyboardVerticalOffset;
    };
    const currentKeyboardVerticalOffset = hasDefaultKeyboardVerticalOffset
        ? getDefaultKeyboardVerticalOffset()
        : keyboardVerticalOffset;
    return (
        <KeyboardAvoidingView
            style={[HelperStyle.flx_i, style]}
            keyboardVerticalOffset={currentKeyboardVerticalOffset}
            behavior={currentBehavior}
            enabled={enabled}
            testID={testID}
        >
            {children}
        </KeyboardAvoidingView>
    );
};

KeyboardAvoidingViewBCH.propTypes = {
    /**
     * Identificador para pruebas.
     */
    testID: PropTypes.string,
    /**
     * Componente a renderizar.
     */
    children: PropTypes.node.isRequired,
    /**
     * Especifica el comportamiento del contenido cuando se abre el teclado.
     */
    behavior: PropTypes.oneOfType([
        PropTypes.oneOf(Object.keys(KEYBOARDAVOIDINGVIEW_STR.behavior)),
        PropTypes.bool,
    ]),
    /**
     * Distancia entre la parte superior de la pantalla del usuario y la vista nativa.
     */
    keyboardVerticalOffset: PropTypes.number,
    /**
     * Estilos.
     */
    style: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),
    /**
     * Habilita o deshabilita el KeyboardAvoidingView.
     */
    enabled: PropTypes.bool,
    /**
     * Boleano que agrega espaciado por defecto al keyboardVerticalOffset.
     */
    hasDefaultKeyboardVerticalOffset: PropTypes.bool,
};
KeyboardAvoidingViewBCH.defaultProps = {
    testID: KEYBOARDAVOIDINGVIEW_STR.testID,
    behavior: false,
    keyboardVerticalOffset: 0,
    style: {},
    enabled: true,
    hasDefaultKeyboardVerticalOffset: true,
};

export default memo(KeyboardAvoidingViewBCH);
