import React, { memo } from 'react';
import PropTypes from 'prop-types';
import { Icon, HelperStyle, Spacing } from '../../../index';
import { buttonPropTypes, buttonDefaultProps } from '../type';

/**
 * Componente icono del botÃ³n.
 *
 * @component
 */
const ButtonIcon = ({
    active,
    activeButtonColor,
    children,
    circle,
    condicionesSNEI,
    footerTab,
    iconAccessibilityLabel,
    iconAccessibilityHint,
    iconName,
    iconStyle,
    iconType,
    isDisabled,
    activeButtonSize,
    link,
}) => {
    const getIconSize = () => {
        const sizesIconCircleButton = {
            big: HelperStyle.fs_7,
            default: HelperStyle.fs_5,
            medium: HelperStyle.fs_3,
            small: HelperStyle.fs_3,
            smaller: HelperStyle.fs_3,
            tiny: { fontSize: Spacing.spacer_2 },
        };
        if (circle) {
            return (
                sizesIconCircleButton[activeButtonSize] ||
                sizesIconCircleButton.default
            );
        }
        return HelperStyle.fs_4;
    };
    const getIconStyle = () => {
        const marginRight = link ? HelperStyle.mr_2 : HelperStyle.mr_3;
        const iconColors = {
            primary: HelperStyle.white,
            secondary: HelperStyle.primary,
            neutral: HelperStyle.gray_dark,
            error: HelperStyle.danger,
            inverse: HelperStyle.white,
        };
        const iconColor = iconColors ? iconColors[activeButtonColor] : null;
        const style = [getIconSize(), iconStyle];
        if (footerTab) {
            style.push(active ? HelperStyle.primary : HelperStyle.gray);
            return style;
        }
        style.push(
            iconColor,
            children && marginRight,
            isDisabled && condicionesSNEI && HelperStyle.gray_lighter,
        );
        return style;
    };
    return (
        <Icon
            name={iconName}
            type={iconType}
            style={getIconStyle()}
            accessible
            accessibilityLabel={iconAccessibilityLabel}
            accessibilityHint={iconAccessibilityHint}
            testID={iconAccessibilityLabel}
        />
    );
};

ButtonIcon.propTypes = {
    active: buttonPropTypes.active,
    activeButtonColor: PropTypes.string,
    children: buttonPropTypes.children,
    circle: buttonPropTypes.circle,
    condicionesSNEI: PropTypes.bool.isRequired,
    footerTab: buttonPropTypes.footerTab,
    iconAccessibilityLabel: buttonPropTypes.iconAccessibilityLabel,
    iconAccessibilityHint: buttonPropTypes.iconAccessibilityHint,
    iconName: buttonPropTypes.iconName,
    iconStyle: buttonPropTypes.iconStyle,
    iconType: buttonPropTypes.iconType,
    isDisabled: PropTypes.bool.isRequired,
    activeButtonSize: PropTypes.string,
    link: buttonPropTypes.link,
};
ButtonIcon.defaultProps = {
    active: buttonDefaultProps.active,
    activeButtonColor: null,
    children: buttonDefaultProps.children,
    circle: buttonDefaultProps.circle,
    footerTab: buttonDefaultProps.footerTab,
    iconAccessibilityLabel: buttonDefaultProps.iconAccessibilityLabel,
    iconAccessibilityHint: buttonDefaultProps.iconAccessibilityHint,
    iconName: buttonDefaultProps.iconName,
    iconStyle: buttonDefaultProps.iconStyle,
    iconType: buttonDefaultProps.iconType,
    activeButtonSize: null,
    link: buttonDefaultProps.link,
};

export default memo(ButtonIcon);
