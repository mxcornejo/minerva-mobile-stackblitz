import PropTypes from 'prop-types';

const buttonPropTypes = {
    /**
     * Estilos para definir activo en botón tipo footerTab.
     */
    active: PropTypes.bool,
    /**
     * Componente que se muestra dentro del botón.
     */
    children: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),
    /**
     * Boleano para habilitar y deshabilitar el botón.
     */
    disabled: PropTypes.bool,
    /**
     * Boleano para definir botón de tipo error.
     */
    error: PropTypes.bool,
    /**
     * Botón de tipo tabBar para Tab.Navigator o footers.
     */
    footerTab: PropTypes.bool,
    /**
     * Identificador de accesibilidad para el icono del mensaje.
     */
    iconAccessibilityLabel: PropTypes.string,
    /**
     * Sugerencia de accesibilidad para el icono del mensaje.
     */
    iconAccessibilityHint: PropTypes.string,
    /**
     * Icono a mostrar dentro del Botón.
     */
    iconName: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),
    /**
     * Tipo de tipografía del icono.
     */
    iconType: PropTypes.oneOf(['icomoon', 'Ionicons']),
    /**
     * Estilos para el icono.
     */
    iconStyle: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),
    /**
     * Boleano para definir botón de tipo enlace.
     */
    link: PropTypes.bool,
    /**
     * Estilos para definir estado de carga.
     */
    loading: PropTypes.bool,
    /**
     * Boleano para definir botón de tipo neutral.
     */
    neutral: PropTypes.bool,
    /**
     * Acción del Botón.
     */
    onPress: PropTypes.func,
    /**
     * Boleano para definir botón de tipo primary.
     */
    primary: PropTypes.bool,
    /**
     * Boleano para definir botón de tipo secondary.
     */
    secondary: PropTypes.bool,
    /**
     * Boleano para definir botón de tipo inverse.
     */
    inverse: PropTypes.bool,
    /**
     * Boleano para definir botón tamaño small.
     */
    small: PropTypes.bool,
    /**
     * Boleano para definir botón tamaño smaller.
     */
    smaller: PropTypes.bool,
    /**
     * Boleano para definir botón con ancho al 100%.
     */
    block: PropTypes.bool,
    /**
     * Boleano para definir botón con forma circular.
     */
    circle: PropTypes.bool,
    /**
     * Boleano para definir botón tamaño big.
     */
    big: PropTypes.bool,
    /**
     * Boleano para definir botón tamaño tiny.
     */
    tiny: PropTypes.bool,
    /**
     * Boleano para definir botón tamaño medium.
     */
    medium: PropTypes.bool,
    /**
     * Identificador para pruebas.
     */
    testID: PropTypes.string,
    /**
     * Identificador para accesibilidad.
     */
    accessibilityLabel: PropTypes.string,
    /**
     * Sugerencia de accesibilidad.
     */
    accessibilityHint: PropTypes.string,
    /**
     * Comunica el propósito de un componente al usuario.
     */
    accessibilityRole: PropTypes.string,
};
const buttonDefaultProps = {
    active: false,
    big: false,
    block: false,
    children: false,
    circle: false,
    disabled: false,
    error: false,
    footerTab: false,
    iconAccessibilityLabel: '',
    iconAccessibilityHint: '',
    iconName: false,
    iconStyle: {},
    iconType: null,
    inverse: false,
    link: false,
    loading: false,
    medium: false,
    neutral: false,
    onPress: () => null,
    primary: false,
    secondary: false,
    small: false,
    smaller: false,
    tiny: false,
    testID: '',
    accessibilityLabel: '',
    accessibilityHint: '',
    accessibilityRole: 'button',
};

export { buttonPropTypes, buttonDefaultProps };
