import React, { memo, useState, useEffect } from 'react';
import { Button } from 'native-base';
import { View } from 'react-native';
import Animated, {
    useSharedValue,
    useAnimatedStyle,
    useDerivedValue,
    interpolate,
    withTiming,
} from 'react-native-reanimated';
import {
    HelperStyle,
    BounceIndicator,
    getActiveProp,
    Validate,
} from '../../index';
import Style from './style';
import ButtonIcon from './components/ButtonIcon';
import ButtonColor from './components/ButtonColor';
import { buttonPropTypes, buttonDefaultProps } from './type';

/**
 * Componente botÃ³n.
 *
 * @component
 */
const ButtonBCH = (props) => {
    const {
        active,
        block,
        children,
        circle,
        disabled,
        error,
        footerTab,
        iconAccessibilityLabel,
        iconAccessibilityHint,
        iconName,
        iconStyle,
        iconType,
        inverse,
        link,
        loading,
        medium,
        neutral,
        onPress,
        primary,
        secondary,
        small,
        smaller,
        tiny,
        testID,
        accessibilityLabel,
        accessibilityHint,
        accessibilityRole,
    } = props;
    const isDisabled = loading || disabled;
    const [showLoading, setShowLoading] = useState(false);
    const [didMount, setDidMount] = useState(false);
    const durationAnimation = 250;
    const animationValue = loading ? 0 : 1;
    const animationOpacity = useSharedValue(animationValue);
    const condicionesSNEI = secondary || neutral || error || inverse;
    const buttonColors = [
        'secondary',
        'neutral',
        'error',
        'inverse',
        'primary',
    ];
    const activeButtonColor = getActiveProp(props, buttonColors);
    const buttonSizes = ['big', 'medium', 'small', 'smaller', 'tiny'];
    const activeButtonSize = getActiveProp(props, buttonSizes);
    const accessibilityRoles = ['link', 'tab'];
    const activeAccessibilityRole =
        getActiveProp(props, accessibilityRoles) || accessibilityRole;
    const hasIcon = iconName;
    useEffect(() => {
        const toggleLoadingIndicators = () => {
            setShowLoading(loading);
            animationOpacity.value = withTiming(animationValue, {
                duration: durationAnimation / 2,
            });
        };
        if (didMount) {
            toggleLoadingIndicators();
        } else {
            setDidMount(true);
            setShowLoading(loading);
        }
    }, [
        animationOpacity,
        animationOpacity.value,
        animationValue,
        didMount,
        loading,
    ]);

    const renderIcon = () =>
        hasIcon && (
            <ButtonIcon
                active={active}
                activeButtonColor={activeButtonColor}
                activeButtonSize={activeButtonSize}
                circle={circle}
                condicionesSNEI={condicionesSNEI}
                error={error}
                footerTab={footerTab}
                iconAccessibilityLabel={iconAccessibilityLabel}
                iconAccessibilityHint={iconAccessibilityHint}
                iconName={iconName}
                iconStyle={iconStyle}
                iconType={iconType}
                inverse={inverse}
                isDisabled={isDisabled}
                neutral={neutral}
                primary={primary}
                secondary={secondary}
                link={link}
            >
                {children}
            </ButtonIcon>
        );

    const animationButtonBodyStyle = useAnimatedStyle(() => ({
        opacity: animationOpacity.value,
    }));

    const interpolateLoading = useDerivedValue(() =>
        interpolate(animationOpacity.value, [0, 1], [1, 0]),
    );

    const animationLoadingStyle = useAnimatedStyle(() => ({
        opacity: interpolateLoading.value,
    }));

    const renderButtonBody = () => {
        const renderBounceIndicator = () => showLoading && <BounceIndicator />;
        return (
            <>
                <Animated.View
                    style={[
                        animationButtonBodyStyle,
                        HelperStyle.flx_row,
                        Validate.style(hasIcon, HelperStyle.ai_c),
                    ]}
                >
                    {renderIcon()}
                    {children}
                </Animated.View>
                <Animated.View style={[animationLoadingStyle, HelperStyle.p_a]}>
                    {renderBounceIndicator()}
                </Animated.View>
            </>
        );
    };

    const buttonType = () => {
        if (link) {
            return (
                <>
                    {renderIcon()}
                    {children}
                </>
            );
        }
        if (footerTab) {
            return (
                <>
                    <View
                        style={[
                            active && HelperStyle.bg_primary,
                            Style.borderFooterTab,
                        ]}
                    />
                    {renderIcon()}
                    {children}
                </>
            );
        }
        return (
            <ButtonColor
                activeButtonColor={activeButtonColor}
                activeButtonSize={activeButtonSize}
                block={block}
                circle={circle}
                condicionesSNEI={condicionesSNEI}
                durationAnimation={durationAnimation}
                error={error}
                inverse={inverse}
                isDisabled={isDisabled}
                medium={medium}
                neutral={neutral}
                onPress={onPress}
                primary={primary}
                secondary={secondary}
                showLoading={showLoading}
                small={small}
                smaller={smaller}
                tiny={tiny}
            >
                {renderButtonBody()}
            </ButtonColor>
        );
    };

    return (
        <Button
            {...props}
            disabled={isDisabled}
            testID={testID}
            accessibilityLabel={accessibilityLabel}
            accessibilityHint={accessibilityHint}
            accessibilityRole={activeAccessibilityRole}
        >
            {buttonType()}
        </Button>
    );
};

ButtonBCH.propTypes = {
    active: buttonPropTypes.active,
    children: buttonPropTypes.children,
    disabled: buttonPropTypes.disabled,
    error: buttonPropTypes.error,
    footerTab: buttonPropTypes.footerTab,
    iconAccessibilityLabel: buttonPropTypes.iconAccessibilityLabel,
    iconAccessibilityHint: buttonPropTypes.iconAccessibilityHint,
    iconName: buttonPropTypes.iconName,
    iconType: buttonPropTypes.iconType,
    iconStyle: buttonPropTypes.iconStyle,
    link: buttonPropTypes.link,
    loading: buttonPropTypes.loading,
    neutral: buttonPropTypes.neutral,
    onPress: buttonPropTypes.onPress,
    primary: buttonPropTypes.primary,
    secondary: buttonPropTypes.secondary,
    inverse: buttonPropTypes.inverse,
    small: buttonPropTypes.small,
    smaller: buttonPropTypes.smaller,
    block: buttonPropTypes.block,
    circle: buttonPropTypes.circle,
    big: buttonPropTypes.big,
    tiny: buttonPropTypes.tiny,
    medium: buttonPropTypes.medium,
    testID: buttonPropTypes.testID,
    accessibilityLabel: buttonPropTypes.accessibilityLabel,
    accessibilityHint: buttonPropTypes.accessibilityHint,
    accessibilityRole: buttonPropTypes.accessibilityRole,
};
ButtonBCH.defaultProps = {
    active: buttonDefaultProps.active,
    big: buttonDefaultProps.big,
    block: buttonDefaultProps.block,
    children: buttonDefaultProps.children,
    circle: buttonDefaultProps.circle,
    disabled: buttonDefaultProps.disabled,
    error: buttonDefaultProps.error,
    footerTab: buttonDefaultProps.footerTab,
    iconAccessibilityLabel: buttonDefaultProps.iconAccessibilityLabel,
    iconAccessibilityHint: buttonDefaultProps.iconAccessibilityHint,
    iconName: buttonDefaultProps.iconName,
    iconStyle: buttonDefaultProps.iconStyle,
    iconType: buttonDefaultProps.iconType,
    inverse: buttonDefaultProps.inverse,
    link: buttonDefaultProps.link,
    loading: buttonDefaultProps.loading,
    medium: buttonDefaultProps.medium,
    neutral: buttonDefaultProps.neutral,
    onPress: buttonDefaultProps.onPress,
    primary: buttonDefaultProps.primary,
    secondary: buttonDefaultProps.secondary,
    small: buttonDefaultProps.small,
    smaller: buttonDefaultProps.smaller,
    tiny: buttonDefaultProps.tiny,
    testID: buttonDefaultProps.testID,
    accessibilityLabel: buttonDefaultProps.accessibilityLabel,
    accessibilityHint: buttonDefaultProps.accessibilityHint,
    accessibilityRole: buttonDefaultProps.accessibilityRole,
};

export default memo(ButtonBCH);
