import React, { memo } from 'react';
import PropTypes from 'prop-types';
import { size } from 'lodash';
import { Animated } from 'react-native';
import { View, HelperStyle, Spacing, Scale } from '../../../index';
import Style from '../style';
import CAROUSEL_STR from '../CarouselStr';

const BackgroundAnimation = ({ children, animation, data, width }) => {
    const getInterpolate = (range) => {
        let outputRange = [];
        let inputRange = [];
        if (size(data) > 1) {
            data.forEach((v, i) => {
                const even = i % 2 === 0;
                inputRange.push(width * i);
                if (even) {
                    outputRange.push(range.in);
                } else {
                    outputRange.push(range.out);
                }
            });
        } else {
            inputRange = [0, width];
            outputRange = [0, range.in];
        }
        return animation.interpolate({
            inputRange,
            outputRange,
        });
    };
    const getAnimationStyle = (circle) => {
        let range = {};
        switch (circle) {
            case 'small':
                range = {
                    x: { in: 0, out: 0 },
                    y: { in: Scale(128), out: 0 },
                };
                break;
            case 'large':
                range = {
                    x: { in: Scale(80), out: 0 },
                    y: { in: -Spacing.spacer_7, out: 0 },
                };
                break;
            default:
                range = {
                    x: { in: -Scale(125), out: Scale(10) },
                    y: { in: Scale(45), out: 0 },
                };
        }
        return {
            transform: [
                { translateY: getInterpolate(range.y) },
                { translateX: getInterpolate(range.x) },
            ],
        };
    };
    return (
        <View
            style={[HelperStyle.flx_i, HelperStyle.jc_c]}
            testID={CAROUSEL_STR.backgroundAnimation.testID}
        >
            <View style={[Style.carouselContainer, HelperStyle.flx_i]}>
                {children}
            </View>
            <View style={Style.circleContainer}>
                <Animated.View
                    style={[
                        Style.circleMedium,
                        getAnimationStyle('medium'),
                        HelperStyle.bg_brand_background,
                    ]}
                />
                <Animated.View
                    style={[
                        Style.circleLarge,
                        getAnimationStyle('large'),
                        HelperStyle.bg_brand_background,
                    ]}
                />
                <Animated.View
                    style={[
                        Style.circleSmall,
                        getAnimationStyle('small'),
                        HelperStyle.bg_brand_lighter,
                    ]}
                />
            </View>
        </View>
    );
};

BackgroundAnimation.propTypes = {
    data: PropTypes.arrayOf(PropTypes.any).isRequired,
    children: PropTypes.oneOfType([
        PropTypes.arrayOf(PropTypes.node),
        PropTypes.node,
    ]).isRequired,
    animation: PropTypes.instanceOf(Animated.Value).isRequired,
    width: PropTypes.number.isRequired,
};

export default memo(BackgroundAnimation);
