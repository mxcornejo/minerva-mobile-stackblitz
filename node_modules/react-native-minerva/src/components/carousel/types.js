import PropTypes from 'prop-types';
import CAROUSEL_STR from './CarouselStr';

const buttonLastItemPropTypes = {
    /**
     * Determina la alineación de los elementos activos en relación con el Carousel. Los valores posibles son: 'start', 'center' y 'end'.
     */
    activeSlideAlignment: PropTypes.oneOf(['start', 'center', 'end']),
    /**
     * Texto del botón ultimo elemento.
     */
    title: PropTypes.string,
    /**
     * Estilos del botón ultimo elemento.
     */
    style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
    /**
     * Identificador de pruebas.
     */
    testID: PropTypes.string,
    /**
     * Identificador de accesibilidad para Image.
     */
    accessibilityLabel: PropTypes.string,
    /**
     * Sugerencia de accesibilidad para Image.
     */
    accessibilityHint: PropTypes.string,
};

const buttonLastItemDefaultProps = {
    activeSlideAlignment: CAROUSEL_STR.buttonLastItem.activeSlideAlignment,
    title: CAROUSEL_STR.buttonLastItem.title,
    style: null,
    testID: CAROUSEL_STR.buttonLastItem.testID,
    accessibilityLabel: CAROUSEL_STR.buttonLastItem.accessibilityLabel,
    accessibilityHint: '',
};

const carouselPropTypes = {
    /**
     * Boleano para mostrar animacion que responde al scrollEvent.
     */
    backgroundAnimation: PropTypes.bool,
    /**
     * El ancho de los elementos.
     */
    itemWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.bool]),
    /**
     * Referencia.
     */
    refCarousel: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.string,
        PropTypes.shape({ current: PropTypes.objectOf(PropTypes.any) }),
    ]),
    /**
     * Altura del Carousel.
     */
    sliderHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.bool]),
    /**
     * Ancho del Carousel.
     */
    sliderWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.bool]),
    /**
     * Estilos pre definidos para los elementos del Carousel.
     */
    carouselStyle: PropTypes.oneOf(['default', 'card']),
    /**
     * Boleano para agregar un contenedor a cada elemento en la data.
     */
    containerItem: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),
    /**
     * Estilos para el containerItem.
     */
    containerItemStyle: PropTypes.oneOfType([
        PropTypes.object,
        PropTypes.array,
    ]),
    /**
     * Boleano para mostrar paginación.
     */
    pagination: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),
    /**
     * Índice del primer elemento a mostrar.
     */
    firstItem: PropTypes.number,
    /**
     * Determina la alineación de los elementos activos en relación con el Carousel. Los valores posibles son: 'start', 'center' y 'end'.
     */
    activeSlideAlignment: PropTypes.oneOf(['start', 'center', 'end']),
    /**
     * Determina la cantidad maxima de elementos a mostrar en el Carousel.
     */
    maxItems: PropTypes.oneOfType([
        PropTypes.number,
        PropTypes.string,
        PropTypes.bool,
    ]),
    /**
     * Renderiza un componente en la ultima posición del Carousel.
     */
    renderMaxItems: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),
    /**
     * Objecto para configurar <Button /> que renderiza en la ultima posición del Carousel si la propiedad maxItems esta definida en true.
     */
    maxItemsButton: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),
    /**
     * Boleano para mostrar renderError.
     */
    error: PropTypes.bool,
    /**
     * Boleano para mostrar renderLoading.
     */
    loading: PropTypes.bool,
    /**
     * Componnete que renderiza si error esta definido en true.
     */
    renderError: PropTypes.func,
    /**
     * Componnete que renderiza si loading esta definido en true.
     */
    renderLoading: PropTypes.func,
    /**
     * Estilos para el contenedor del Scrollview.
     */
    contentContainerCustomStyle: PropTypes.oneOfType([
        PropTypes.object,
        PropTypes.array,
    ]),
    /**
     * Arreglo con la data de los elementos del Carousel.
     */
    data: PropTypes.arrayOf(PropTypes.any).isRequired,
    /**
     * Función que renderiza por cada elemento de data.
     */
    renderItem: PropTypes.func.isRequired,
    /**
     * Función que se llama cuando cambia de elemento activo.
     */
    onSnapToItem: PropTypes.func,
};
const carouselDefaultProps = {
    backgroundAnimation: false,
    itemWidth: false,
    refCarousel: undefined,
    sliderHeight: false,
    sliderWidth: false,
    carouselStyle: 'default',
    containerItem: undefined,
    pagination: false,
    firstItem: 0,
    activeSlideAlignment: 'start',
    maxItems: false,
    renderMaxItems: false,
    maxItemsButton: true,
    error: false,
    loading: false,
    renderError: null,
    renderLoading: null,
    contentContainerCustomStyle: {},
    containerItemStyle: {},
    onSnapToItem: undefined,
};

export {
    carouselPropTypes,
    carouselDefaultProps,
    buttonLastItemPropTypes,
    buttonLastItemDefaultProps,
};
