import React, { memo } from 'react';
import { Switch } from 'native-base';
import { MaterialIndicator } from 'react-native-indicators';
import { View, HelperStyle, Platform } from '../../index';
import buildStyle from './style';
import SwitchLabel from './SwitchLabel';
import { SwitchpropTypes, SwitchdefaultProps } from './type';

/**
 * Componente para manejar estado activo/inactivo.
 *
 * @component
 */
const SwitchBCH = (props) => {
    const { label, renderLabel, labelRight, value, disabled, loading, style } =
        props;

    const Style = buildStyle(HelperStyle, labelRight);

    const getThumbColor = () => {
        const isAndroidWithValue = Platform.android && value;
        if (isAndroidWithValue && disabled) {
            return HelperStyle.primary_lighter.color;
        }
        if (isAndroidWithValue) return HelperStyle.primary.color;
        return HelperStyle.white.color;
    };

    const getTrackColor = () => {
        const colors = {
            true: HelperStyle.primary.color,
            false: HelperStyle.gray_light.color,
        };
        if (Platform.android) {
            colors.true = HelperStyle.primary_lighter.color;
            if (disabled) {
                colors.true = HelperStyle.primary_transparent.color;
                colors.false = HelperStyle.gray_lighter.color;
            }
        }
        return colors;
    };

    const propsColors = {
        ios_backgroundColor: disabled
            ? HelperStyle.gray_lighter.color
            : HelperStyle.gray.color,
        trackColor: getTrackColor(),
        thumbColor: getThumbColor(),
    };

    const renderLoading = () =>
        loading && (
            <View style={Style.containerloading}>
                <MaterialIndicator
                    color={HelperStyle.primary.color}
                    size={HelperStyle.fs_6.fontSize}
                />
            </View>
        );

    const getSwitch = () => (
        <View style={[HelperStyle.p_r, HelperStyle.jc_c]}>
            {renderLoading()}
            <Switch
                {...propsColors}
                {...props}
                accessibilityRole="switch"
                style={[style, loading && HelperStyle.o_0]}
            />
        </View>
    );

    if (label) {
        return (
            <View style={Style.containerSwitchWithLabel}>
                <View style={Style.containerLabel}>
                    <SwitchLabel label={label} renderLabel={renderLabel} />
                </View>
                <View style={Style.colSwitch}>{getSwitch()}</View>
            </View>
        );
    }
    return getSwitch();
};

SwitchBCH.propTypes = {
    label: SwitchpropTypes.label,
    labelRight: SwitchpropTypes.labelRight,
    renderLabel: SwitchpropTypes.renderLabel,
    disabled: SwitchpropTypes.disabled,
    value: SwitchpropTypes.value,
    loading: SwitchpropTypes.loading,
    style: SwitchpropTypes.style,
};
SwitchBCH.defaultProps = {
    label: SwitchdefaultProps.label,
    labelRight: SwitchdefaultProps.labelRight,
    renderLabel: SwitchdefaultProps.renderLabel,
    disabled: SwitchdefaultProps.disabled,
    value: SwitchdefaultProps.value,
    loading: SwitchdefaultProps.loading,
    style: SwitchdefaultProps.style,
};

export default memo(SwitchBCH);
