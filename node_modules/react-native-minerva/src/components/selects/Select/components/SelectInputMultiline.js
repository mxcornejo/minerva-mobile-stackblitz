import React, { memo } from 'react';
import { isEmpty } from 'lodash';
import PropTypes from 'prop-types';
import {
    HelperStyle,
    View,
    Right,
    InputHelperText,
    Text,
    Paragraph,
} from '../../../../index';
import IconSelect from '../../components/IconSelect';

const SelectInputMultiline = ({
    error,
    disabled,
    style,
    helperText,
    label,
    itemSelected,
}) => {
    const getBorderStyle = () => {
        let bordeStyle = { ...HelperStyle.bc_gray_light, ...HelperStyle.bw_1 };
        if (disabled) {
            bordeStyle = { ...bordeStyle, ...HelperStyle.bc_gray_lighter };
        }
        if (error) {
            bordeStyle = { ...HelperStyle.bc_danger, ...HelperStyle.bw_2 };
        }
        return bordeStyle;
    };

    const borderStyle = getBorderStyle();

    const renderHelperText = () =>
        !isEmpty(helperText) && (
            <InputHelperText error={error}>{helperText}</InputHelperText>
        );

    const parseDataParagraph = (data) =>
        data.map((item) => {
            if (typeof item === 'object') return { ...item, text: item?.label };
            return item;
        });

    const handleRenderText = () => {
        if (itemSelected) {
            const dataParagraph = parseDataParagraph(itemSelected?.label);
            return (
                <Paragraph
                    style={[HelperStyle.mb_0, HelperStyle.gray_dark]}
                    items={dataParagraph}
                />
            );
        }
        return <Text style={HelperStyle.mb_0}>{label}</Text>;
    };

    return (
        <View style={[HelperStyle.mb_4, style]}>
            <View
                style={[
                    borderStyle,
                    HelperStyle.pv_3,
                    HelperStyle.ph_4,
                    HelperStyle.br_2,
                    HelperStyle.flx_i,
                    HelperStyle.flx_row,
                    HelperStyle.jc_sb,
                    HelperStyle.ai_c,
                    HelperStyle.minHeight(74),
                ]}
            >
                {handleRenderText()}
                <Right style={HelperStyle.flx_grow}>
                    <IconSelect disabled={disabled} style={HelperStyle.ml_3} />
                </Right>
            </View>
            {renderHelperText()}
        </View>
    );
};

SelectInputMultiline.propTypes = {
    label: PropTypes.string,
    error: PropTypes.bool,
    disabled: PropTypes.bool,
    helperText: PropTypes.string,
    style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
    itemSelected: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number,
        PropTypes.arrayOf(PropTypes.any),
        PropTypes.objectOf(PropTypes.any),
    ]),
};
SelectInputMultiline.defaultProps = {
    label: '',
    error: false,
    disabled: false,
    helperText: '',
    style: {},
    itemSelected: '',
};

export default memo(SelectInputMultiline);
