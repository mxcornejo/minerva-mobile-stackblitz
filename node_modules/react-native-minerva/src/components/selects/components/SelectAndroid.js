import React, { memo, useState, useEffect } from 'react';
import { isObject, has } from 'lodash';
import PropTypes from 'prop-types';
import { View } from 'native-base';
import { TouchableOpacity } from 'react-native';
import { Picker } from '@react-native-picker/picker';
import DateTimePicker from './DateTimePicker';
import { selectPropTypes, selectDefaultProps } from '../type';
import { HelperStyle, minerva, Spacing } from '../../../index';

const { inputHeightBase } = minerva();

const SelectAndroid = (props) => {
    const {
        items,
        onValueChange,
        renderInput,
        selectedValue,
        firstPickerItem,
        label,
        styleContainer,
        dateTimePicker,
        onChange,
        disabled,
        pickerTestID,
        pickerAccessibilityLabel,
        pickerAccessibilityHint,
    } = props;
    const [show, setShow] = useState(false);
    const defaultFirstPickerItem = [
        { value: 'seleccione', label: `Seleccione ${label}` },
    ].concat(items);
    const [selectItem, setSelectItem] = useState(defaultFirstPickerItem);

    useEffect(() => {
        if (
            isObject(firstPickerItem) &&
            has(firstPickerItem, 'value') &&
            has(firstPickerItem, 'label')
        ) {
            const { value, labe: itemLabel } = firstPickerItem;
            setSelectItem([{ value, label: itemLabel }].concat(items));
        }
        setSelectItem(defaultFirstPickerItem);
    }, [items]);

    const handlerOnChange = (event, selectedDate) => {
        setShow(false);
        if (onChange) onChange(event, selectedDate);
    };

    const renderDateTimePicker = () => {
        if (show) {
            return (
                <DateTimePicker
                    {...props}
                    onChange={handlerOnChange}
                    testID={pickerTestID}
                    accessibilityLabel={pickerAccessibilityLabel}
                    accessibilityHint={pickerAccessibilityHint}
                />
            );
        }
        return null;
    };

    const showDateTimePicker = () => setShow(true);

    if (dateTimePicker) {
        return (
            <TouchableOpacity
                style={styleContainer}
                onPress={showDateTimePicker}
                disabled={disabled}
                accessibilityRole="none"
            >
                {renderInput()}
                {renderDateTimePicker()}
            </TouchableOpacity>
        );
    }

    return (
        <View style={styleContainer}>
            {renderInput()}
            <Picker
                selectedValue={selectedValue}
                style={[
                    HelperStyle.p_a,
                    HelperStyle.top(Spacing.spacer_2),
                    HelperStyle.l_0,
                    HelperStyle.w_100,
                    HelperStyle.height(inputHeightBase),
                    HelperStyle.o_0,
                ]}
                onValueChange={onValueChange}
                itemStyle={HelperStyle.black}
                enabled={!disabled}
                testID={pickerTestID}
                accessibilityLabel={pickerAccessibilityLabel}
                accessibilityHint={pickerAccessibilityHint}
            >
                {selectItem.map((option) => (
                    <Picker.Item
                        key={option.value}
                        value={option.value}
                        label={option.label}
                        testID={option.value}
                    />
                ))}
            </Picker>
        </View>
    );
};

SelectAndroid.propTypes = {
    items: selectPropTypes.items,
    onValueChange: selectPropTypes.onValueChange,
    renderInput: PropTypes.func.isRequired,
    selectedValue: selectPropTypes.selectedValue,
    renderfirstPickerItem: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.bool,
    ]),
    label: selectPropTypes.label,
    disabled: PropTypes.bool,
    firstPickerItem: selectPropTypes.firstPickerItem,
    styleContainer: selectPropTypes.styleContainer,
    dateTimePicker: PropTypes.bool,
    onChange: PropTypes.func,
    pickerTestID: selectPropTypes.pickerTestID,
    pickerAccessibilityLabel: selectPropTypes.pickerAccessibilityLabel,
    pickerAccessibilityHint: selectPropTypes.pickerAccessibilityHint,
};
SelectAndroid.defaultProps = {
    items: selectDefaultProps.items,
    onValueChange: selectDefaultProps.onValueChange,
    selectedValue: selectDefaultProps.selectedValue,
    renderfirstPickerItem: false,
    label: selectDefaultProps.label,
    disabled: false,
    firstPickerItem: selectDefaultProps.firstPickerItem,
    styleContainer: selectDefaultProps.styleContainer,
    dateTimePicker: false,
    onChange: () => null,
    pickerTestID: selectDefaultProps.pickerTestID,
    pickerAccessibilityLabel: selectDefaultProps.pickerAccessibilityLabel,
    pickerAccessibilityHint: selectDefaultProps.pickerAccessibilityHint,
};

export default memo(SelectAndroid);
