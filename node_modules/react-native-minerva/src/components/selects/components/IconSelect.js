import React, { memo, useEffect } from 'react';
import PropTypes from 'prop-types';
import Animated, {
    useSharedValue,
    useAnimatedStyle,
    interpolate,
    useDerivedValue,
    withTiming,
} from 'react-native-reanimated';
import { Icon, HelperStyle } from '../../../index';

const IconSelect = (props) => {
    const { inverse, disabled, style, isOpen, animated } = props;
    const animation = useSharedValue(0);

    useEffect(() => {
        const toggleAnimation = () => {
            const toValue = isOpen ? 1 : 0;
            animation.value = withTiming(toValue, {
                duration: 300,
            });
        };
        toggleAnimation();
    }, [isOpen]);

    const interpolateRotateX = useDerivedValue(() =>
        interpolate(animation.value, [0, 1], [0, 180]),
    );

    const animatedStyle = useAnimatedStyle(() => ({
        transform: [{ rotateX: `${interpolateRotateX.value}deg` }],
    }));

    const iconStyle = {
        ...(inverse && HelperStyle.white),
        ...(disabled ? HelperStyle.gray_lighter : HelperStyle.gray),
        ...HelperStyle.fs_1,
    };

    const renderIcon = () => <Icon {...props} style={[iconStyle, style]} />;

    if (animated) {
        return (
            <Animated.View style={animatedStyle}>{renderIcon()}</Animated.View>
        );
    }
    return renderIcon();
};

IconSelect.propTypes = {
    name: PropTypes.string,
    inverse: PropTypes.bool,
    isOpen: PropTypes.bool,
    disabled: PropTypes.bool,
    animated: PropTypes.bool,
    style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
};
IconSelect.defaultProps = {
    name: 'icon-bch-chevron-down',
    inverse: false,
    isOpen: false,
    disabled: false,
    animated: false,
    style: {},
};

export default memo(IconSelect);
