import React, { memo } from 'react';
import PropTypes from 'prop-types';
import { TouchableOpacity, SafeAreaView } from 'react-native';
import { Picker } from '@react-native-picker/picker';
import Modal from 'react-native-modal';
import { HelperStyle, View, Text } from '../../../index';
import DateTimePicker from './DateTimePicker';
import { selectPropTypes, selectDefaultProps } from '../type';

const SelectIOS = (props) => {
    const {
        closeModal,
        isVisibleModal,
        items,
        onValueChange,
        openModal,
        renderInput,
        selectedValue,
        onPressLeftButton,
        onPressRightButton,
        textRightButton,
        textLeftButton,
        styleContainer,
        disabled,
        dateTimePicker,
        pickerTestID,
        pickerAccessibilityLabel,
        pickerAccessibilityHint,
    } = props;

    const renderTypePicker = () => {
        if (dateTimePicker) {
            return (
                <DateTimePicker
                    {...props}
                    testID={pickerTestID}
                    accessibilityLabel={pickerAccessibilityLabel}
                    accessibilityHint={pickerAccessibilityHint}
                />
            );
        }
        return (
            <SafeAreaView>
                <Picker
                    selectedValue={selectedValue}
                    style={HelperStyle.w_100}
                    onValueChange={onValueChange}
                    itemStyle={HelperStyle.black}
                    testID={pickerTestID}
                    accessibilityLabel={pickerAccessibilityLabel}
                    accessibilityHint={pickerAccessibilityHint}
                >
                    {items.map((option) => (
                        <Picker.Item
                            key={option.value}
                            value={option.value}
                            label={option.label}
                            testID={option.value}
                        />
                    ))}
                </Picker>
            </SafeAreaView>
        );
    };

    return (
        <View style={styleContainer}>
            <TouchableOpacity
                onPress={openModal}
                accessible={false}
                disabled={disabled}
            >
                {renderInput()}
            </TouchableOpacity>
            <Modal
                animationType="slide"
                backdropOpacity={0}
                animationOutTiming={50}
                backdropTransitionOutTiming={50}
                isVisible={isVisibleModal}
                style={[HelperStyle.jc_fe, HelperStyle.ma_0]}
                onSwipeComplete={closeModal}
                onBackdropPress={closeModal}
                onBackButtonPress={closeModal}
            >
                <View style={HelperStyle.bg_gray_lighter}>
                    <View
                        style={[
                            HelperStyle.bg_gray_background,
                            HelperStyle.bc_gray_lighter,
                            HelperStyle.pa_0,
                            HelperStyle.flx_row,
                            HelperStyle.jc_sb,
                            HelperStyle.ai_c,
                            HelperStyle.ph_3,
                            HelperStyle.btw_1,
                            HelperStyle.zIndex(2),
                        ]}
                    >
                        <TouchableOpacity
                            onPress={onPressLeftButton}
                            accessible={false}
                        >
                            <Text
                                allowFontScaling={false}
                                style={[
                                    HelperStyle.pa_2,
                                    HelperStyle.mb_0,
                                    HelperStyle.primary,
                                    HelperStyle.ta_l,
                                ]}
                            >
                                {textLeftButton}
                            </Text>
                        </TouchableOpacity>
                        <TouchableOpacity
                            onPress={onPressRightButton}
                            accessible={false}
                        >
                            <Text
                                allowFontScaling={false}
                                style={[
                                    HelperStyle.pa_2,
                                    HelperStyle.mb_0,
                                    HelperStyle.primary,
                                    HelperStyle.ta_l,
                                ]}
                            >
                                {textRightButton}
                            </Text>
                        </TouchableOpacity>
                    </View>
                    {renderTypePicker()}
                </View>
            </Modal>
        </View>
    );
};

SelectIOS.propTypes = {
    closeModal: PropTypes.func.isRequired,
    isVisibleModal: PropTypes.bool.isRequired,
    items: selectPropTypes.items,
    onValueChange: selectPropTypes.onValueChange,
    openModal: PropTypes.func.isRequired,
    renderInput: PropTypes.func.isRequired,
    selectedValue: selectPropTypes.selectedValue,
    textRightButton: selectPropTypes.textRightButton,
    textLeftButton: selectPropTypes.textLeftButton,
    onPressLeftButton: PropTypes.func.isRequired,
    onPressRightButton: PropTypes.func.isRequired,
    styleContainer: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
    disabled: PropTypes.bool,
    dateTimePicker: PropTypes.bool,
    pickerTestID: selectPropTypes.pickerTestID,
    pickerAccessibilityLabel: selectPropTypes.pickerAccessibilityLabel,
    pickerAccessibilityHint: selectPropTypes.pickerAccessibilityHint,
};
SelectIOS.defaultProps = {
    items: selectDefaultProps.items,
    onValueChange: selectDefaultProps.onValueChange,
    selectedValue: selectDefaultProps.selectedValue,
    textRightButton: selectDefaultProps.textRightButton,
    textLeftButton: selectDefaultProps.textLeftButton,
    styleContainer: {},
    disabled: false,
    dateTimePicker: false,
    pickerTestID: selectDefaultProps.pickerTestID,
    pickerAccessibilityLabel: selectDefaultProps.pickerAccessibilityLabel,
    pickerAccessibilityHint: selectDefaultProps.pickerAccessibilityHint,
};

export default memo(SelectIOS);
