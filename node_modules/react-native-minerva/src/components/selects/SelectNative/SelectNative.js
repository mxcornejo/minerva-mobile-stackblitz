import React, { memo, useState } from 'react';
import { head, get } from 'lodash';
import { Platform } from '../../../index';
import SelectInput from '../components/SelectInput';
import SelectAndroid from '../components/SelectAndroid';
import SelectIOS from '../components/SelectIos';
import { selectPropTypes, selectDefaultProps } from '../type';

/**
 * Componente formulario para seleccionar un valor de un conjunto de opciones.
 * Apariencia nativa. Extiende de @react-native-picker/picker.
 *
 * @component
 */
const SelectNative = (props) => {
    const {
        items: itemsInput,
        onValueChange,
        selectedValue,
        placeholder,
        label,
        accessible,
        accessibilityLabel,
        accessibilityHint,
        testID,
        firstPickerItem,
        textRightButton,
        textLeftButton,
        onPressRightButton,
        onPressLeftButton,
        inverse,
        styleContainer,
        disabled,
        pickerTestID,
        pickerAccessibilityLabel,
        pickerAccessibilityHint,
        ...inputProps
    } = props;

    const items = Array.isArray(itemsInput) ? itemsInput : [];

    const [isVisibleModal, setIsVisibleModal] = useState(false);

    const setFirstPickerItem = () => {
        if (!selectedValue) {
            const firstItem = head(items);
            onValueChange(get(firstItem, 'value', ''));
        }
    };

    const openModal = () => setIsVisibleModal(true);

    const closeModal = () => {
        setFirstPickerItem();
        setIsVisibleModal(false);
    };

    const handlerOnPressRightButton = () => {
        closeModal();
        if (onPressRightButton) onPressRightButton();
    };
    const handlerOnPressLeftButton = () => {
        setIsVisibleModal(false);
        if (onPressLeftButton) onPressLeftButton();
    };

    const renderInput = () => (
        <SelectInput
            inverse={inverse}
            placeholder={placeholder}
            label={label}
            selectedValue={selectedValue}
            items={items}
            accessible={accessible}
            accessibilityLabel={accessibilityLabel}
            accessibilityHint={accessibilityHint}
            testID={testID}
            isOpen={isVisibleModal}
            disabled={disabled}
            {...inputProps}
        />
    );

    const selectProps = {
        renderInput,
        selectedValue,
        onValueChange,
        items,
        styleContainer,
        disabled,
    };

    if (Platform.ios) {
        return (
            <SelectIOS
                {...selectProps}
                openModal={openModal}
                closeModal={closeModal}
                onPressRightButton={handlerOnPressRightButton}
                onPressLeftButton={handlerOnPressLeftButton}
                selectedValue={selectedValue}
                isVisibleModal={isVisibleModal}
                textRightButton={textRightButton}
                textLeftButton={textLeftButton}
                pickerTestID={pickerTestID}
                pickerAccessibilityLabel={pickerAccessibilityLabel}
                pickerAccessibilityHint={pickerAccessibilityHint}
            />
        );
    }

    return (
        <SelectAndroid
            {...selectProps}
            label={label}
            firstPickerItem={firstPickerItem}
            pickerTestID={pickerTestID}
            pickerAccessibilityLabel={pickerAccessibilityLabel}
            pickerAccessibilityHint={pickerAccessibilityHint}
        />
    );
};

SelectNative.propTypes = selectPropTypes;
SelectNative.defaultProps = selectDefaultProps;

export default memo(SelectNative);
