import React, { memo, useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { Platform } from 'react-native';
import moment from 'moment';
import { HelperStyle } from '../../../index';
import SelectInput from '../components/SelectInput';
import SelectAndroid from '../components/SelectAndroid';
import SelectIOS from '../components/SelectIos';
import { selectPropTypes, selectDefaultProps } from '../type';

/**
 * Componente formulario para seleccionar una fecha. Extiende de <Input /> y @react-native-community/datetimepicker.
 *
 * @component
 */
const SelectDateTimePicker = (props) => {
    const [dateString, setDateString] = useState();
    const {
        placeholder,
        label,
        accessible,
        accessibilityLabel,
        accessibilityHint,
        testID,
        textRightButton,
        textLeftButton,
        onPressRightButton,
        onPressLeftButton,
        inverse,
        styleContainer,
        value,
        valueFormat,
        onChange,
        pickerTestID,
        pickerAccessibilityLabel,
        pickerAccessibilityHint,
        ...inputProps
    } = props;
    const [isVisibleModal, setIsVisibleModal] = useState(false);
    const isIOS = Platform.OS === 'ios';
    const [fakeValue, setFakeValue] = useState(new Date());

    useEffect(() => {
        if (value) {
            setFakeValue(value);
            const strDate = moment(value).format(valueFormat);
            if (strDate !== 'Fecha invalida') {
                setDateString(strDate);
            }
        }
    }, [value]);

    const openModal = () => setIsVisibleModal(true);

    const closeModal = () => setIsVisibleModal(false);

    const handlerOnPressRightButton = () => {
        closeModal();
        if (onPressRightButton) onPressRightButton();
    };
    const handlerOnPressLeftButton = () => {
        setIsVisibleModal(false);
        if (onPressLeftButton) onPressLeftButton();
    };

    const renderInput = () => (
        <SelectInput
            inverse={inverse}
            placeholder={placeholder}
            label={label}
            accessible={accessible}
            accessibilityLabel={accessibilityLabel}
            accessibilityHint={accessibilityHint}
            testID={testID}
            value={dateString}
            isOpen={isVisibleModal}
            icon={{
                type: 'Ionicons',
                name: 'calendar',
                style: HelperStyle.fs_5,
                animated: false,
            }}
            {...inputProps}
        />
    );

    const selectProps = {
        ...props,
        renderInput,
        value: fakeValue,
        dateTimePicker: true,
    };

    if (isIOS) {
        return (
            <SelectIOS
                {...selectProps}
                openModal={openModal}
                closeModal={closeModal}
                onPressRightButton={handlerOnPressRightButton}
                onPressLeftButton={handlerOnPressLeftButton}
                isVisibleModal={isVisibleModal}
                textRightButton={textRightButton}
                textLeftButton={textLeftButton}
                pickerTestID={pickerTestID}
                pickerAccessibilityLabel={pickerAccessibilityLabel}
                pickerAccessibilityHint={pickerAccessibilityHint}
            />
        );
    }

    return (
        <SelectAndroid
            {...selectProps}
            label={label}
            pickerTestID={pickerTestID}
            pickerAccessibilityLabel={pickerAccessibilityLabel}
            pickerAccessibilityHint={pickerAccessibilityHint}
        />
    );
};

SelectDateTimePicker.propTypes = {
    ...selectPropTypes,
    /**
     * Formato de la fecha que se muestra en el <Input /> por defecto 'DD-MM-YYYY'.
     */
    valueFormat: PropTypes.string,
};
SelectDateTimePicker.defaultProps = {
    ...selectDefaultProps,
    valueFormat: 'DD-MM-YYYY',
};

export default memo(SelectDateTimePicker);
