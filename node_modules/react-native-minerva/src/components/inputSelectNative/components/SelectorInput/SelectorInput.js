import React, { memo, useState } from 'react';
import { Image } from 'react-native';
import { View, Icon, HelperStyle, Text, Platform } from '../../../../index';
import SelectIOS from '../../../selects/components/SelectIos';
import SelectAndroid from '../../../selects/components/SelectAndroid';
import IconSelect from '../../../selects/components/IconSelect';
import { selectorInputPropTypes, selectorInputDefaultProps } from './type';
import buildStyles from './style';
import SELECTORINPUT_STR from './SelectorInputStr';

const SelectorInput = (props) => {
    const {
        items,
        labelSelected,
        selectedValue,
        onValueChange,
        firstPickerItem,
        optionSource,
        disabled,
        text,
        icon,
        image,
        textStyle,
        iconStyle,
        imageStyle,
        pickerTestID,
        pickerAccessibilityLabel,
        pickerAccessibilityHint,
    } = props;
    const Styles = buildStyles({ HelperStyle });
    const [isVisibleModal, setIsVisibleModal] = useState(false);
    const setFirstPickerItem = () => {
        if (!selectedValue) {
            const firstItem = items.length > 0 ? items[0] : undefined;
            onValueChange(firstItem?.value);
        }
    };

    const openModal = () => setIsVisibleModal(true);

    const closeModal = () => {
        setFirstPickerItem();
        setIsVisibleModal(false);
    };

    const handlerOnPressRightButton = () => {
        closeModal();
    };
    const handlerOnPressLeftButton = () => {
        setIsVisibleModal(false);
    };

    const renderOptionSource = () => {
        if (!optionSource) {
            return null;
        }
        if (text) {
            return (
                <Text
                    testID={optionSource}
                    style={[Styles.optionText, textStyle]}
                >
                    {optionSource}
                </Text>
            );
        }
        if (image) {
            return (
                <Image
                    testID={selectedValue}
                    source={optionSource}
                    style={[Styles.optionImage, imageStyle]}
                />
            );
        }
        if (icon) {
            return (
                <Icon
                    testID={optionSource}
                    name={optionSource}
                    style={[Styles.optionIcon, iconStyle]}
                />
            );
        }
        return null;
    };

    const renderOption = () => (
        <View style={Styles.getOptionContainer(disabled)}>
            {renderOptionSource()}
            <IconSelect
                isOpen={isVisibleModal}
                animated
                style={[HelperStyle.ml_2, HelperStyle.mr_2]}
            />
        </View>
    );

    const selectProps = {
        renderInput: renderOption,
        selectedValue,
        onValueChange,
        items,
        disabled,
    };

    if (Platform.ios) {
        return (
            <SelectIOS
                {...selectProps}
                openModal={openModal}
                closeModal={closeModal}
                onPressRightButton={handlerOnPressRightButton}
                onPressLeftButton={handlerOnPressLeftButton}
                selectedValue={selectedValue}
                isVisibleModal={isVisibleModal}
                textRightButton={SELECTORINPUT_STR.ok}
                textLeftButton={SELECTORINPUT_STR.cancelar}
                pickerTestID={pickerTestID}
                pickerAccessibilityLabel={pickerAccessibilityLabel}
                pickerAccessibilityHint={pickerAccessibilityHint}
            />
        );
    }
    return (
        <SelectAndroid
            {...selectProps}
            label={labelSelected}
            firstPickerItem={firstPickerItem}
            pickerTestID={pickerTestID}
            pickerAccessibilityLabel={pickerAccessibilityLabel}
            pickerAccessibilityHint={pickerAccessibilityHint}
        />
    );
};

SelectorInput.propTypes = selectorInputPropTypes;
SelectorInput.defaultProps = selectorInputDefaultProps;

export default memo(SelectorInput);
