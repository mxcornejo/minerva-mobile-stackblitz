import React, { memo, useEffect, useState } from 'react';
import { View } from 'react-native';
import { Input, Validate, HelperStyle } from '../../index';
import SelectorInput from './components/SelectorInput/SelectorInput';
import {
    inputSelectNativePropTypes,
    inputSelectNativeDefaultProps,
} from './type';

const InputSelectNative = (props) => {
    const {
        accessibilityHint,
        accessibilityLabel,
        disabled,
        firstPickerItem,
        icon,
        iconStyle,
        image,
        imageStyle,
        items,
        keyboardType,
        label,
        labelSelected,
        number,
        onChangeText,
        onValueChange,
        pickerAccessibilityHint,
        pickerAccessibilityLabel,
        pickerTestID,
        selectedValue,
        style,
        testID,
        text,
        textStyle,
        value,
        autoFocus,
        onBlur,
        onFocus,
        onEndEditing,
        renderLeft,
        renderRight,
        error,
        helperText,
    } = props;
    const [optionSource, setOptionSource] = useState(0);

    useEffect(() => {
        const selected = items.find(
            (e) => e.value?.toString() === selectedValue?.toString(),
        );
        setOptionSource(selected?.source);
    }, [selectedValue]);

    const handleRenderLeft = () => (
        <View style={[HelperStyle.flx_row, HelperStyle.ai_c]}>
            <SelectorInput
                items={items}
                labelSelected={labelSelected}
                selectedValue={selectedValue}
                onValueChange={onValueChange}
                firstPickerItem={firstPickerItem}
                optionSource={optionSource}
                disabled={disabled}
                text={text}
                icon={icon}
                image={image}
                textStyle={textStyle}
                iconStyle={iconStyle}
                imageStyle={imageStyle}
                pickerTestID={pickerTestID}
                pickerAccessibilityLabel={pickerAccessibilityLabel}
                pickerAccessibilityHint={pickerAccessibilityHint}
            />
            {Validate.render(renderLeft)}
        </View>
    );

    return (
        <Input
            autoFocus={autoFocus}
            testID={testID}
            accessibilityLabel={accessibilityLabel}
            accessibilityHint={accessibilityHint}
            keyboardType={keyboardType}
            renderLeft={handleRenderLeft}
            renderRight={renderRight}
            label={label}
            onChangeText={onChangeText}
            value={value}
            number={number}
            disabled={disabled}
            style={style}
            onBlur={onBlur}
            onEndEditing={onEndEditing}
            onFocus={onFocus}
            error={error}
            helperText={helperText}
        />
    );
};
InputSelectNative.propTypes = inputSelectNativePropTypes;
InputSelectNative.defaultProps = inputSelectNativeDefaultProps;

export default memo(InputSelectNative);
