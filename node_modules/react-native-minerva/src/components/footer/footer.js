import React, { memo } from 'react';
import PropTypes from 'prop-types';
import { isUndefined } from 'lodash';
import { minerva, View, Collapsible, HelperStyle, isIphone } from '../../index';
import buildStyle from './style';

const variables = minerva();

/**
 * Componente footer.
 *
 * @component
 */
const FooterBCH = (props) => {
    const {
        children,
        collapsed,
        collapsible,
        duration,
        tabBar,
        rounded,
        shadowTop,
        style,
        styleCollapsible,
    } = props;
    const Styles = buildStyle({ HelperStyle, variables });
    const roundedStyle =
        ((isUndefined(rounded) && tabBar) || rounded) && Styles.rounded;
    const renderFooterContent = () => {
        const paddingBottom = {
            paddingBottom: variables.Inset.portrait.bottomInset,
        };
        return (
            <View
                {...props}
                style={[
                    Styles.footer,
                    tabBar && Styles.tabBar,
                    roundedStyle,
                    isIphone.Big && paddingBottom,
                    style,
                ]}
            >
                {children}
            </View>
        );
    };
    if (collapsible) {
        const collapsibleStyle = {
            containerStyle: [
                shadowTop && Styles.shadow,
                tabBar && Styles.positionStyle,
                roundedStyle,
                !collapsed && HelperStyle.of_v,
            ],
            style: [roundedStyle, styleCollapsible],
        };
        return (
            <Collapsible
                collapsed={collapsed}
                duration={duration}
                contentHeight={variables.footerHeight}
                {...collapsibleStyle}
            >
                {renderFooterContent()}
            </Collapsible>
        );
    }
    return renderFooterContent();
};

FooterBCH.propTypes = {
    /**
     * Componente a renderizar.
     */
    children: PropTypes.node.isRequired,
    /**
     * Boleano para desplegar o ocultar contenido del footer.
     */
    collapsed: PropTypes.bool,
    /**
     * Boleano para definir que el footer es de tipo colapsable.
     */
    collapsible: PropTypes.bool,
    /**
     * Duracón de la animación de desplegar o ocultar.
     */
    duration: PropTypes.number,
    /**
     * Boleano para definir footer tipo TabBar (con border radius).
     */
    tabBar: PropTypes.bool,
    /**
     * Boleano para estilos border radius.
     */
    rounded: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),
    /**
     * Boleano para definir si el contenedor tendra estilos de sombra en el top.
     */
    shadowTop: PropTypes.bool,
    /**
     * Estilos para el contenedor del footer.
     */
    style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
    /**
     * Estilos para collapsible.
     */
    styleCollapsible: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
};
FooterBCH.defaultProps = {
    collapsed: false,
    collapsible: false,
    duration: 500,
    tabBar: false,
    rounded: undefined,
    shadowTop: true,
    style: {},
    styleCollapsible: {},
};

export default memo(FooterBCH);
