import React, { useState, useEffect, useRef } from 'react';
import PropTypes from 'prop-types';
import { Text, HelperStyle } from '../../index';
import formatTimeString from './formatTimeString';
import COUNTDOWNTIMER_STR from './CountDownTimerStr';

/**
 * Componente para mostrar temporizador.
 *
 * @component
 */
const CountDownTimer = ({
    getMsecs,
    getTime,
    handleFinish,
    msecs,
    reset,
    small,
    smaller,
    start,
    style,
    totalDuration,
    getProgress,
    animatedColor,
    testID,
    accessibilityLabel,
    accessibilityHint,
    accessibilityRole,
    isFormatted,
}) => {
    const [remainingTime, setRemainingTime] = useState(totalDuration);
    const interval = useRef(0);

    const handlerStop = () => clearInterval(interval.current);

    const handlerStart = () => {
        const endTime = new Date().getTime() + remainingTime;
        interval.current = setInterval(() => {
            const remaining = endTime - new Date();
            if (remaining <= 1000) {
                setRemainingTime(0);
                handlerStop();
                handleFinish();
                return;
            }
            setRemainingTime(remaining);
        }, 1);
    };

    useEffect(() => {
        if (start) {
            handlerStart();
        } else {
            handlerStop();
        }
        return () => {
            clearInterval(interval.current);
        };
    }, [start]);

    useEffect(() => {
        const handlerReset = (newDuration) => {
            const duration =
                totalDuration !== newDuration ? newDuration : totalDuration;
            setRemainingTime(duration);
        };
        if (reset) {
            handlerReset(totalDuration);
        }
    }, [reset]);

    const getFormatTime = () => {
        const now = remainingTime;
        const formatted = formatTimeString(now, msecs);
        const progress = Math.round((now * 100) / totalDuration);
        if (typeof getTime === 'function') {
            getTime(formatted);
        }
        if (typeof getMsecs === 'function') {
            getMsecs(now);
        }
        if (typeof getProgress === 'function') {
            getProgress({ start: progress, stop: 100 - progress });
        }
        return {
            formatTime: formatted,
            mSecsTime: now,
            secsTime: Math.floor(now / 1000),
        };
    };

    const { formatTime, mSecsTime, secsTime } = getFormatTime();

    const getAnimatedColor = () => {
        if (animatedColor && mSecsTime < 11000) {
            return HelperStyle.danger;
        }
        return null;
    };

    const getTypeFormatTime = () => {
        if (!isFormatted && msecs) return mSecsTime;
        if (!isFormatted) return secsTime;
        return formatTime;
    };

    return (
        <Text
            number
            small={small}
            smaller={smaller}
            style={[
                HelperStyle.ff_fontFamilySecondary,
                HelperStyle.as_fs,
                getAnimatedColor(),
                style,
            ]}
            testID={testID}
            accessibilityLabel={accessibilityLabel}
            accessibilityHint={accessibilityHint}
            accessibilityRole={accessibilityRole}
        >
            {getTypeFormatTime()}
        </Text>
    );
};

CountDownTimer.propTypes = {
    /**
     * Función que devuelve los milisegundos transcurridos.
     */
    getMsecs: PropTypes.func,
    /**
     * Función que devuelve el tiempo transcurridos en formato 00:00.
     */
    getTime: PropTypes.func,
    /**
     * Función que se invoca cuando termina el temporizador.
     */
    handleFinish: PropTypes.func,
    /**
     * Función que devuelve los parametros start y stop con el porcentaje de avance del temporizador.
     */
    getProgress: PropTypes.func,
    /**
     * Boleano para devolver los milisegundos con el formato 00:00:00:000.
     */
    msecs: PropTypes.bool,
    /**
     * Boleano para resetear el temporizador.
     */
    reset: PropTypes.bool,
    /**
     * Estilo tamaño de texto small.
     */
    small: PropTypes.bool,
    /**
     * Estilo tamaño de texto small.
     */
    smaller: PropTypes.bool,
    /**
     * Boleano para iniciar el temporizador.
     */
    start: PropTypes.bool,
    /**
     * Duración del temporizador.
     */
    totalDuration: PropTypes.number,
    /**
     * Estilos del texto.
     */
    style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
    /**
     * Boleano para cambiar el color del texto a danger cuando el temporizador sea menor a 10 segundos.
     */
    animatedColor: PropTypes.bool,
    /**
     * Identificador para pruebas.
     */
    testID: PropTypes.string,
    /**
     * Identificador para accesibilidad.
     */
    accessibilityLabel: PropTypes.string,
    /**
     * Sugerencia de accesibilidad.
     */
    accessibilityHint: PropTypes.string,
    /**
     * Comunica el propósito de un componente al usuario.
     */
    accessibilityRole: PropTypes.string,
    /**
     * Boleano para devolver el texto con formato 00:00:00.
     */
    isFormatted: PropTypes.bool,
};
CountDownTimer.defaultProps = {
    isFormatted: true,
    getMsecs: () => null,
    getTime: () => null,
    handleFinish: () => null,
    getProgress: () => null,
    msecs: false,
    reset: false,
    small: true,
    smaller: false,
    start: false,
    totalDuration: 0,
    style: {},
    animatedColor: false,
    testID: '',
    accessibilityLabel: COUNTDOWNTIMER_STR.accessibilityLabel,
    accessibilityHint: '',
    accessibilityRole: COUNTDOWNTIMER_STR.accessibilityRole,
};

export default CountDownTimer;
