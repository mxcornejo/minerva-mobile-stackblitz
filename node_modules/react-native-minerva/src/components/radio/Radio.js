import React, { memo } from 'react';
import PropTypes from 'prop-types';
import { View } from 'native-base';
import { TouchableOpacity } from 'react-native';
import { HelperStyle, Text, Scale, Validate } from '../../index';
import Style from './style';

/**
 * Componente componente Radio permite seleccionar una opción de un conjunto de opciones.
 *
 * @component
 */
const RadioBCH = (props) => {
    const {
        children,
        selected,
        pointerEvents,
        style,
        styleContainer,
        testID,
        accessibilityLabel,
        accessibilityHint,
        accessibilityRole,
        label,
        labelTestID,
        labelAccessibilityLabel,
        labelAccessibilityHint,
        disabled,
        inline,
        ...propsTouchableOpacity
    } = props;
    const renderText = () => {
        if (children) {
            if (inline) {
                return (
                    <View style={inline && HelperStyle.flx_i}>
                        {Validate.render(children)}
                    </View>
                );
            }
            return Validate.render(children);
        }
        if (label) {
            return (
                <Text
                    testID={Validate.safeLabel(labelTestID, label)}
                    accessibilityLabel={Validate.safeLabel(
                        labelAccessibilityLabel,
                        label,
                    )}
                    accessibilityHint={labelAccessibilityHint}
                    disabled={disabled}
                    style={inline ? HelperStyle.flx_i : null}
                >
                    {label}
                </Text>
            );
        }
        return null;
    };

    const radioSelected = {
        ...HelperStyle.bc_primary,
        borderWidth: Scale(6),
    };
    return (
        <View
            pointerEvents={pointerEvents}
            style={[
                HelperStyle.as_fs,
                inline && HelperStyle.flx_i,
                styleContainer,
            ]}
        >
            <TouchableOpacity
                {...propsTouchableOpacity}
                disabled={disabled}
                style={[HelperStyle.as_fs, HelperStyle.flx_row]}
                accessible={false}
            >
                <View
                    accessible
                    testID={testID}
                    accessibilityLabel={accessibilityLabel}
                    accessibilityHint={accessibilityHint}
                    accessibilityRole={accessibilityRole}
                    style={[
                        Style.radio,
                        HelperStyle.bc_gray,
                        selected && radioSelected,
                        (children || label !== '') && HelperStyle.mr_2,
                        disabled && HelperStyle.bc_gray_lighter,
                        disabled && selected && HelperStyle.bc_primary_lighter,
                        style,
                    ]}
                />
                {renderText()}
            </TouchableOpacity>
        </View>
    );
};

RadioBCH.propTypes = {
    /**
     * Boleano para el estado del selección.
     */
    selected: PropTypes.bool,
    /**
     * Controla el evento touch.
     */
    pointerEvents: PropTypes.string,
    /**
     * Identificador para pruebas.
     */
    testID: PropTypes.string,
    /**
     * Identificador para accesibilidad.
     */
    accessibilityLabel: PropTypes.string,
    /**
     * Sugerencia de accesibilidad que ayuda a los usuarios a comprender qué sucederá cuando realicen una acción.
     */
    accessibilityHint: PropTypes.string,
    /**
     * Identificador de pruebas para label.
     */
    labelTestID: PropTypes.string,
    /**
     * Identificador de accesibilidad para label.
     */
    labelAccessibilityLabel: PropTypes.string,
    /**
     * Sugerencia de accesibilidad que ayuda a los usuarios a comprender qué sucederá cuando realicen una acción.
     */
    labelAccessibilityHint: PropTypes.string,
    /**
     * Comunica el propósito de un componente al usuario.
     */
    accessibilityRole: PropTypes.string,
    /**
     * Etiqueta del radio.
     */
    label: PropTypes.string,
    /**
     * Boleano para habilitar y deshabilitar.
     */
    disabled: PropTypes.bool,
    /**
     * Estilos.
     */
    style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
    /**
     * Estilos para el contenedor del Radio y Label.
     */
    styleContainer: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
    /**
     * Renderiza componente que reemplaza el Label.
     */
    children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
    /**
     * Agrega estilo flex 1 para que pueda alinearse en un contenedor flexDirection Row.
     */
    inline: PropTypes.bool,
};
RadioBCH.defaultProps = {
    selected: false,
    pointerEvents: 'auto',
    testID: '',
    accessibilityLabel: '',
    accessibilityHint: '',
    accessibilityRole: 'radio',
    labelTestID: '',
    labelAccessibilityLabel: '',
    labelAccessibilityHint: '',
    label: '',
    disabled: false,
    styleContainer: {},
    style: {},
    children: null,
    inline: false,
};

export default memo(RadioBCH);
