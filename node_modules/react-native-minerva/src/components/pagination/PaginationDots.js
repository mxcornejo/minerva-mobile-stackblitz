import React, { memo, useEffect } from 'react';
import Animated, {
    useSharedValue,
    useAnimatedStyle,
    interpolate,
    useDerivedValue,
    withTiming,
    interpolateColor,
} from 'react-native-reanimated';
import { HelperStyle, Spacing, Scale, EasingReanimated } from '../../index';
import Style from './style';
import { dotsPropTypes, dotsDefaultProps } from './type';

/**
 * Componente puntos.
 * Uso <Pagination />.
 *
 * @component
 */
const Dots = ({
    accessibilityLabel,
    accessibilityHint,
    accessible,
    active,
    activeColor,
    inactiveColor,
    style,
    testID,
}) => {
    const animationValue = active ? 1 : 0;
    const animation = useSharedValue(animationValue);
    const defaultActiveColor = activeColor || HelperStyle.primary.color;
    const defaultInactiveColor =
        inactiveColor || HelperStyle.primary_lighter.color;
    const shadowDotWidth = Scale(20);

    useEffect(() => {
        const toggleAnimation = (value) => {
            animation.value = withTiming(value, {
                duration: 200,
                easing: EasingReanimated.ease_in_out,
            });
        };
        if (active) {
            toggleAnimation(1);
        } else {
            toggleAnimation(0);
        }
    }, [active]);

    const interpolateBackground = useDerivedValue(() =>
        interpolateColor(
            animation.value,
            [0, 1],
            [defaultInactiveColor, defaultActiveColor],
        ),
    );

    const interpolatePadding = useDerivedValue(() =>
        interpolate(
            animation.value,
            [0, 1],
            [Spacing.spacer_1, Spacing.spacer_2],
        ),
    );

    const interpolateWidth = useDerivedValue(() =>
        interpolate(animation.value, [0, 1], [0, shadowDotWidth]),
    );

    const dotBackgroundStyle = useAnimatedStyle(() => ({
        backgroundColor: interpolateBackground.value,
    }));

    const shadowDotBackgroundStyle = useAnimatedStyle(() => ({
        backgroundColor: interpolateBackground.value,
    }));

    const activeDotStyle = useAnimatedStyle(() => ({
        width: interpolateWidth.value,
        transform: [{ scaleX: animation.value }],
    }));

    const containerStyle = useAnimatedStyle(() => ({
        paddingHorizontal: interpolatePadding.value,
    }));
    return (
        <Animated.View style={[HelperStyle.jc_c, containerStyle]}>
            <Animated.View
                accessible={accessible}
                testID={testID}
                accessibilityLabel={accessibilityLabel}
                accessibilityHint={accessibilityHint}
                style={[Style.dots, dotBackgroundStyle, style]}
            />
            <Animated.View
                style={[
                    Style.dots,
                    shadowDotBackgroundStyle,
                    Style.activeDot,
                    activeDotStyle,
                ]}
            />
        </Animated.View>
    );
};

Dots.propTypes = {
    accessibilityLabel: dotsPropTypes.accessibilityLabel,
    accessibilityHint: dotsPropTypes.accessibilityHint,
    accessible: dotsPropTypes.accessible,
    active: dotsPropTypes.active,
    activeColor: dotsPropTypes.activeColor,
    inactiveColor: dotsPropTypes.inactiveColor,
    style: dotsPropTypes.style,
    testID: dotsPropTypes.testID,
};
Dots.defaultProps = {
    accessibilityLabel: dotsDefaultProps.accessibilityLabel,
    accessibilityHint: dotsDefaultProps.accessibilityHint,
    accessible: dotsDefaultProps.accessible,
    active: dotsDefaultProps.active,
    activeColor: dotsDefaultProps.activeColor,
    inactiveColor: dotsDefaultProps.inactiveColor,
    style: dotsDefaultProps.style,
    testID: dotsDefaultProps.testID,
};

export default memo(Dots);
