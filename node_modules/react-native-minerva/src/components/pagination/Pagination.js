import React, { memo } from 'react';
import { View, HelperStyle, MapList } from '../../index';
import PaginationDots from './PaginationDots';
import {
    paginationPropTypes,
    paginationDefaultProps,
    dotsPropTypes,
    dotsDefaultProps,
} from './type';

/**
 * Componente Paginación.
 *
 * @component
 */
const PaginationBCH = (props) => {
    const {
        dotsLength,
        activeDotIndex,
        activeColor,
        inactiveColor,
        paginationStyle,
        testID,
        style,
        ...viewProps
    } = props;

    const getThemeProps = () => {
        if (paginationStyle === 'light') {
            return {
                activeColor: HelperStyle.white.color,
                inactiveColor: HelperStyle.gray_light.color,
            };
        }
        return {
            activeColor,
            inactiveColor,
        };
    };

    const renderItem = ({ index }) => {
        const label = `Página ${index + 1}`;
        return (
            <PaginationDots
                accessible
                testID={label}
                accessibilityLabel={label}
                active={index === activeDotIndex}
                activeColor={getThemeProps().activeColor}
                inactiveColor={getThemeProps().inactiveColor}
            />
        );
    };

    if (dotsLength <= 1) {
        return null;
    }

    const data = [...Array(dotsLength)];

    return (
        <View
            {...viewProps}
            testID={testID}
            style={[
                HelperStyle.flx_row,
                HelperStyle.jc_c,
                HelperStyle.mb_4,
                style,
            ]}
        >
            <MapList data={data} renderItem={renderItem} wrapper={false} />
        </View>
    );
};

PaginationBCH.propTypes = {
    activeColor: dotsPropTypes.activeColor,
    inactiveColor: dotsPropTypes.inactiveColor,
    activeDotIndex: paginationPropTypes.activeDotIndex,
    dotsLength: paginationPropTypes.dotsLength,
    paginationStyle: paginationPropTypes.paginationStyle,
    style: paginationPropTypes.style,
    testID: paginationPropTypes.testID,
};
PaginationBCH.defaultProps = {
    activeColor: dotsDefaultProps.activeColor,
    inactiveColor: dotsDefaultProps.inactiveColor,
    activeDotIndex: paginationDefaultProps.activeDotIndex,
    dotsLength: paginationDefaultProps.dotsLength,
    paginationStyle: paginationDefaultProps.paginationStyle,
    style: paginationDefaultProps.style,
    testID: paginationDefaultProps.testID,
};

export default memo(PaginationBCH);
