import React, { memo } from 'react';
import { TouchableOpacity } from 'react-native';
import { Icon, Avatar, HelperStyle, Validate } from '../../index';
import Badge from '../badge/Badge';
import buildStyle from './style';
import ChipIcon from './components/ChipIcon';
import ChipText from './components/ChipText';
import { chipPropTypes, chipDefaultProps } from './type';

/**
 * Componente que representan una entrada, un atributo o una acciÃ³n.
 *
 * @component
 */
const Chips = (props) => {
    const {
        selected,
        title,
        big,
        bigger,
        icon,
        avatar,
        badge,
        removable,
        onPress,
        iconProps,
        avatarProps,
        badgeProps,
        textProps,
        removableProps,
        visible,
        disabled,
        style,
        accessibilityLabel,
        accessibilityHint,
        testID,
        ...touchableProps
    } = props;
    const styles = buildStyle(HelperStyle);
    const renderAvatar = () => {
        const avatarStyle = [styles.avatar];
        return (
            <Avatar
                label={avatar}
                small
                style={[avatarStyle, avatarProps?.style]}
                {...avatarProps}
            />
        );
    };
    const renderBadge = () => (
        <Badge
            info
            size={16}
            style={[
                HelperStyle.ml_3,
                HelperStyle.as_c,
                HelperStyle.w_auto,
                badgeProps?.style,
            ]}
            text={{
                title: badge,
                props: {
                    style: [HelperStyle.lh_none, HelperStyle.h_100],
                },
            }}
            {...badgeProps}
        />
    );
    const renderIcon = () =>
        icon && (
            <ChipIcon
                bigger={bigger}
                icon={icon}
                iconProps={iconProps}
                selected={selected}
                style={iconProps?.style}
            />
        );

    const renderRemove = () => (
        <Icon
            name="icon-bch-close-fill"
            {...removableProps}
            style={[styles.removable, removableProps?.style]}
        />
    );
    const renderBody = () => (
        <>
            {renderIcon()}
            {avatar && renderAvatar()}
            {badge && renderBadge()}
            <ChipText
                avatar={avatar}
                badge={badge}
                bigger={bigger}
                icon={icon}
                removable={removable}
                selected={selected}
                textProps={textProps}
            >
                {title}
            </ChipText>
            {removable && renderRemove()}
        </>
    );
    const chipStyle = [
        styles.defaultStyle,
        selected && styles.activeButton,
        big && styles.big,
        disabled && styles.disabled,
        style,
    ];
    if (icon) {
        chipStyle.push([
            styles.buttonIcon,
            big && styles.bigIcon,
            bigger && styles.bigger,
        ]);
    }
    if (avatar) {
        chipStyle.push([styles.buttonIcon, big && styles.bigIcon]);
    }

    if (visible) {
        return (
            <TouchableOpacity
                style={chipStyle}
                accessibilityLabel={Validate.safeLabel(
                    accessibilityLabel,
                    title,
                )}
                accessibilityHint={accessibilityHint}
                testID={Validate.safeLabel(testID, title)}
                onPress={onPress}
                disabled={disabled}
                {...touchableProps}
            >
                {renderBody()}
            </TouchableOpacity>
        );
    }
    return null;
};

Chips.propTypes = {
    avatar: chipPropTypes.avatar,
    avatarProps: chipPropTypes.avatarProps,
    badge: chipPropTypes.badge,
    badgeProps: chipPropTypes.badgeProps,
    big: chipPropTypes.big,
    bigger: chipPropTypes.bigger,
    disabled: chipPropTypes.disabled,
    icon: chipPropTypes.icon,
    iconProps: chipPropTypes.iconProps,
    onPress: chipPropTypes.onPress,
    removable: chipPropTypes.removable,
    removableProps: chipPropTypes.removableProps,
    selected: chipPropTypes.selected,
    style: chipPropTypes.style,
    textProps: chipPropTypes.textProps,
    title: chipPropTypes.title,
    visible: chipPropTypes.visible,
    testID: chipPropTypes.testID,
    accessibilityLabel: chipPropTypes.accessibilityLabel,
    accessibilityHint: chipPropTypes.accessibilityHint,
};
Chips.defaultProps = {
    avatar: chipDefaultProps.avatar,
    avatarProps: chipDefaultProps.avatarProps,
    badge: chipDefaultProps.badge,
    badgeProps: chipDefaultProps.badgeProps,
    big: chipDefaultProps.big,
    bigger: chipDefaultProps.bigger,
    disabled: chipDefaultProps.disabled,
    icon: chipDefaultProps.icon,
    iconProps: chipDefaultProps.iconProps,
    onPress: chipDefaultProps.onPress,
    removable: chipDefaultProps.removable,
    removableProps: chipDefaultProps.removableProps,
    selected: chipDefaultProps.selected,
    style: chipDefaultProps.style,
    title: chipDefaultProps.title,
    textProps: chipDefaultProps.textProps,
    visible: chipDefaultProps.visible,
    accessibilityLabel: chipDefaultProps.accessibilityLabel,
    accessibilityHint: chipDefaultProps.accessibilityHint,
    testID: chipDefaultProps.testID,
};

export default memo(Chips);
