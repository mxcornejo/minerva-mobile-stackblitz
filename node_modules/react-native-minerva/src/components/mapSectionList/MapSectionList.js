import React, { Fragment, memo } from 'react';
import { View } from 'react-native';
import PropTypes from 'prop-types';
import { transformData, handlerRenderItem } from '../sectionStickyList/utils';
import { Validate } from '../../index';
import { TYPES, DEFAULT_TYPES } from '../../constants/propTypes';

/**
 * Componente para renderizar listas agrupadas cortas con componentes simples.
 *
 * @component
 */
const MapSectionList = ({
    ListHeaderComponent,
    ListFooterComponent,
    sections,
    keyExtractor,
    renderItem,
    style,
    contentContainerStyle,
    dataListHeader,
    error,
    ListEmptyComponent,
    ListErrorComponent,
    ListLoadingComponent,
    loading,
    renderSectionHeader,
    testID,
}) => {
    /**
     * Función que retorna el indice del elemento.
     * Si keyExtractor no esta definido retorna un indice por defecto "defaultKey".
     *
     * @param {string} item - Elemento del arreglo data.
     * @param {number} index - Indice del elemento del arreglo data.
     */
    const handlerkeyExtractor = (item, index) => {
        const defaultKey = `item-${index}`;
        if (keyExtractor) return keyExtractor(item, index);
        return defaultKey;
    };

    /**
     * Función que retorna un componente por cada elemento de data.
     *
     * @param {object} options - Objeto.
     * @param {string} options.item - Elemento del arreglo data.
     * @param {number} options.index - Indice del elemento del arreglo data.
     */
    const mapRenderItem = ({ item, index }) => (
        <Fragment key={handlerkeyExtractor(item, index)}>
            {handlerRenderItem({ renderItem, renderSectionHeader, sections })({
                item,
                index,
            })}
        </Fragment>
    );

    const newData = transformData({
        sections,
        dataListHeader,
        error,
        ListEmptyComponent,
        ListErrorComponent,
        ListLoadingComponent,
        loading,
    });

    return (
        <View style={[style, contentContainerStyle]} testID={testID}>
            {Validate.render(ListHeaderComponent)}
            {newData.map((item, index) => mapRenderItem({ item, index }))}
            {Validate.render(ListFooterComponent)}
        </View>
    );
};

MapSectionList.propTypes = {
    /**
     * Arreglo de elementos a renderizar.
     */
    sections: PropTypes.arrayOf(PropTypes.any),
    /**
     * Función que generar clave única por cada fila en la lista.
     */
    keyExtractor: PropTypes.func,
    /**
     * Función que retorna un componente por cada elemento de data.
     */
    renderItem: PropTypes.func.isRequired,
    /**
     * Estilos del cuerpo de la lista.
     */
    style: TYPES.style,
    /**
     * Estilos del cuerpo de la lista.
     */
    contentContainerStyle: TYPES.style,
    /**
     * Componente para estado vacío.
     */
    ListEmptyComponent: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
    /**
     * Componente para estado error.
     */
    ListErrorComponent: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
    /**
     * Componente para estado de carga.
     */
    ListLoadingComponent: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
    /**
     * Arreglo de componentes para la cabecera.
     */
    dataListHeader: PropTypes.arrayOf(PropTypes.object),
    /**
     * Muestra componente ListErrorComponent.
     */
    error: PropTypes.bool,
    /**
     * Muestra componente ListLoadingComponent.
     */
    loading: PropTypes.bool,
    /**
     * Componnete cabecera de la lista agrupada.
     */
    renderSectionHeader: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
    /**
     * Identificador para pruebas.
     */
    testID: PropTypes.string,
    /**
     * Componente que se renderiza en la parte superior de la lista.
     */
    ListHeaderComponent: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
    /**
     * Componente que se renderiza en la parte inferior de la lista.
     */
    ListFooterComponent: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
};
MapSectionList.defaultProps = {
    sections: [],
    keyExtractor: null,
    style: DEFAULT_TYPES.style,
    contentContainerStyle: DEFAULT_TYPES.style,
    ListEmptyComponent: DEFAULT_TYPES.render,
    ListErrorComponent: null,
    ListLoadingComponent: null,
    dataListHeader: [],
    error: false,
    loading: false,
    renderSectionHeader: null,
    ListHeaderComponent: DEFAULT_TYPES.render,
    ListFooterComponent: DEFAULT_TYPES.render,
    testID: '',
};

export default memo(MapSectionList);
