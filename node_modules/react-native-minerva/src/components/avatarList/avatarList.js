import React, { useRef } from 'react';
import PropTypes from 'prop-types';
import _ from 'lodash';
import { FlatList, TouchableOpacity } from 'react-native';
import * as Animatable from 'react-native-animatable';
import { HelperStyle, Avatar, dimensions, Text, View } from '../../index';
import Style from './style';

/**
 * Componente para renderizar listado horizontal de <Avatar />.
 *
 * @component
 */
const AvatarList = (props) => {
    const { refScroll, contentContainerStyle } = props;
    const defaultRef = useRef(null);
    const getRef = refScroll || defaultRef;
    const renderFooterLabelSelected = (item) => (
        <View>
            <Text
                numberOfLines={1}
                ellipsizeMode="tail"
                small
                style={[HelperStyle.ta_c, HelperStyle.mb_0]}
            >
                {item.label || item.nombre}
            </Text>
            {item.monto && (
                <Text
                    number
                    smaller
                    numberOfLines={1}
                    ellipsizeMode="tail"
                    unformatted
                    style={HelperStyle.ta_c}
                >
                    {item.monto}
                </Text>
            )}
            {item.apellido && (
                <Text
                    smaller
                    numberOfLines={1}
                    ellipsizeMode="tail"
                    unformatted
                    style={HelperStyle.ta_c}
                >
                    {item.apellido}
                </Text>
            )}
        </View>
    );

    const handleItemOnPress = (item, index) => () => item.onPress(item, index);

    const renderItem = ({ item, index }) => {
        const label = item.nombre || item.label;
        const closeIcon =
            _.isEmpty(item.closeIcon) && item.closeIcon !== false
                ? true
                : item.closeIcon;
        const avatarProps = {
            index,
            closeIcon,
            label:
                item.renderLabel ||
                item.renderBackLabel ||
                label.charAt(0).toUpperCase(),
            image: item.image,
            small:
                _.isEmpty(item.small) && item.small !== false
                    ? true
                    : item.small,
            renderFooterLabel: () => renderFooterLabelSelected(item),
            renderLabel: item?.renderLabel,
            renderBackLabel: item?.renderBackLabel,
        };
        if (item.onPress) {
            return (
                <Animatable.View
                    ref={item.ref}
                    easing="ease-out"
                    animation="zoomIn"
                    duration={200}
                    style={[
                        Style.selectedUserContainer,
                        closeIcon && HelperStyle.pt_1,
                    ]}
                >
                    <TouchableOpacity
                        accessibilityRole="imagebutton"
                        onPress={handleItemOnPress(item, index)}
                    >
                        <Avatar {...avatarProps} />
                    </TouchableOpacity>
                </Animatable.View>
            );
        }
        return (
            <View
                style={[
                    Style.selectedUserContainer,
                    closeIcon && HelperStyle.pt_1,
                ]}
            >
                <Avatar {...avatarProps} />
            </View>
        );
    };

    const contentSize = (ref) => (contentWidth) => {
        if (contentWidth > dimensions.fullWidth && _.get(ref, 'current')) {
            ref.current.scrollToEnd();
        }
    };

    return (
        <FlatList
            renderItem={renderItem}
            horizontal
            bounces={false}
            onContentSizeChange={contentSize(getRef)}
            {...props}
            contentContainerStyle={[HelperStyle.ph_5, contentContainerStyle]}
            ref={getRef}
        />
    );
};

AvatarList.propTypes = {
    /**
     * Referencia para el scrollview del flatlist.
     */
    refScroll: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
    /**
     * Estilos del contenedor del flatlist.
     */
    contentContainerStyle: PropTypes.oneOfType([
        PropTypes.object,
        PropTypes.array,
    ]),
};
AvatarList.defaultProps = {
    refScroll: null,
    contentContainerStyle: {},
};

export default AvatarList;
