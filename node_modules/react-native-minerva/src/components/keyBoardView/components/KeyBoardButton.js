import React, { memo } from 'react';
import { TouchableHighlight } from 'react-native';
import { View, H1, HelperStyle, Text } from '../../../index';
import buildStyles from '../style';
import KEYBOARDVIEW_STR from '../KeyBoardViewStr';
import KeyBoardIcon from './KeyBoardIcon';
import {
    keyBoardPropTypes,
    KeyBoardButtonPropTypes,
    keyBoardDefaultProps,
} from '../type';

/**
 * Retorna el tipo de celda (icono, numero o sin acción vacío) del teclado.
 *
 * @component
 */
const KeyBoardButton = ({
    item,
    white,
    biometricAvailable,
    iconBiometricsName,
    disabled,
    addValue,
    onChange,
}) => {
    const Styles = buildStyles({ HelperStyle });
    const { type } = item;
    const isTouchableItem = type !== 'empty';
    const underlayColor = white
        ? 'rgba(255, 255, 255,0.2)'
        : 'rgba(100, 100, 100,0.2)';
    /**
     * Retorna los callback addValue y onChange.
     */
    const handlerOnPress = () => {
        if (addValue) addValue({ item });
        if (onChange) onChange();
    };
    /**
     * Retorna componente numero de teclado.
     *
     * @param {string} text - Texto de la tecla.
     */
    const renderNumberButton = (text) => {
        const value = String(text);
        return (
            <H1
                style={Styles.BotonesNumericos}
                accessible
                accessibilityLabel={value}
                testID={value}
            >
                {text}
            </H1>
        );
    };

    if (isTouchableItem) {
        const renderTouchableItemType =
            type === 'biometrics' || type === 'delete' ? (
                <KeyBoardIcon
                    type={item?.type}
                    biometricAvailable={biometricAvailable}
                    iconBiometricsName={iconBiometricsName}
                />
            ) : (
                renderNumberButton(item.title)
            );
        return (
            <TouchableHighlight
                style={[Styles.TouchableContainer, HelperStyle.mh_4]}
                underlayColor={underlayColor}
                onPress={handlerOnPress}
                disabled={disabled}
                accessibilityRole="keyboardkey"
            >
                <View style={HelperStyle.ai_sb}>
                    <Text style={Styles.hiddenText}>
                        {KEYBOARDVIEW_STR.clavePin}
                    </Text>
                    <View pointerEvents="none">{renderTouchableItemType}</View>
                </View>
            </TouchableHighlight>
        );
    }
    return <View style={Styles.BotonesNumericos} />;
};

KeyBoardButton.propTypes = {
    addValue: keyBoardPropTypes.addValue,
    biometricAvailable: keyBoardPropTypes.biometricAvailable,
    disabled: keyBoardPropTypes.disabled,
    iconBiometricsName: keyBoardPropTypes.iconBiometricsName,
    item: KeyBoardButtonPropTypes.item.isRequired,
    onChange: keyBoardPropTypes.onChange,
    white: keyBoardPropTypes.white,
};
KeyBoardButton.defaultProps = {
    addValue: keyBoardDefaultProps.addValue,
    biometricAvailable: keyBoardDefaultProps.biometricAvailable,
    disabled: keyBoardDefaultProps.disabled,
    iconBiometricsName: keyBoardDefaultProps.iconBiometricsName,
    onChange: keyBoardDefaultProps.onChange,
    white: keyBoardDefaultProps.white,
};

export default memo(KeyBoardButton);
