import React, { memo, useEffect } from 'react';
import Animated, {
    useSharedValue,
    withTiming,
    useAnimatedStyle,
} from 'react-native-reanimated';
import { View, HelperStyle, MapList } from '../../index';
import KeyBoardButton from './components/KeyBoardButton';
import { keyBoardPropTypes, keyBoardDefaultProps } from './type';

/**
 * Componente teclado numÃ©rico de PIN y biometria para login.
 *
 * @component
 */
const KeyBoardView = ({
    addValue,
    disabled,
    onChange,
    white,
    biometricAvailable,
    iconBiometricsName,
}) => {
    const animation = useSharedValue(1);
    const rows = {
        1: [{ title: '1' }, { title: '2' }, { title: '3' }],
        2: [{ title: '4' }, { title: '5' }, { title: '6' }],
        3: [{ title: '7' }, { title: '8' }, { title: '9' }],
        4: [
            {
                title: 'biometrics',
                type: biometricAvailable ? 'biometrics' : 'empty',
            },
            { title: '0' },
            { title: 'delete', type: 'delete' },
        ],
    };

    useEffect(() => {
        const startAnimation = (toValue) => {
            animation.value = withTiming(toValue, {
                duration: 500,
            });
        };
        if (disabled) {
            startAnimation(0.4);
        } else {
            startAnimation(1);
        }
    }, [disabled]);

    /**
     * Retorna el indice del elemento para el componente MapList.
     *
     * @param {string} item - Elemento del arreglo.
     * @param {number} index - Indice del elemento del arreglo.
     */
    const keyExtractor = (item, index) => `PV${index}`;

    const styleDisabled = useAnimatedStyle(() => ({
        opacity: animation.value,
    }));

    /**
     * Retorna las celdas del teclado.
     *
     * @param {object} options - Objeto.
     * @param {object} options.item - Elemento del arreglo.
     */
    const renderCells = ({ item }) => (
        <View style={[HelperStyle.flx_i, HelperStyle.ai_c, HelperStyle.jc_c]}>
            <KeyBoardButton
                item={item}
                white={white}
                biometricAvailable={biometricAvailable}
                iconBiometricsName={iconBiometricsName}
                disabled={disabled}
                addValue={addValue}
                onChange={onChange}
            />
        </View>
    );

    /**
     * Retorna las filas del teclado.
     *
     * @param {Array} dataRow - Arreglo de las filas del teclado.
     */
    const renderRow = (dataRow) => (
        <MapList
            data={dataRow}
            keyExtractor={keyExtractor}
            renderItem={renderCells}
            style={HelperStyle.flx_row}
        />
    );

    return (
        <Animated.View style={[styleDisabled, HelperStyle.ai_c]}>
            {renderRow(rows[1])}
            {renderRow(rows[2])}
            {renderRow(rows[3])}
            {renderRow(rows[4])}
        </Animated.View>
    );
};

KeyBoardView.propTypes = {
    addValue: keyBoardPropTypes.addValue,
    biometricAvailable: keyBoardPropTypes.biometricAvailable,
    disabled: keyBoardPropTypes.disabled,
    iconBiometricsName: keyBoardPropTypes.iconBiometricsName,
    onChange: keyBoardPropTypes.onChange,
    white: keyBoardPropTypes.white,
};
KeyBoardView.defaultProps = {
    addValue: keyBoardDefaultProps.addValue,
    biometricAvailable: keyBoardDefaultProps.biometricAvailable,
    disabled: keyBoardDefaultProps.disabled,
    iconBiometricsName: keyBoardDefaultProps.iconBiometricsName,
    onChange: keyBoardDefaultProps.onChange,
    white: keyBoardDefaultProps.white,
};

export default memo(KeyBoardView);
