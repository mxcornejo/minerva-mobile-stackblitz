import React, { memo } from 'react';
import PropTypes from 'prop-types';
import {
    Card,
    CardItem,
    ListItemResumen,
    Icon,
    Body,
    HelperStyle,
    View,
    Text,
    H3,
    Button,
    MapList,
    Validate,
} from '../../index';
import Style from './style';
import { propTypes as ListItemResumenTypes } from '../listItemResumen/types';

/**
 * Componente Card simulación de crédito.
 *
 * @component
 */
const CardItemSimulacionCredito = ({ data, active }) => {
    const renderCardHeader = () => (
        <CardItem
            header
            style={[
                active ? HelperStyle.bg_primary : HelperStyle.bg_gray_lighter,
                Style.cardItemHeader,
            ]}
            accessible={false}
        >
            <View style={[HelperStyle.flx_i, HelperStyle.flx_row]}>
                <Text
                    bold
                    style={[
                        active ? HelperStyle.white : HelperStyle.gray_dark,
                        HelperStyle.mb_0,
                        HelperStyle.flx_grow,
                    ]}
                    accessibilityLabel={Validate.safeLabel(
                        data?.titleAccessibilityLabel,
                        data.title,
                    )}
                    accessibilityHint={Validate.safeLabel(
                        data?.titleAccessibilityHint,
                    )}
                    testID={Validate.safeLabel(data?.titleTestID, data.title)}
                >
                    {data.title}
                </Text>
                <Icon
                    style={[
                        active ? HelperStyle.white : HelperStyle.gray_dark,
                        HelperStyle.fs_2,
                        HelperStyle.as_c,
                    ]}
                    name={data.iconName}
                    accessible
                    accessibilityLabel={Validate.safeLabel(data?.iconLabel)}
                    accessibilityHint={Validate.safeLabel(
                        data?.iconAccessibilityHint,
                        data.iconLabel,
                    )}
                    testID={Validate.safeLabel(
                        data?.iconTestID,
                        data.iconLabel,
                    )}
                />
            </View>
        </CardItem>
    );

    const renderTopContent = () => (
        <CardItem
            style={[HelperStyle.pa_4, HelperStyle.pb_0]}
            accessible={false}
        >
            <Body>
                <Text
                    small
                    style={HelperStyle.mb_0}
                    accessibilityLabel={Validate.safeLabel(
                        data?.topTitleAccessibilityLabel,
                        data.topTitle,
                    )}
                    accessibilityHint={Validate.safeLabel(
                        data?.topTitleAccessibilityHint,
                    )}
                    testID={Validate.safeLabel(
                        data?.topTitleTestID,
                        data.topTitle,
                    )}
                >
                    {data.topTitle}
                </Text>
                <H3
                    number
                    style={HelperStyle.mb_0}
                    accessibilityLabel={Validate.safeLabel(
                        data?.topValueAccessibilityLabel,
                        data.topValue,
                    )}
                    accessibilityHint={Validate.safeLabel(
                        data?.topValueAccessibilityHint,
                    )}
                    testID={Validate.safeLabel(
                        data?.topValueTestID,
                        data.topValue,
                    )}
                >
                    {data.topValue}
                </H3>
            </Body>
        </CardItem>
    );

    const renderMiddleContent = () => (
        <CardItem style={HelperStyle.ph_4} accessible={false}>
            <View style={HelperStyle.mr_4}>
                <Text
                    small
                    style={[
                        HelperStyle.mb_0,
                        HelperStyle.ml_0,
                        HelperStyle.as_fs,
                    ]}
                    accessibilityLabel={Validate.safeLabel(
                        data?.middleLeftTitleAccessibilityLabel,
                        data.middleLeftTitle,
                    )}
                    accessibilityHint={Validate.safeLabel(
                        data?.middleLeftTitleAccessibilityHint,
                    )}
                    testID={Validate.safeLabel(
                        data?.middleLeftTitleTestID,
                        data.middleLeftTitle,
                    )}
                >
                    {data.middleLeftTitle}
                </Text>
                <Text
                    bold
                    style={[
                        HelperStyle.mb_0,
                        HelperStyle.ml_0,
                        HelperStyle.as_fs,
                        HelperStyle.gray_dark,
                    ]}
                    accessibilityLabel={Validate.safeLabel(
                        data?.middleLeftValueAccessibilityLabel,
                        data.middleLeftValue,
                    )}
                    accessibilityHint={Validate.safeLabel(
                        data?.middleLeftValueAccessibilityHint,
                    )}
                    testID={Validate.safeLabel(
                        data?.middleLeftValueTestID,
                        data.middleLeftValue,
                    )}
                >
                    {data.middleLeftValue}
                </Text>
            </View>
            <View style={HelperStyle.flx_grow}>
                <Text
                    small
                    style={HelperStyle.mb_0}
                    accessibilityLabel={Validate.safeLabel(
                        data?.middleRightTitleAccessibilityLabel,
                        data.middleRightTitle,
                    )}
                    accessibilityHint={Validate.safeLabel(
                        data?.middleRightTitleAccessibilityHint,
                    )}
                    testID={Validate.safeLabel(
                        data?.middleRightTitleTestID,
                        data.middleRightTitle,
                    )}
                >
                    {data.middleRightTitle}
                </Text>
                <Text
                    bold
                    style={[HelperStyle.mb_0, HelperStyle.gray_dark]}
                    accessibilityLabel={Validate.safeLabel(
                        data?.middleRightValueAccessibilityLabel,
                        data.middleRightValue,
                    )}
                    accessibilityHint={Validate.safeLabel(
                        data?.middleRightValueAccessibilityHint,
                    )}
                    testID={Validate.safeLabel(
                        data?.middleRightValueTestID,
                        data.middleRightValue,
                    )}
                >
                    {data.middleRightValue}
                </Text>
            </View>
        </CardItem>
    );

    const renderSeparator = () => (
        <View
            style={[
                HelperStyle.bbw_1,
                HelperStyle.bc_gray_transparent,
                HelperStyle.mh_4,
                HelperStyle.mb_3,
            ]}
        />
    );

    const renderListItemResumen = ({ item }) => <ListItemResumen item={item} />;

    const renderBottomContent = () => (
        <CardItem body small style={HelperStyle.pb_1}>
            <MapList data={data.list} renderItem={renderListItemResumen} />
        </CardItem>
    );

    const renderFooter = () => {
        const {
            button: { title, props },
        } = data;
        return (
            <View style={HelperStyle.flx_i}>
                <Button
                    small
                    accessibilityLabel={Validate.safeLabel(
                        props?.accessibilityLabel,
                        title,
                    )}
                    accessibilityHint={Validate.safeLabel(
                        props?.accessibilityHint,
                    )}
                    testID={Validate.safeLabel(props?.testID, title)}
                    style={[HelperStyle.as_c, HelperStyle.mb_4]}
                    {...props}
                >
                    <Text>{title}</Text>
                </Button>
            </View>
        );
    };

    /*
     * Renderiza item card simulación
     */
    const renderItemSimulaion = () => (
        <Card cardList style={HelperStyle.flx_i}>
            {renderCardHeader()}
            <View
                style={[
                    active
                        ? HelperStyle.bc_primary
                        : HelperStyle.bc_gray_lighter,
                    HelperStyle.bw_2,
                    HelperStyle.bblr_2,
                    HelperStyle.bbrr_2,
                ]}
            >
                {renderTopContent()}
                {renderMiddleContent()}
                {renderSeparator()}
                {renderBottomContent()}
                {renderFooter()}
            </View>
        </Card>
    );

    return renderItemSimulaion();
};

CardItemSimulacionCredito.propTypes = {
    data: PropTypes.shape({
        /**
         * Título de la simulación.
         */
        title: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
        /**
         * Identificador de accesibilidad para title.
         */
        titleAccessibilityLabel: PropTypes.string,
        /**
         * Sugerencia de accesibilidad que ayuda a los usuarios a comprender qué sucederá cuando realicen una acción.
         */
        titleAccessibilityHint: PropTypes.string,
        /**
         * Identificador de pruebas para title.
         */
        titleTestID: PropTypes.string,
        /**
         * Nombre del icono.
         */
        iconName: PropTypes.string,
        /**
         * Identificador de accesibilidad para el icon.
         */
        iconLabel: PropTypes.string,
        /**
         * Sugerencia de accesibilidad que ayuda a los usuarios a comprender qué sucederá cuando realicen una acción.
         */
        iconAccessibilityHint: PropTypes.string,
        /**
         * Identificador de pruebas para el icon.
         */
        iconTestID: PropTypes.string,
        /**
         * Texto encabezado superior.
         */
        topTitle: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
        /**
         * Identificador de accesibilidad para topTitle.
         */
        topTitleAccessibilityLabel: PropTypes.string,
        /**
         * Sugerencia de accesibilidad que ayuda a los usuarios a comprender qué sucederá cuando realicen una acción.
         */
        topTitleAccessibilityHint: PropTypes.string,
        /**
         * Identificador de pruebas para topTitle.
         */
        topTitleTestID: PropTypes.string,
        /**
         * Valor del encabezado superior.
         */
        topValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
        /**
         * Identificador de accesibilidad para topValue.
         */
        topValueAccessibilityLabel: PropTypes.string,
        /**
         * Sugerencia de accesibilidad que ayuda a los usuarios a comprender qué sucederá cuando realicen una acción.
         */
        topValueAccessibilityHint: PropTypes.string,
        /**
         * Identificador de pruebas para topValue.
         */
        topValueTestID: PropTypes.string,
        /**
         * Texto encabezado del contenido izquierdo.
         */
        middleLeftTitle: PropTypes.oneOfType([
            PropTypes.string,
            PropTypes.number,
        ]),
        /**
         * Identificador de accesibilidad para middleLeftTitle.
         */
        middleLeftTitleAccessibilityLabel: PropTypes.string,
        /**
         * Sugerencia de accesibilidad que ayuda a los usuarios a comprender qué sucederá cuando realicen una acción.
         */
        middleLeftTitleAccessibilityHint: PropTypes.string,
        /**
         * Identificador de pruebas para middleLeftTitle.
         */
        middleLeftTitleTestID: PropTypes.string,
        /**
         * Valor del encabezado del contenido izquierdo.
         */
        middleLeftValue: PropTypes.oneOfType([
            PropTypes.string,
            PropTypes.number,
        ]),
        /**
         * Identificador de accesibilidad para middleLeftValue.
         */
        middleLeftValueAccessibilityLabel: PropTypes.string,
        /**
         * Sugerencia de accesibilidad que ayuda a los usuarios a comprender qué sucederá cuando realicen una acción.
         */
        middleLeftValueAccessibilityHint: PropTypes.string,
        /**
         * Identificador de pruebas para middleLeftValue.
         */
        middleLeftValueTestID: PropTypes.string,
        /**
         * Texto encabezado del contenido derecho.
         */
        middleRightTitle: PropTypes.oneOfType([
            PropTypes.string,
            PropTypes.number,
        ]),
        /**
         * Identificador de accesibilidad para middleRightTitle.
         */
        middleRightTitleAccessibilityLabel: PropTypes.string,
        /**
         * Sugerencia de accesibilidad que ayuda a los usuarios a comprender qué sucederá cuando realicen una acción.
         */
        middleRightTitleAccessibilityHint: PropTypes.string,
        /**
         * Identificador de pruebas para middleRightTitle.
         */
        middleRightTitleTestID: PropTypes.string,
        /**
         * Valor del encabezado del contenido derecho.
         */
        middleRightValue: PropTypes.oneOfType([
            PropTypes.string,
            PropTypes.number,
        ]),
        /**
         * Identificador de accesibilidad para middleRightValue.
         */
        middleRightValueAccessibilityLabel: PropTypes.string,
        /**
         * Sugerencia de accesibilidad que ayuda a los usuarios a comprender qué sucederá cuando realicen una acción.
         */
        middleRightValueAccessibilityHint: PropTypes.string,
        /**
         * Identificador de pruebas para middleRightValue.
         */
        middleRightValueTestID: PropTypes.string,
        /**
         * Objecto para configurar botón simulación.
         */
        button: PropTypes.shape({
            /**
             * Objecto para configurar botón simulación.
             */
            title: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
            props: PropTypes.shape({
                /**
                 * Acción del botón.
                 */
                onPress: PropTypes.func,
                /**
                 * Identificador de accesibilidad para el botón.
                 */
                accessibilityLabel: PropTypes.string,
                /**
                 * Sugerencia de accesibilidad que ayuda a los usuarios a comprender qué sucederá cuando realicen una acción.
                 */
                accessibilityHint: PropTypes.string,
                /**
                 * Identificador de pruebas para el botón.
                 */
                testID: PropTypes.string,
            }),
        }),
        /**
         * Arreglo de objectos para configurar el listado de resumen <ListItemResumen />.
         */
        list: PropTypes.arrayOf(ListItemResumenTypes.item),
    }).isRequired,
    /**
     * Boleano para marcar simulación activa.
     */
    active: PropTypes.bool,
};
CardItemSimulacionCredito.defaultProps = {
    data: {},
    active: false,
};

export default memo(CardItemSimulacionCredito);
