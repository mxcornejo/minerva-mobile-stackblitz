import React from 'react';
import { has, isUndefined } from 'lodash';
import PropTypes from 'prop-types';
import LottieViewRN from 'lottie-react-native';
import { HelperOptions, Platform, View } from '../../index';

/**
 * Componente para mostrar Lotties. Extiende de lottie-react-native.
 *
 * @component
 */
const LottieView = (props) => {
    const {
        source,
        colorFilters,
        refLottie,
        white,
        testID,
        accessibilityLabel,
        accessibilityHint,
        ...LottieViewProps
    } = props;
    const isSourceFromBchAssets = has(source, 'ios');
    const getSourcePropsFromBchAssets = () => {
        const platformSource = {
            source: source.ios,
        };
        if (Platform.android) {
            platformSource.source = source.ios;
            platformSource.imageAssetsFolder = source.android;
        }
        return platformSource;
    };
    const sourceProps = isSourceFromBchAssets
        ? getSourcePropsFromBchAssets()
        : { source };

    if (typeof source === 'undefined') {
        return <View testID={testID} />;
    }
    const getColor = (keypath) => {
        const keyColor = keypath.replace('color_', '');
        return white
            ? HelperOptions.colors.white
            : HelperOptions.colors[keyColor];
    };

    const buildColorFilters = (keypath) => [
        { keypath, color: getColor(keypath) },
    ];

    /**
     * Funcion para cambiar el color del lottie dependiendo del caso.
     */
    const handlerColorFilters = () => {
        if (isSourceFromBchAssets) {
            const lottiesWidthColorFilters = {
                /**
                 * Caso 1: info
                 * El color info es diferente en marca CCH por lo que se debe aplicar filtro al lottie buscando el keypath info
                 * Si la propiedad white es true permite cambiar el color por blanco.
                 */
                info: 'color_info_light',
                /**
                 * Caso 2: success, danger y warning
                 * Si la propiedad white es true permite cambiar el color por blanco.
                 */
                success: 'color_success_light',
                warning: 'color_warning_light',
                danger: 'color_danger_light',
                /**
                 * Caso 3: comercios_asociados, check
                 * Estos lotties deben cambiar de color por la marca.
                 */
                check: 'color_brand',
                comercios_asociados: 'color_brand',
                cuenta_abono: 'color_brand',
                devices: 'color_brand',
                notificacion: 'color_brand',
                password: 'color_brand',
                user: 'color_brand',
            };
            const { android } = source;
            const lottieName = android
                .replace(/^.*[\\/]/, '')
                .replace(/\.[^/.]+$/, '');
            const isLottieWidthColorFilter = Object.keys(
                lottiesWidthColorFilters,
            ).find((key) => key === lottieName);
            if (isUndefined(colorFilters) && isLottieWidthColorFilter) {
                return buildColorFilters(
                    lottiesWidthColorFilters[isLottieWidthColorFilter],
                );
            }
        }
        return colorFilters;
    };

    return (
        <LottieViewRN
            ref={refLottie}
            {...sourceProps}
            {...LottieViewProps}
            testID={testID}
            accessibilityLabel={accessibilityLabel}
            accessibilityHint={accessibilityHint}
            colorFilters={handlerColorFilters()}
        />
    );
};

LottieView.propTypes = {
    /**
     * Ruta del lottie dentro del bch-assets.
     */
    source: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),
    /**
     * Referencia.
     */
    refLottie: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.shape({ current: PropTypes.elementType }),
    ]),
    /**
     * Arreglo de {keypath: '', color: ''} para cambiar el color de un keypath.
     */
    colorFilters: PropTypes.arrayOf(
        PropTypes.shape({
            keypath: PropTypes.string,
            color: PropTypes.string,
        }),
    ),
    /**
     * Boleano para cargar lottie versión white.
     */
    white: PropTypes.bool,
    /**
     * Identificador para pruebas.
     */
    testID: PropTypes.string,
    /**
     * Identificador para accesibilidad.
     */
    accessibilityLabel: PropTypes.string,
    /**
     * Sugerencia de accesibilidad que ayuda a los usuarios a comprender qué sucederá cuando realicen una acción.
     */
    accessibilityHint: PropTypes.string,
};
LottieView.defaultProps = {
    source: undefined,
    refLottie: undefined,
    colorFilters: undefined,
    white: false,
    testID: '',
    accessibilityLabel: '',
    accessibilityHint: '',
};

export default LottieView;
