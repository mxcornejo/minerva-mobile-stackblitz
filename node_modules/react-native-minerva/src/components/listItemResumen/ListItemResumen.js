import React, { memo } from 'react';
import {
    ListItem,
    Left,
    Body,
    HelperStyle,
    View,
    Text,
    Skeleton,
    H3,
    Validate,
} from '../../index';
import Style from './style';
import { propTypes, defaultProps } from './types';
import LISTITEMRESUMEN_STR from './ListItemResumenStr';

/**
 * Componente para mostar fila de resumen de información en dos columnas.
 *
 * @component
 */
const ListItemResumen = ({ item }) => {
    const {
        label,
        labelProps,
        renderLeft,
        renderRight,
        value,
        valueProps,
        separator,
        customStyleListItemLeft,
        customStyleListItemRight,
        customTitleListItemStyle,
        title,
        titleStyle,
        disabled,
        titleSeparator,
    } = item;

    const renderSeparator = () => (
        <View
            testID={LISTITEMRESUMEN_STR.separator.testID}
            style={[
                HelperStyle.bbw_1,
                HelperStyle.bc_gray_transparent,
                HelperStyle.mh_4,
                HelperStyle.mb_3,
            ]}
        />
    );

    /**
     * Renderiza descripción simulación a la izquierda.
     */
    const renderLeftItem = () => {
        if (renderLeft) {
            return Validate.render(renderLeft);
        }
        return (
            <Text
                smaller
                accessibilityLabel={Validate.safeLabel(label)}
                accessibilityHint={Validate.safeLabel(label)}
                testID={Validate.safeLabel(label)}
                ellipsizeMode="tail"
                numberOfLines={1}
                {...labelProps}
            >
                {label}
            </Text>
        );
    };

    /**
     * Renderiza los valores de la simulacion a la derecha.
     */
    const renderRightItem = () => {
        if (renderRight) {
            return Validate.render(renderRight);
        }
        const customWidthSkeleton = Math.floor(Math.random() * 20) + 20;
        if (!value) {
            return (
                <Skeleton
                    numberOfItems={1}
                    width={customWidthSkeleton}
                    style={[HelperStyle.as_fe, HelperStyle.mb_0]}
                    testID={LISTITEMRESUMEN_STR.skeleton.testID}
                    accessibilityLabel={
                        LISTITEMRESUMEN_STR.skeleton.accessibilityLabel
                    }
                    accessibilityHint={
                        LISTITEMRESUMEN_STR.skeleton.accessibilityHint
                    }
                />
            );
        }
        return (
            <Text
                smaller
                accessibilityLabel={Validate.safeLabel(value)}
                accessibilityHint={Validate.safeLabel(value)}
                testID={Validate.safeLabel(value)}
                {...valueProps}
                style={[
                    HelperStyle.ta_r,
                    HelperStyle.mr_0,
                    HelperStyle.gray_dark,
                    valueProps?.style,
                ]}
            >
                {value}
            </Text>
        );
    };

    const renderTitle = () => (
        <>
            <ListItem
                noBorder
                accessible={false}
                style={[HelperStyle.pb_0, customTitleListItemStyle]}
            >
                <Body>
                    <H3 style={[HelperStyle.mb_0, titleStyle]}>{title}</H3>
                </Body>
            </ListItem>
            {titleSeparator && renderSeparator()}
        </>
    );

    const renderItemResumen = () => (
        <ListItem
            noBorder
            accessible={false}
            disabled={disabled}
            style={[HelperStyle.pt_1, HelperStyle.pb_1]}
        >
            <Left
                style={[
                    HelperStyle.as_fs,
                    Style.listItemLeft,
                    customStyleListItemLeft,
                ]}
            >
                {renderLeftItem()}
            </Left>
            <Body
                style={[
                    HelperStyle.as_fs,
                    HelperStyle.mr_0,
                    Style.listItemRight,
                    customStyleListItemRight,
                ]}
            >
                {renderRightItem()}
            </Body>
        </ListItem>
    );

    const renderContentType = () => {
        const hasLabel = label || renderRight;
        if (title && !hasLabel) return renderTitle();
        return (
            <>
                {title && renderTitle()}
                {renderItemResumen()}
                {separator && renderSeparator()}
            </>
        );
    };

    return renderContentType();
};

ListItemResumen.propTypes = propTypes;
ListItemResumen.defaultProps = defaultProps;

export default memo(ListItemResumen);
