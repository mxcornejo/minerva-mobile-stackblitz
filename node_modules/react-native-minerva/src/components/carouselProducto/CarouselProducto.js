import React, { memo, useState } from 'react';
import PropTypes from 'prop-types';
import { size } from 'lodash';
import { HelperStyle, Carousel, CardItemProducto, Validate } from '../../index';
import {
    CardErrorPropTypes,
    CardErrordefaultProps,
} from '../cardItemProducto/type';

/**
 * Componente Carousel de Productos.
 *
 * @component
 */
const CarouselProductoBCH = (props) => {
    const {
        onSnapToItem,
        firstItem,
        setCollapsed,
        renderFooter,
        data,
        collapsed,
        error,
        errorText,
        renderError,
        errorButton,
        activeSlideAlignment,
        collapsedButton,
    } = props;
    const onlyChild = size(data) === 1;
    const mh4 = [HelperStyle.ml_4, HelperStyle.mr_4];
    const mh1 = [HelperStyle.ml_1, HelperStyle.mr_1];
    const mh2 = [HelperStyle.ml_2, HelperStyle.mr_2];
    const [slideActive, setSlideActive] = useState(firstItem);

    const handleOnSnapToItem = (active) => {
        setSlideActive(active);
        if (onSnapToItem) {
            onSnapToItem(active);
        }
    };

    const getCardItemProductoStyle = () => {
        let styleCard = onlyChild ? mh4 : mh1;
        if (!onlyChild && activeSlideAlignment === 'start') styleCard = mh2;
        return styleCard;
    };

    const renderProducto = ({ item, index }) => {
        const handleSetCollapsed = () => setCollapsed(item, index);
        if (item.component) return Validate.render(item.component);
        return (
            <CardItemProducto
                data={item}
                setCollapsed={handleSetCollapsed}
                collapsed={collapsed}
                style={getCardItemProductoStyle()}
                renderFooter={renderFooter || item.renderFooter}
                accessibilityLabel={item.accessibilityLabel}
                accessibilityHint={item.accessibilityHint}
                testID={item.accessibilityLabel || item.testID}
                collapsedButton={collapsedButton}
                showShadow
            />
        );
    };

    const handlerRenderError = () => {
        if (renderError) return renderError();
        return (
            <CardItemProducto
                data={{
                    error,
                    errorText,
                    errorButton,
                }}
            />
        );
    };

    return (
        <Carousel
            renderItem={renderProducto}
            {...props}
            onSnapToItem={handleOnSnapToItem}
            data={data}
            firstItem={slideActive}
            carouselStyle="card"
            containerItem={false}
            pagination
            renderError={handlerRenderError}
        />
    );
};

CarouselProductoBCH.propTypes = {
    /**
     * Índice del primer elemento a mostrar.
     */
    firstItem: PropTypes.number,
    /**
     * Arreglo de objectos para configurar los productos.
     */
    data: PropTypes.arrayOf(
        PropTypes.shape({
            /**
             * Renderiza componente dentro del Card.
             */
            renderShowCard: PropTypes.func,
            /**
             * Nombre del icono que se muestra en el lado izquierdo superior en la cabecera del producto. Por defecto representa el logo de la marca de la tarjeta (Visa o MasterCard).
             */
            icon: PropTypes.string,
            /**
             * Título del producto.
             */
            title: PropTypes.oneOfType([
                PropTypes.string,
                PropTypes.number,
                PropTypes.shape({
                    /**
                     * Texto del título.
                     */
                    text: PropTypes.string,
                    /**
                     * Propiedades para componente <Text /> del título.
                     */
                    textProps: PropTypes.objectOf(PropTypes.any),
                    /**
                     * Objecto opcional para mostrar icono de ayuda en el lado derecho del título.
                     */
                    helperText: PropTypes.shape({
                        onPress: PropTypes.func,
                        testID: PropTypes.string,
                        accessibilityLabel: PropTypes.string,
                    }),
                }),
            ]),
            /**
             * Subtítulo del producto.
             */
            subtitle: PropTypes.oneOfType([
                PropTypes.string,
                PropTypes.number,
                PropTypes.shape({
                    /**
                     * Objecto opcional para mostrar etiqueta en el lado izquierdo del Subtítulo.
                     */
                    badge: PropTypes.string,
                    /**
                     * Texto del Subtítulo.
                     */
                    text: PropTypes.string,
                    /**
                     * Propiedades para componente <Text /> del Subtítulo.
                     */
                    textProps: PropTypes.objectOf(PropTypes.any),
                    /**
                     * Objecto opcional para mostrar icono de ayuda en el lado derecho del Subtítulo.
                     */
                    helperText: PropTypes.shape({
                        onPress: PropTypes.func,
                        testID: PropTypes.string,
                        accessibilityLabel: PropTypes.string,
                    }),
                }),
            ]),
            /**
             * Objecto para configurar botón que se muestra en el lado derecho superior de la cabecera del producto.
             */
            button: PropTypes.shape({
                title: PropTypes.string,
                props: PropTypes.objectOf(PropTypes.any),
            }),
            /**
             * Listado información en dos columnas que se muestra en el cuerpo del Producto.
             */
            list: PropTypes.arrayOf(
                PropTypes.shape({
                    /**
                     * Texto que se muestra en el lado izquierdo de la lista.
                     */
                    title: PropTypes.oneOfType([
                        PropTypes.string,
                        PropTypes.number,
                    ]),
                    /**
                     * Texto que se muestra en el lado derecho de la lista.
                     */
                    value: PropTypes.oneOfType([
                        PropTypes.string,
                        PropTypes.number,
                    ]),
                    /**
                     * Boleano para mostrar animación de carga a la prop value.
                     */
                    valueLoading: PropTypes.bool,
                    /**
                     * Boleano para destacar el valor de la prop value.
                     */
                    valueDestacado: PropTypes.bool,
                    /**
                     * Boleano para mostrar linea inferior.
                     */
                    separator: PropTypes.bool,
                }),
            ),
            /**
             * Identificador de accesibilidad.
             */
            accessibilityLabel: PropTypes.string,
            /**
             * Sugerencia de accesibilidad.
             */
            accessibilityHint: PropTypes.string,
            /**
             * Identificador para pruebas.
             */
            testID: PropTypes.string,
            /**
             * Renderiza un componente en el area inferior de las Card de Productos.
             */
            renderFooter: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
        }),
    ).isRequired,
    /**
     * Función para cambiar el estado de collapsed.
     */
    setCollapsed: PropTypes.func,
    /**
     * Boleano para colapsar las card de productos.
     */
    collapsed: PropTypes.bool,
    /**
     * Renderiza un componente en el area inferior de las Card de Productos.
     */
    renderFooter: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
    /**
     * Boleano para ocultar/mostrar botón colapsar.
     */
    collapsedButton: PropTypes.bool,
    /**
     * Determina la alineación de los elementos activos en relación con el Carousel. Los valores posibles son: 'start', 'center' y 'end'.
     */
    activeSlideAlignment: PropTypes.oneOf(['start', 'center', 'end']),
    ...CardErrorPropTypes,
};
CarouselProductoBCH.defaultProps = {
    firstItem: 0,
    setCollapsed: () => null,
    collapsed: undefined,
    error: false,
    renderError: false,
    renderFooter: false,
    collapsedButton: true,
    activeSlideAlignment: 'start',
    ...CardErrordefaultProps,
};

export default memo(CarouselProductoBCH);
