import React, { memo } from 'react';
import PropTypes from 'prop-types';
import { MaterialIndicator } from 'react-native-indicators';
import {
    View,
    Thumbnail,
    Text,
    H4,
    Badge,
    Icon,
    FlipView,
    HelperStyle,
    Spacing,
    Scale,
    Validate,
} from '../../index';
import Style from './style';

/**
 * Componente para mostrar Imagen o Texto en forma circular.
 *
 * @component
 */
const Avatar = (props) => {
    const {
        selected,
        loading,
        small,
        smaller,
        large,
        image,
        style,
        label,
        styleLabel,
        renderLabel,
        footerLabel,
        styleFooterLabel,
        renderFooterLabel,
        closeIcon,
        renderBackLabel,
        resizeModeAvatarImage,
        hasBorderAvatarImage,
        accessibilityLabel,
        accessibilityHint,
        testID,
        styleContainer,
        iconName,
        labelProps,
        footerLabelProps,
        source,
    } = props;

    const sizesProps = {
        smaller,
        small,
        large,
        medium: !smaller && !small && !large,
    };

    const getSize = () => {
        if (smaller) return Scale(28);
        if (small) return Spacing.spacer_7;
        if (large) return Scale(120);
        return Scale(48);
    };

    const getFontSize = () => {
        if (smaller) return Spacing.type_1;
        if (small) return Spacing.type_2;
        if (large) return Spacing.type_5;
        return Spacing.type_3;
    };

    const getFontSizeLabel = () => {
        if (smaller) return HelperStyle.fs_1;
        return HelperStyle.fs_3;
    };

    const getFontSizeIcon = () => {
        if (smaller) return HelperStyle.fs_1;
        return HelperStyle.fs_5;
    };

    const getMaterialIndicatorSize = () => {
        let size = Scale(52);
        if (large) size = Scale(124);
        if (small) size = Scale(44);
        if (smaller) size = Scale(32);
        return size;
    };

    const avatarBackIcon = {
        fontSize: getFontSize(),
        ...HelperStyle.white,
    };

    const sizeStyle = {
        width: getSize(),
        height: getSize(),
        borderRadius: getSize() / 2,
    };

    const renderCloseIcon = () => {
        if (closeIcon) {
            return (
                <Badge
                    close
                    style={[
                        Style.iconCloseContainer,
                        large && Style.iconCloseContainerLarge,
                    ]}
                />
            );
        }
        return null;
    };

    const getRenderLabel = () => {
        if (renderLabel) return Validate.render(renderLabel);
        return (
            <H4
                style={[
                    HelperStyle.tt_u,
                    HelperStyle.gray_dark,
                    HelperStyle.mb_0,
                    HelperStyle.ff_fontFamily,
                    getFontSizeLabel(),
                    styleLabel,
                ]}
                accessible
                accessibilityLabel={Validate.safeLabel(
                    labelProps?.accessibilityLabel,
                    label,
                )}
                accessibilityHint={Validate.safeLabel(
                    labelProps?.accessibilityHint,
                )}
                testID={Validate.safeLabel(labelProps?.testID, label)}
            >
                {label}
            </H4>
        );
    };

    /**
     * Retorna el testID si la cara (frontal o trasera) del avatar esta visible.
     * La visibilidad la determina la prop selected true cara trasera false cara frontal.
     *
     * @param {string} type - Si es la cara frontal (front) o trasera (back) del avatar.
     * @param {string} id - TestID del elemento.
     * @returns {string} Retorna el testID si la cara (frontal o trasera) es visibles.
     */
    const getTestID = (type, id) => {
        let visibleTestID = '';
        if (type === 'back' && selected) {
            visibleTestID = id;
        }
        if (type !== 'back' && !selected) {
            visibleTestID = id;
        }
        return visibleTestID;
    };

    const getRenderFooterLabel = (type) => {
        if (renderFooterLabel)
            return renderFooterLabel({ isVisible: getTestID(type) !== '' });
        if (!renderFooterLabel && footerLabel) {
            return (
                <Text
                    small
                    center
                    ellipsizeMode="tail"
                    numberOfLines={1}
                    style={[styleFooterLabel, HelperStyle.mb_0]}
                    accessibilityLabel={Validate.safeLabel(
                        footerLabelProps?.accessibilityLabel,
                        footerLabel,
                    )}
                    accessibilityHint={Validate.safeLabel(
                        footerLabelProps?.accessibilityHint,
                    )}
                    testID={getTestID(
                        type,
                        Validate.safeLabel(
                            footerLabelProps?.testID,
                            footerLabel,
                        ),
                    )}
                >
                    {footerLabel}
                </Text>
            );
        }
        return null;
    };

    const handleSource = source || { uri: image };

    const renderBadgeImage = (type) => (
        <Thumbnail
            {...sizesProps}
            source={handleSource}
            style={[HelperStyle.mb_0, HelperStyle.as_c, style]}
            resizeMode={resizeModeAvatarImage}
            accessible
            accessibilityLabel={accessibilityLabel}
            accessibilityHint={accessibilityHint}
            testID={getTestID(type, testID)}
        />
    );

    const renderBadgeIcon = (type) => (
        <Icon
            name={iconName}
            accessible
            accessibilityLabel={accessibilityLabel}
            accessibilityHint={accessibilityHint}
            testID={getTestID(type, testID)}
            style={getFontSizeIcon()}
        />
    );

    const handlerRenderBackLabel = () => {
        if (renderBackLabel) return renderBackLabel();
        return <Icon name="icon-bch-check" style={avatarBackIcon} />;
    };

    const getImage = (type) => {
        const styleAvatarBorder = [
            HelperStyle.bw_1,
            HelperStyle.bc_gray_lighter,
            HelperStyle.bg_t,
            sizeStyle,
            HelperStyle.of_h,
        ];

        if ((image || source) && type !== 'back') {
            if (hasBorderAvatarImage) {
                return (
                    <View style={styleAvatarBorder}>
                        {renderBadgeImage(type)}
                    </View>
                );
            }
            return renderBadgeImage(type);
        }

        if (iconName && type !== 'back') {
            return (
                <Badge
                    {...sizesProps}
                    style={[
                        HelperStyle.bg_gray_lighter,
                        HelperStyle.jc_c,
                        HelperStyle.ai_c,
                        HelperStyle.as_c,
                        style,
                    ]}
                >
                    {renderBadgeIcon(type)}
                </Badge>
            );
        }

        if (type === 'back') {
            return (
                <Badge
                    {...sizesProps}
                    style={[
                        HelperStyle.jc_c,
                        HelperStyle.ai_c,
                        HelperStyle.bg_primary,
                        style,
                    ]}
                    testID={getTestID(type, testID)}
                >
                    {handlerRenderBackLabel()}
                </Badge>
            );
        }
        return (
            <Badge
                {...sizesProps}
                style={[
                    HelperStyle.bg_gray_lighter,
                    HelperStyle.jc_c,
                    HelperStyle.ai_c,
                    HelperStyle.as_c,
                    style,
                ]}
                testID={getTestID(type, testID)}
            >
                {getRenderLabel()}
            </Badge>
        );
    };

    const renderFront = () => (
        <View style={[HelperStyle.jc_c, HelperStyle.ai_c, HelperStyle.ac_c]}>
            <View style={sizeStyle.width}>
                {getImage()}
                {renderCloseIcon()}
            </View>
            {getRenderFooterLabel()}
        </View>
    );

    const renderBack = () => (
        <View style={[HelperStyle.jc_c, HelperStyle.ai_c, HelperStyle.ac_c]}>
            <View style={sizeStyle.width}>
                {getImage('back')}
                {renderCloseIcon()}
            </View>
            {getRenderFooterLabel('back')}
        </View>
    );

    const renderLoading = () => {
        if (loading) {
            return (
                <MaterialIndicator
                    size={getMaterialIndicatorSize()}
                    color={HelperStyle.primary.color}
                    style={Style.materialIndicator}
                />
            );
        }
        return null;
    };

    return (
        <View style={[Style.avatarContainer, styleContainer]}>
            <FlipView
                flip={selected}
                renderFrontView={renderFront}
                renderBackView={renderBack}
                renderStaticView={renderLoading}
                style={Style.avatarFlipViewContainer}
            />
        </View>
    );
};

Avatar.propTypes = {
    /**
     * Texto a mostrar dentro del Avatar.
     */
    label: PropTypes.string,
    /**
     * Texto a mostrar de bajo del Avatar.
     */
    footerLabel: PropTypes.string,
    /**
     * Url de la imagen a mostrar dentro del Avatar.
     */
    image: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),
    /**
     * Define tamaño del Avatar.
     */
    smaller: PropTypes.bool,
    /**
     * Define tamaño del Avatar.
     */
    small: PropTypes.bool,
    /**
     * Define tamaño del Avatar.
     */
    large: PropTypes.bool,
    /**
     * Estilos Avatar seleccionado.
     */
    selected: PropTypes.bool,
    /**
     * Muestra icono de cierre en la esquina superior derecha del Avatar.
     */
    closeIcon: PropTypes.bool,
    /**
     * Estilos Avatar estado de carga.
     */
    loading: PropTypes.bool,
    /**
     * Renderiza componente en el area de la prop label dentro del Avatar.
     */
    renderLabel: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
    /**
     * Renderiza componente en el area de la prop footerLabel de bajo del Avatar.
     */
    renderFooterLabel: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
    /**
     * Renderiza componente en el area de la prop footerLabel seleccionado de bajo del Avatar.
     */
    renderBackLabel: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
    /**
     * Estilos para el Avatar.
     */
    style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
    /**
     * Estilos para el Label.
     */
    styleLabel: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
    /**
     * Estilos para el footerLabel.
     */
    styleFooterLabel: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
    /**
     * Estilos para el contenedor del Avatar.
     */
    styleContainer: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
    /**
     * Determina cómo cambiar el tamaño de la imagen.
     */
    resizeModeAvatarImage: PropTypes.oneOf([
        'cover',
        'contain',
        'stretch',
        'repeat',
        'center',
    ]),
    /**
     * Agrega borde a la Imagen del Avatar.
     */
    hasBorderAvatarImage: PropTypes.bool,
    /**
     * Identificador para accesibilidad.
     */
    accessibilityLabel: PropTypes.string,
    /**
     * Sugerencia de accesibilidad que ayuda a los usuarios a comprender qué sucederá cuando realicen una acción.
     */
    accessibilityHint: PropTypes.string,
    /**
     * Identificador para pruebas.
     */
    testID: PropTypes.string,
    /**
     * Icono a mostrar dentro del Avatar.
     */
    iconName: PropTypes.string,
    /**
     * Propiedades del <Text> de label.
     */
    labelProps: PropTypes.shape({
        /**
         * Identificador para accesibilidad.
         */
        accessibilityLabel: PropTypes.string,
        /**
         * Sugerencia de accesibilidad que ayuda a los usuarios a comprender qué sucederá cuando realicen una acción.
         */
        accessibilityHint: PropTypes.string,
        /**
         * Identificador para pruebas.
         */
        testID: PropTypes.string,
    }),
    /**
     * Propiedades del <Text> de label.
     */
    footerLabelProps: PropTypes.shape({
        /**
         * Identificador para accesibilidad.
         */
        accessibilityLabel: PropTypes.string,
        /**
         * Sugerencia de accesibilidad que ayuda a los usuarios a comprender qué sucederá cuando realicen una acción.
         */
        accessibilityHint: PropTypes.string,
        /**
         * Identificador para pruebas.
         */
        testID: PropTypes.string,
    }),
    /**
     * Url o ruta en el directorio de la imagen a mostrar dentro del Avatar.
     */
    source: PropTypes.oneOfType([
        PropTypes.shape({
            uri: PropTypes.string,
        }),
        PropTypes.number,
        PropTypes.arrayOf(PropTypes.any),
    ]),
};
Avatar.defaultProps = {
    label: '',
    footerLabel: '',
    image: false,
    smaller: false,
    small: false,
    large: false,
    selected: false,
    closeIcon: false,
    loading: false,
    renderLabel: false,
    renderFooterLabel: false,
    renderBackLabel: false,
    style: {},
    styleLabel: {},
    styleFooterLabel: {},
    styleContainer: {},
    resizeModeAvatarImage: 'cover',
    hasBorderAvatarImage: false,
    accessibilityLabel: '',
    accessibilityHint: '',
    testID: '',
    iconName: '',
    labelProps: {},
    footerLabelProps: {},
    source: null,
};

export default memo(Avatar);
