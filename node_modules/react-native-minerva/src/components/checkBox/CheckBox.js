import React, { memo } from 'react';
import { TouchableOpacity } from 'react-native';
import { View, CheckBox } from 'native-base';
import { HelperStyle, Text, Validate } from '../../index';
import { propTypes, defaultProps } from './type';

/**
 * Componente de formulario para seleccionar una serie de elementos de un conjunto de opciones.
 *
 * @component
 */
const CheckBoxBCH = (props) => {
    const {
        accessibilityHint,
        accessibilityLabel,
        accessibilityRole,
        children,
        disabled,
        inline,
        label,
        labelAccessibilityLabel,
        labelAccessibilityHint,
        labelTestID,
        pointerEvents,
        style,
        styleContainer,
        testID,
        iconName,
        ...propsTouchableOpacity
    } = props;

    const renderText = () => {
        if (children) return Validate.render(children);
        return (
            <Text
                accessibilityLabel={Validate.safeLabel(
                    labelAccessibilityLabel,
                    label,
                )}
                accessibilityHint={Validate.safeLabel(labelAccessibilityHint)}
                testID={Validate.safeLabel(labelTestID, label)}
                disabled={disabled}
            >
                {label}
            </Text>
        );
    };

    const renderCheckBox = (customStyle) => (
        <CheckBox
            {...props}
            iconName={iconName}
            testID={testID}
            accessibilityLabel={accessibilityLabel}
            accessibilityHint={accessibilityHint}
            accessibilityRole={accessibilityRole}
            style={customStyle}
        />
    );

    if (children || label !== '') {
        return (
            <View
                pointerEvents={pointerEvents}
                style={[
                    HelperStyle.as_fs,
                    HelperStyle.flx_row,
                    inline && HelperStyle.flx_i,
                    styleContainer,
                ]}
            >
                {renderCheckBox([HelperStyle.mr_2, style])}
                <TouchableOpacity
                    {...propsTouchableOpacity}
                    disabled={disabled}
                    accessible={false}
                    style={inline && HelperStyle.flx_i}
                >
                    {renderText()}
                </TouchableOpacity>
            </View>
        );
    }

    if (pointerEvents !== 'auto') {
        return (
            <View pointerEvents={pointerEvents} style={styleContainer}>
                {renderCheckBox(style)}
            </View>
        );
    }
    return renderCheckBox(style);
};

CheckBoxBCH.propTypes = {
    accessibilityHint: propTypes.accessibilityHint,
    accessibilityLabel: propTypes.accessibilityLabel,
    accessibilityRole: propTypes.accessibilityRole,
    checked: propTypes.checked,
    children: propTypes.children,
    disabled: propTypes.disabled,
    inline: propTypes.inline,
    label: propTypes.label,
    labelAccessibilityLabel: propTypes.labelAccessibilityLabel,
    labelAccessibilityHint: propTypes.labelAccessibilityHint,
    labelTestID: propTypes.labelTestID,
    onPress: propTypes.onPress,
    pointerEvents: propTypes.pointerEvents,
    style: propTypes.style,
    styleContainer: propTypes.styleContainer,
    testID: propTypes.testID,
    iconName: propTypes.iconName,
};
CheckBoxBCH.defaultProps = {
    accessibilityHint: defaultProps.accessibilityHint,
    accessibilityLabel: defaultProps.accessibilityLabel,
    accessibilityRole: defaultProps.accessibilityRole,
    checked: defaultProps.checked,
    children: defaultProps.children,
    disabled: defaultProps.disabled,
    inline: defaultProps.inline,
    label: defaultProps.label,
    labelAccessibilityLabel: defaultProps.labelAccessibilityLabel,
    labelAccessibilityHint: defaultProps.labelAccessibilityHint,
    labelTestID: defaultProps.labelTestID,
    onPress: defaultProps.onPress,
    pointerEvents: defaultProps.pointerEvents,
    style: defaultProps.style,
    styleContainer: defaultProps.styleContainer,
    testID: defaultProps.testID,
    iconName: defaultProps.iconName,
};

export default memo(CheckBoxBCH);
