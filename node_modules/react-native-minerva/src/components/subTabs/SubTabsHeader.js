import React, { memo } from 'react';
import { ScrollView } from 'react-native';
import { Button } from 'native-base';
import { HelperStyle, Text, Segment, View, Validate } from '../../index';
import buildStyles from './style';
import { subTabsHeaderPropTypes, subTabsHeaderDefaultProps } from './type';

const SubTabsHeader = ({
    selected,
    itemActive,
    buttonsHeader,
    contentContainerStyle,
    small,
    shadow,
    style,
    scroll,
    accessibilityRole,
    testID,
}) => {
    const buttonStyle = buttonsHeader.length === 2 && HelperStyle.w_50;

    const changeData = (toSelected) => {
        selected(toSelected);
    };

    const renderButtonSegment = (item, index) => {
        const first = index === 0;
        const last = index === buttonsHeader.length - 1;
        const toSelected = index;
        const Styles = buildStyles({ first, last, HelperStyle });
        const handleChangeData = () => changeData(toSelected);
        return (
            <Button
                style={[
                    buttonStyle,
                    Validate.style(small, Styles.small),
                    Validate.style(scroll, Styles.scroll),
                    Validate.style(!shadow, HelperStyle.shadow_none),
                ]}
                small={small}
                first={first}
                last={last}
                active={itemActive === toSelected}
                onPress={handleChangeData}
                accessibilityLabel={Validate.safeLabel(
                    item?.accessibilityLabel,
                    item.title,
                )}
                accessibilityHint={Validate.safeLabel(item?.accessibilityHint)}
                testID={Validate.safeLabel(item?.testID, item.title)}
                key={index}
                accessibilityRole={accessibilityRole}
            >
                <Text
                    style={small ? HelperStyle.lh_none : null}
                    small={small}
                    uppercase={false}
                >
                    {item.title}
                </Text>
            </Button>
        );
    };
    const headerSubTabs = buttonsHeader.map((button, index) =>
        renderButtonSegment(button, index),
    );

    const renderSegment = (styleSegment) => (
        <Segment style={styleSegment}>{headerSubTabs}</Segment>
    );

    if (scroll) {
        return (
            <View>
                <ScrollView
                    horizontal
                    bounces={false}
                    showsHorizontalScrollIndicator={false}
                    contentContainerStyle={[
                        HelperStyle.pa_4,
                        HelperStyle.flx_grow,
                        contentContainerStyle,
                    ]}
                    testID={testID}
                >
                    {renderSegment(style)}
                </ScrollView>
            </View>
        );
    }

    return renderSegment([HelperStyle.pa_4, contentContainerStyle, style]);
};

SubTabsHeader.propTypes = {
    selected: subTabsHeaderPropTypes.selected,
    itemActive: subTabsHeaderPropTypes.itemActive,
    buttonsHeader: subTabsHeaderPropTypes.buttonsHeader,
    contentContainerStyle: subTabsHeaderPropTypes.contentContainerStyle,
    small: subTabsHeaderPropTypes.small,
    shadow: subTabsHeaderPropTypes.shadow,
    scroll: subTabsHeaderPropTypes.scroll,
    style: subTabsHeaderPropTypes.style,
    accessibilityRole: subTabsHeaderPropTypes.accessibilityRole,
    testID: subTabsHeaderPropTypes.testID,
};
SubTabsHeader.defaultProps = {
    selected: subTabsHeaderDefaultProps.selected,
    itemActive: subTabsHeaderDefaultProps.itemActive,
    buttonsHeader: subTabsHeaderDefaultProps.buttonsHeader,
    contentContainerStyle: subTabsHeaderDefaultProps.contentContainerStyle,
    small: subTabsHeaderDefaultProps.small,
    shadow: subTabsHeaderDefaultProps.shadow,
    scroll: subTabsHeaderDefaultProps.scroll,
    style: subTabsHeaderDefaultProps.style,
    accessibilityRole: subTabsHeaderDefaultProps.accessibilityRole,
    testID: subTabsHeaderDefaultProps.testID,
};

export default memo(SubTabsHeader);
