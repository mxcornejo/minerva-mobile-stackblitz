import React, { memo } from 'react';
import PropTypes from 'prop-types';
import { HelperStyle, Text, View } from '../../index';
import Step from './components/Step';
import buildStyle from './style';

/**
 * Componente para mostrar progreso a través de pasos numerados.
 *
 * @component
 */
const Stepper = ({
    data,
    currentStep,
    showTitle,
    showSubtitle,
    labelSubtitle,
}) => {
    const styles = buildStyle(HelperStyle);
    const nextStep = data[currentStep + 1] || undefined;

    const getTypeStep = (index) => {
        if (index < currentStep) return HelperStyle.bg_primary_lighter;
        if (index > currentStep) return HelperStyle.bg_gray_lighter;
        return HelperStyle.bg_primary;
    };

    const mapSteppers = (item, index) => {
        const last = index === data.length - 1;
        return (
            <Step
                key={`${item.name}`}
                style={[getTypeStep(index), last && HelperStyle.mr_0]}
            />
        );
    };
    const renderSteppers = () =>
        data.map((item, index) => mapSteppers(item, index));
    const renderTitle = () => {
        const textTitle = `Paso ${currentStep + 1} de ${data.length} - `;
        const title = () => (
            <Text
                style={[
                    HelperStyle.primary,
                    showSubtitle && (nextStep || labelSubtitle)
                        ? HelperStyle.mb_0
                        : HelperStyle.mb_4,
                ]}
            >
                {textTitle}
                <Text bold style={HelperStyle.primary}>
                    {data[currentStep].name}
                </Text>
            </Text>
        );
        const subtitle = () => (
            <Text>{labelSubtitle || `Próximo paso: ${nextStep?.name}`}</Text>
        );
        return (
            <>
                {showTitle && title()}
                {showSubtitle && (labelSubtitle || nextStep) && subtitle()}
            </>
        );
    };
    return (
        <View style={styles.container}>
            {renderTitle()}
            <View style={styles.stepper}>{renderSteppers()}</View>
        </View>
    );
};

Stepper.propTypes = {
    /**
     * Arreglo de objectos para configurar los pasos.
     */
    data: PropTypes.arrayOf(
        PropTypes.shape({
            name: PropTypes.string,
        }),
    ).isRequired,
    /**
     * Paso actual.
     */
    currentStep: PropTypes.number.isRequired,
    /**
     * Boleano para mostrar o ocultar el título <Stepper />.
     */
    showTitle: PropTypes.bool,
    /**
     * Boleano para mostrar o ocultar el subtítulo del <Stepper />.
     */
    showSubtitle: PropTypes.bool,
    /**
     * Cambia el texto del subtítulo.
     */
    labelSubtitle: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),
};
Stepper.defaultProps = {
    showTitle: true,
    showSubtitle: true,
    labelSubtitle: false,
};

export default memo(Stepper);
