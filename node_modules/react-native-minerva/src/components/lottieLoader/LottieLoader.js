import React from 'react';
import PropTypes from 'prop-types';
import { Animated, StyleSheet } from 'react-native';
import { HelperStyle, dimensions, LottieView, View } from '../../index';
import LOTTIELOADER_STR from './LottieLoaderStr';

/**
 * Componente para animación inicio, bucle y fin con Lotties.
 *
 * @component
 */
class LottieLoader extends React.PureComponent {
    constructor() {
        super();
        this.state = {
            isRefreshAnimationStarted: false,
            initAnimationProgress: new Animated.Value(0),
            repeatAnimationProgress: new Animated.Value(0),
            finalAnimationProgress: new Animated.Value(0),
        };
    }

    componentDidMount() {
        const { isRefreshing } = this.props;
        if (isRefreshing === true) {
            this.onStartAnimation();
        }
    }

    componentDidUpdate(prevProps) {
        const { isRefreshing } = this.props;
        if (isRefreshing !== prevProps.isRefreshing && isRefreshing) {
            this.onStartAnimation();
        }
    }

    onStartAnimation() {
        const { initAnimationProgress, finalAnimationProgress } = this.state;
        const { durationStart } = this.props;

        finalAnimationProgress.setValue(0);
        this.setState({
            isRefreshAnimationEnded: false,
            isRefreshAnimationStarted: false,
        });

        Animated.timing(initAnimationProgress, {
            toValue: 1,
            duration: durationStart,
            useNativeDriver: LOTTIELOADER_STR.useNativeDriver,
        }).start(() => {
            initAnimationProgress.setValue(0);
            this.setState({ isRefreshAnimationStarted: true });
            this.onRepeatAnimation();
        });
    }

    async onRepeatAnimation() {
        const { repeatAnimationProgress } = this.state;
        const { durationLoop, isRefreshing } = this.props;
        repeatAnimationProgress.setValue(0);

        await Animated.timing(repeatAnimationProgress, {
            toValue: 1,
            duration: durationLoop,
            useNativeDriver: LOTTIELOADER_STR.useNativeDriver,
        }).start(() => {
            if (isRefreshing) {
                this.onRepeatAnimation();
            } else {
                repeatAnimationProgress.setValue(0);
                this.onEndAnimation();
            }
        });
    }

    onEndAnimation() {
        const { finalAnimationProgress } = this.state;
        const {
            durationEnd,
            removeEndRefreshAnimation,
            onEndAnimationEnd,
            onEndAnimationStart,
        } = this.props;
        this.setState({ isRefreshAnimationEnded: true });
        if (onEndAnimationStart) {
            onEndAnimationStart();
        }
        Animated.timing(finalAnimationProgress, {
            toValue: 1,
            duration: durationEnd,
            useNativeDriver: LOTTIELOADER_STR.useNativeDriver,
        }).start(() => {
            if (removeEndRefreshAnimation) {
                finalAnimationProgress.setValue(0);
                this.setState({
                    isRefreshAnimationEnded: false,
                    isRefreshAnimationStarted: false,
                });
            }
            if (onEndAnimationEnd) {
                onEndAnimationEnd();
            }
        });
    }

    render() {
        const {
            startAnimationSource,
            loopAnimationSource,
            endAnimationSource,
            startAnimationAccessibilityLabel,
            startAnimationAccessibilityHint,
            loopAnimationAccessibilityLabel,
            loopAnimationAccessibilityHint,
            endAnimationAccessibilityLabel,
            endAnimationAccessibilityHint,
            startAnimationTestID,
            loopAnimationTestID,
            endAnimationTestID,
            height,
            width,
            white,
        } = this.props;
        const {
            initAnimationProgress,
            isRefreshAnimationStarted,
            repeatAnimationProgress,
            isRefreshAnimationEnded,
            finalAnimationProgress,
        } = this.state;

        const opacityStart = {
            opacity: !isRefreshAnimationStarted ? 1 : 0,
        };

        const opacityRepeat = {
            opacity:
                isRefreshAnimationStarted && !isRefreshAnimationEnded ? 1 : 0,
        };

        const opacityEnd = { opacity: isRefreshAnimationEnded ? 1 : 0 };

        const Styles = StyleSheet.create({
            dimentionsContainer: { height, width },
        });

        return (
            <View style={Styles.dimentionsContainer}>
                <LottieView
                    style={[
                        HelperStyle.absolute_fill,
                        Styles.dimentionsContainer,
                        opacityStart,
                    ]}
                    source={startAnimationSource}
                    progress={initAnimationProgress}
                    accessible
                    accessibilityLabel={startAnimationAccessibilityLabel}
                    accessibilityHint={startAnimationAccessibilityHint}
                    testID={startAnimationTestID}
                    white={white}
                />
                <LottieView
                    style={[
                        HelperStyle.absolute_fill,
                        Styles.dimentionsContainer,
                        opacityRepeat,
                    ]}
                    source={loopAnimationSource}
                    progress={repeatAnimationProgress}
                    accessible
                    accessibilityLabel={loopAnimationAccessibilityLabel}
                    accessibilityHint={loopAnimationAccessibilityHint}
                    testID={loopAnimationTestID}
                    white={white}
                />
                <LottieView
                    style={[
                        HelperStyle.absolute_fill,
                        Styles.dimentionsContainer,
                        opacityEnd,
                    ]}
                    source={endAnimationSource}
                    progress={finalAnimationProgress}
                    accessible
                    accessibilityLabel={endAnimationAccessibilityLabel}
                    accessibilityHint={endAnimationAccessibilityHint}
                    testID={endAnimationTestID}
                    white={white}
                />
            </View>
        );
    }
}

LottieLoader.propTypes = {
    /**
     * Boleano para indicar que la animación se debe ejecutar.
     */
    isRefreshing: PropTypes.bool,
    /**
     * Boleano para cargar lottie versión white.
     */
    white: PropTypes.bool,
    /**
     * Altura del contenedor.
     */
    height: PropTypes.number,
    /**
     * Ancho del contenedor.
     */
    width: PropTypes.number,
    /**
     * Boleano para remover el lottie end cuando finalice la animación. Por defecto el end permanece visible cuando finaliza la animación.
     */
    removeEndRefreshAnimation: PropTypes.bool,
    /**
     * Función que se invoca cuando la animación de salida termina.
     */
    onEndAnimationEnd: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
    /**
     * Función que se invoca cuando la animación de salida inicia.
     */
    onEndAnimationStart: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
    /**
     * Ruta del Lottie para la animación de entrada.
     */
    startAnimationSource: PropTypes.oneOfType([
        PropTypes.bool,
        PropTypes.shape({
            v: PropTypes.string,
            fr: PropTypes.number,
            ip: PropTypes.number,
            op: PropTypes.number,
            w: PropTypes.number,
        }),
    ]),
    /**
     * Ruta del Lottie para la animación de bucle.
     */
    loopAnimationSource: PropTypes.oneOfType([
        PropTypes.bool,
        PropTypes.shape({
            v: PropTypes.string,
            fr: PropTypes.number,
            ip: PropTypes.number,
            op: PropTypes.number,
            w: PropTypes.number,
        }),
    ]),
    /**
     * Ruta del Lottie para la animación de salida.
     */
    endAnimationSource: PropTypes.oneOfType([
        PropTypes.bool,
        PropTypes.shape({
            v: PropTypes.string,
            fr: PropTypes.number,
            ip: PropTypes.number,
            op: PropTypes.number,
            w: PropTypes.number,
        }),
    ]),
    /**
     * Identificador de accesibilidad para lottie entrada.
     */
    startAnimationAccessibilityLabel: PropTypes.string,
    /**
     * Identificador de pruebas para lottie entrada.
     */
    startAnimationTestID: PropTypes.string,
    /**
     * Sugerencia de accesibilidad para lottie entrada.
     */
    startAnimationAccessibilityHint: PropTypes.string,
    /**
     * Identificador de accesibilidad para lottie bucle.
     */
    loopAnimationAccessibilityLabel: PropTypes.string,
    /**
     * Identificador de pruebas para lottie bucle.
     */
    loopAnimationTestID: PropTypes.string,
    /**
     * Sugerencia de accesibilidad para lottie entrada.
     */
    loopAnimationAccessibilityHint: PropTypes.string,
    /**
     * Identificador de accesibilidad para lottie salida.
     */
    endAnimationAccessibilityLabel: PropTypes.string,
    /**
     * Identificador de pruebas para lottie salida.
     */
    endAnimationTestID: PropTypes.string,
    /**
     * Sugerencia de accesibilidad para lottie entrada.
     */
    endAnimationAccessibilityHint: PropTypes.string,
    /**
     * Duración establecida para la animación de entrada.
     */
    durationStart: PropTypes.number,
    /**
     * Duración establecida para la animación de bucle.
     */
    durationLoop: PropTypes.number,
    /**
     * Duración establecida para la animación de salida.
     */
    durationEnd: PropTypes.number,
};
LottieLoader.defaultProps = {
    isRefreshing: true,
    height: dimensions.fullHeight,
    width: dimensions.fullWidth,
    removeEndRefreshAnimation: false,
    onEndAnimationEnd: false,
    onEndAnimationStart: false,
    startAnimationSource: false,
    loopAnimationSource: false,
    endAnimationSource: false,
    startAnimationAccessibilityLabel:
        LOTTIELOADER_STR.animationAccessibilityLabel,
    startAnimationAccessibilityHint:
        LOTTIELOADER_STR.animationAccessibilityLabel,
    loopAnimationAccessibilityLabel:
        LOTTIELOADER_STR.animationAccessibilityLabel,
    loopAnimationAccessibilityHint:
        LOTTIELOADER_STR.animationAccessibilityLabel,
    endAnimationAccessibilityLabel:
        LOTTIELOADER_STR.animationAccessibilityLabel,
    endAnimationAccessibilityHint: LOTTIELOADER_STR.animationAccessibilityLabel,
    startAnimationTestID: '',
    loopAnimationTestID: '',
    endAnimationTestID: '',
    white: true,
    durationStart: LOTTIELOADER_STR.duration,
    durationLoop: LOTTIELOADER_STR.duration,
    durationEnd: LOTTIELOADER_STR.duration,
};

export default LottieLoader;
