import React, { memo, useRef, useEffect, useState } from 'react';
import PropTypes from 'prop-types';
import { Keyboard } from 'react-native';
import { isUndefined, has } from 'lodash';
import { Item, Input } from 'native-base';
import {
    View,
    Icon,
    InputHelperText,
    HelperStyle,
    Button,
    Text,
} from '../../index';
import Style from './style';
import INPUTSEARCH_STR from './InputSearchStr';

export const setFocus = (ref) =>
    ref && has(ref, 'current._root') ? ref.current._root.focus() : null;

export const errorTextRender = (errorText) =>
    errorText ? <InputHelperText>{errorText}</InputHelperText> : null;

/**
 * Componente Campo de busqueda.
 *
 * @component
 */
const InputSearch = (props) => {
    const {
        errorText,
        value,
        inputRef,
        clearInputValue,
        style,
        searchStyle,
        showButtonCancelar,
        testID,
        accessibilityLabel,
        accessibilityHint,
        accessibilityRole,
    } = props;
    const defaultRef = useRef(null);
    const ref = isUndefined(inputRef) ? defaultRef : inputRef;
    const themeLight = {
        ...Style.inputSearchLight,
        ...HelperStyle.bc_gray_lighter,
    };
    const onPressBuscar = () => setFocus(ref);
    const [isKeyboardVisible, setKeyboardVisible] = useState(false);

    useEffect(() => {
        const hideKeyBoard = () => setKeyboardVisible(false);
        const showKeyBoard = () => {
            if (
                has(ref, 'current._root.isFocused') &&
                ref.current._root.isFocused()
            ) {
                setKeyboardVisible(true);
            }
        };
        const keyboardDidShowListener = Keyboard.addListener(
            'keyboardDidShow',
            showKeyBoard,
        );
        const keyboardDidHideListener = Keyboard.addListener(
            'keyboardDidHide',
            hideKeyBoard,
        );

        return () => {
            keyboardDidHideListener.remove();
            keyboardDidShowListener.remove();
        };
    }, []);

    const renderSearchIcon = () => (
        <Icon
            style={[HelperStyle.fs_3, HelperStyle.primary, HelperStyle.ml_4]}
            name={INPUTSEARCH_STR.iconSearch.name}
            onPress={onPressBuscar}
            accessible
            accessibilityLabel={INPUTSEARCH_STR.iconSearch.accessibilityLabel}
            testID={INPUTSEARCH_STR.iconSearch.testID}
            accessibilityHint={INPUTSEARCH_STR.iconSearch.accessibilityHint}
        />
    );

    const renderClearIcon = () => {
        if (value) {
            return (
                <Icon
                    style={[
                        HelperStyle.fs_4,
                        HelperStyle.gray,
                        HelperStyle.mr_4,
                    ]}
                    type="Ionicons"
                    name={INPUTSEARCH_STR.iconClear.name}
                    accessible
                    accessibilityLabel={
                        INPUTSEARCH_STR.iconClear.accessibilityLabel
                    }
                    accessibilityHint={
                        INPUTSEARCH_STR.iconClear.accessibilityHint
                    }
                    testID={INPUTSEARCH_STR.iconClear.testID}
                    onPress={clearInputValue}
                />
            );
        }
        return null;
    };

    const getThemeStyle = () => {
        if (searchStyle === 'light') {
            return themeLight;
        }
        return null;
    };

    const theme = getThemeStyle();

    const onCancelar = () => {
        clearInputValue();
        Keyboard.dismiss();
    };

    const renderCancelar = () => {
        if (isKeyboardVisible && showButtonCancelar) {
            return (
                <View style={[HelperStyle.as_c, HelperStyle.pl_4]}>
                    <Button
                        link
                        neutral
                        small
                        onPress={onCancelar}
                        accessible
                        accessibilityHint={
                            INPUTSEARCH_STR.btnCancelar.accessibilityHint
                        }
                        accessibilityLabel={
                            INPUTSEARCH_STR.btnCancelar.accessibilityLabel
                        }
                        testID={INPUTSEARCH_STR.btnCancelar.testID}
                    >
                        <Text>{INPUTSEARCH_STR.btnCancelar.text}</Text>
                    </Button>
                </View>
            );
        }
        return null;
    };

    return (
        <View style={[HelperStyle.flx_row, HelperStyle.flx_wrap, style]}>
            <View style={HelperStyle.flx_i}>
                <Item
                    search
                    small
                    iconRight
                    iconLeft
                    style={theme}
                    accessible={false}
                >
                    {renderSearchIcon()}
                    <Input
                        {...props}
                        ref={ref}
                        style={null}
                        selectionColor={HelperStyle.gray_dark.color}
                        testID={testID}
                        accessibilityLabel={accessibilityLabel}
                        accessibilityHint={accessibilityHint}
                        accessibilityRole={accessibilityRole}
                    />
                    {renderClearIcon()}
                </Item>
                {errorTextRender(errorText)}
            </View>
            {renderCancelar()}
        </View>
    );
};

InputSearch.propTypes = {
    /**
     * Función que se invoca en el icono limpiar.
     */
    clearInputValue: PropTypes.func,
    /**
     * Mensaje de error.
     */
    errorText: PropTypes.string,
    /**
     * Tipo de buscador.
     */
    searchStyle: PropTypes.oneOf(['light', 'dark']),
    /**
     * Valor del campo de busqueda.
     */
    value: PropTypes.string,
    /**
     * Referencia.
     */
    inputRef: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.string,
        PropTypes.shape({
            current: PropTypes.oneOfType([
                PropTypes.objectOf(PropTypes.any),
                PropTypes.string,
            ]),
        }),
    ]),
    /**
     * Boleano para mostrar o no boton cancelar en el lado derecho del campo. Por defecto es visible cuando el teclado es esta abierto.
     */
    showButtonCancelar: PropTypes.bool,
    /**
     * Estilos.
     */
    style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
    /**
     * Identificador para pruebas.
     */
    testID: PropTypes.string,
    /**
     * Identificador para accesibilidad.
     */
    accessibilityLabel: PropTypes.string,
    /**
     * Sugerencia de accesibilidad.
     */
    accessibilityHint: PropTypes.string,
    /**
     * Comunica el propósito de un componente al usuario.
     */
    accessibilityRole: PropTypes.string,
};
InputSearch.defaultProps = {
    clearInputValue: () => null,
    errorText: '',
    searchStyle: 'dark',
    value: '',
    inputRef: undefined,
    showButtonCancelar: true,
    style: {},
    testID: '',
    accessibilityLabel: '',
    accessibilityHint: '',
    accessibilityRole: INPUTSEARCH_STR.accessibilityRole,
};

export default memo(InputSearch);
