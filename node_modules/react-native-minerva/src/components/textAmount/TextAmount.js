import React from 'react';
import PropTypes from 'prop-types';
import { Text, HelperStyle, View, Icon } from '../../index';
import TEXT_AMOUNT_STR from './textAmountStr';
import { DEFAULT_TYPES, TYPES } from '../../constants/propTypes';

/**
 * Componente para mostrar texto de montos con icono (ingreso/egreso).
 *
 * @component
 */
const TextAmount = ({
    accessibilityLabel,
    accessibilityHint,
    bold,
    children,
    disabled,
    ellipsizeMode,
    isIncomeIcon,
    numberOfLines,
    showIcon,
    small,
    smaller,
    style,
    testID,
    unformatted,
    iconStyle,
    containerStyle,
}) => {
    const renderText = () => (
        <Text
            accessibilityLabel={accessibilityLabel}
            accessibilityHint={accessibilityHint}
            bold={bold}
            disabled={disabled}
            ellipsizeMode={ellipsizeMode}
            number
            numberOfLines={numberOfLines}
            small={small}
            smaller={smaller}
            style={[HelperStyle.gray_dark, HelperStyle.mb_0, style]}
            testID={testID}
            unformatted={unformatted}
        >
            {children}
        </Text>
    );
    const renderType = () => {
        const iconName = isIncomeIcon
            ? TEXT_AMOUNT_STR.incomesIcon
            : TEXT_AMOUNT_STR.outcomesIcon;
        if (showIcon) {
            return (
                <View
                    style={[
                        HelperStyle.flx_row,
                        HelperStyle.ai_c,
                        containerStyle,
                    ]}
                >
                    {renderText()}
                    <View style={HelperStyle.ml_1}>
                        <Icon
                            name={iconName}
                            style={[
                                HelperStyle.fontSize(9),
                                isIncomeIcon
                                    ? HelperStyle.success
                                    : HelperStyle.gray_dark,
                                iconStyle,
                            ]}
                            testID={iconName}
                        />
                    </View>
                </View>
            );
        }
        return renderText();
    };
    return renderType();
};

TextAmount.propTypes = {
    /**
     * Texto a renderizar.
     */
    children: PropTypes.oneOfType([
        PropTypes.arrayOf(PropTypes.node),
        PropTypes.node,
        PropTypes.string,
    ]).isRequired,
    /**
     * Texto de accesibilidad del monto.
     */
    accessibilityLabel: PropTypes.string,
    /**
     * Sugerencia de accesibilidad que ayuda a los usuarios a comprender qué sucederá cuando realicen una acción.
     */
    accessibilityHint: PropTypes.string,
    /**
     * Estilo bold.
     */
    bold: PropTypes.bool,
    /**
     * Estilo Disabled.
     */
    disabled: PropTypes.bool,
    /**
     * Propiedad para tipo truncado del texto.
     */
    ellipsizeMode: PropTypes.string,
    /**
     * Estilos para el icono.
     */
    iconStyle: TYPES.style,
    /**
     * Si showIcon es true define el tipo de icono del monto (ingreso/egreso).
     */
    isIncomeIcon: PropTypes.bool,
    /**
     * Si esta definido indica el numero de lineas que puede tener el texto antes de truncarlo.
     */
    numberOfLines: PropTypes.number,
    /**
     * Muestra icono (ingreso/egreso).
     */
    showIcon: PropTypes.bool,
    /**
     * Estilo small.
     */
    small: PropTypes.bool,
    /**
     * Estilo smaller.
     */
    smaller: PropTypes.bool,
    /**
     * Estilos para el Text.
     */
    style: TYPES.style,
    /**
     * Identificador para pruebas.
     */
    testID: PropTypes.string,
    /**
     * Estilo sin formato.
     */
    unformatted: PropTypes.bool,
    /**
     * Estilo para el contenedor del Text y el icono.
     */
    containerStyle: TYPES.style,
};
TextAmount.defaultProps = {
    accessibilityLabel: '',
    bold: false,
    disabled: false,
    ellipsizeMode: 'tail',
    iconStyle: DEFAULT_TYPES.style,
    isIncomeIcon: false,
    numberOfLines: 0,
    showIcon: false,
    small: false,
    smaller: false,
    style: DEFAULT_TYPES.style,
    testID: '',
    unformatted: false,
    containerStyle: DEFAULT_TYPES.style,
};

export default TextAmount;
