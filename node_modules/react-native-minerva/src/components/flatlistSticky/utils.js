import { get } from 'lodash';
import { Validate } from '../../index';

const handlerRenderItem = (callback) => (data) => {
    const { renderItem } = callback;
    const { item, index, separators } = data;
    const isCustomComponent = get(item, 'component', false);
    // Retornar un custom componente
    if (isCustomComponent) {
        return Validate.render(item.component);
    }
    // Retorna los elementos de la lista
    return renderItem({ item, index, separators, isFirstItem: index === 0 });
};

const transformData = ({
    data,
    dataListHeader,
    error,
    loading,
    ListLoadingComponent,
    ListErrorComponent,
    ListEmptyComponent,
}) => {
    let auxData = data;
    // si loading esta definido solo envia componente loading a la data
    if (loading)
        auxData = [{ component: ListLoadingComponent, isSwipeItem: false }];
    // si error esta definido y loading es false solo envia componente error a la data
    if (!loading && error)
        auxData = [{ component: ListErrorComponent, isSwipeItem: false }];
    // si dataListHeader esta definido
    // Agrega en la primera posicion del arreglo los componentes en el objecto dataListHeader
    if (dataListHeader) {
        auxData = [...dataListHeader, ...auxData];
    }
    // Agrega posici√≥n vacia si data no tiene datos y error y loading son false
    if (!error && !loading && data.length === 0) {
        auxData.push({ component: ListEmptyComponent, isSwipeItem: false });
    }
    return auxData;
};

export { handlerRenderItem, transformData };
