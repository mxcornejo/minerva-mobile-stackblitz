import React, { memo } from 'react';
import PropTypes from 'prop-types';
import {
    View,
    H2,
    Paragraph,
    HelperStyle,
    ButtonsGroup,
    LottieIcon,
    StatusBar,
    Validate,
} from '../../index';
import LOTTIEICON_STR from '../lottieIcon/LottieIconStr';

/**
 * Componente para estados de Error
 * 1. Es un componente a pantalla completa.
 * 2. El componente mostrará un lottie, título, render para descripción y un render para botones.
 * 3. LottieIcon recibe el nombre del lottie a mostrar que sería info, success, warning y danger.
 * Ademas el lottieIcon tiene otra props String para ingresar el texto de accesibilidad. La props es lottieIconAccessibilityLabel.
 * 4. Title tiene un color según el lottieIcon seleccionado. Para el texto de accesibilidad se repite el title.
 * 5. Content es un array donde se recibe una cadena de textos.
 * 6. ButtonGroup un array de botones que se mostraran.
 *
 * @component
 */
const ErrorBCH = ({
    buttonsGroup,
    children,
    content,
    lottieIcon,
    lottieSize,
    lottieIconAccessibilityLabel,
    lottieIconAccessibilityHint,
    renderContent,
    renderFooter,
    title,
    titleAccessibilityLabel,
    titleAccessibilityHint,
    titleTestID,
    style,
}) => {
    const handlerContent = () => {
        if (renderContent) {
            return renderContent();
        }
        if (content) {
            return <Paragraph style={HelperStyle.ta_c} items={content} />;
        }
        return null;
    };

    const handlerFooter = () => {
        if (renderFooter) {
            return renderFooter();
        }
        if (buttonsGroup) {
            return <ButtonsGroup items={buttonsGroup} />;
        }
        return null;
    };

    const ESTILOS_BASE_TITULO = {
        success: HelperStyle.success,
        warning: HelperStyle.warning,
        danger: HelperStyle.danger,
        info: HelperStyle.info,
    };

    const MAP_ICON_ESTILOS_BASE_TITULO = {
        success: ESTILOS_BASE_TITULO.success,
        warning: ESTILOS_BASE_TITULO.warning,
        danger: ESTILOS_BASE_TITULO.danger,
        info: ESTILOS_BASE_TITULO.info,
        clock: ESTILOS_BASE_TITULO.info,
    };

    return (
        <View
            style={[
                HelperStyle.flx_i,
                HelperStyle.jc_c,
                HelperStyle.pa_4,
                HelperStyle.bg_white,
                style,
            ]}
        >
            <StatusBar barStyle="dark-content" />
            <LottieIcon
                type={lottieIcon}
                accessible
                accessibilityLabel={lottieIconAccessibilityLabel}
                accessibilityHint={lottieIconAccessibilityHint}
                testID={lottieIconAccessibilityLabel}
                size={lottieSize}
            />
            <H2
                style={[
                    MAP_ICON_ESTILOS_BASE_TITULO[lottieIcon],
                    HelperStyle.ta_c,
                ]}
                accessibilityLabel={Validate.safeLabel(
                    titleAccessibilityLabel,
                    title,
                )}
                accessibilityHint={titleAccessibilityHint}
                testID={Validate.safeLabel(titleTestID, title)}
            >
                {title}
            </H2>
            {children || (
                <>
                    {handlerContent()}
                    {handlerFooter()}
                </>
            )}
        </View>
    );
};

ErrorBCH.propTypes = {
    /**
     * Objecto para configurar los botones que se muestra en la parte inferior.
     */
    buttonsGroup: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.bool,
        PropTypes.array,
    ]),
    /**
     * Componente a renderizar dentro del error.
     */
    children: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),
    /**
     * Arreglo de objectos o string para configurar el contenido <Paragraph />.
     */
    content: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.bool,
        PropTypes.array,
    ]),
    /**
     * Tipo de lottieicon a mostrar.
     */
    lottieIcon: PropTypes.oneOf(Object.keys(LOTTIEICON_STR.lottie)),
    /**
     * Tamaño del lottie.
     */
    lottieSize: PropTypes.oneOf(Object.values(LOTTIEICON_STR.size)),
    /**
     * Identificador de accesibilidad para <LottieIcon />.
     */
    lottieIconAccessibilityLabel: PropTypes.string,
    /**
     * Sugerencia de accesibilidad para <LottieIcon />.
     */
    lottieIconAccessibilityHint: PropTypes.string,
    /**
     * Componente a renderizar en el contenido.
     */
    renderContent: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
    /**
     * Componente a renderizar en la parte inferior.
     */
    renderFooter: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
    /**
     * Texto del título.
     */
    title: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),
    /**
     * Identificador de accesibilidad para title.
     */
    titleAccessibilityLabel: PropTypes.string,
    /**
     * Sugerencia de accesibilidad que ayuda a los usuarios a comprender qué sucederá cuando realicen una acción.
     */
    titleAccessibilityHint: PropTypes.string,
    /**
     * Identificador de pruebas para title.
     */
    titleTestID: PropTypes.string,
    /**
     * Estilos para el contenedor.
     */
    style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
};
ErrorBCH.defaultProps = {
    buttonsGroup: false,
    children: false,
    content: false,
    lottieIcon: '',
    lottieSize: LOTTIEICON_STR.size.medium,
    lottieIconAccessibilityLabel: '',
    lottieIconAccessibilityHint: '',
    renderContent: false,
    renderFooter: false,
    title: false,
    titleAccessibilityLabel: '',
    titleAccessibilityHint: '',
    titleTestID: '',
    style: null,
};

export default memo(ErrorBCH);
