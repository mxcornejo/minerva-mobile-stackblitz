import React, { memo } from 'react';
import PropTypes from 'prop-types';
import { Text, HelperStyle } from '../../index';
import Style from './style';

/**
 * Componente para mostrar texto tipo título.
 *
 * @component
 */
const H5 = ({
    children,
    accessibilityLabel,
    ellipsizeMode,
    numberOfLines,
    testID,
    style,
    accessibilityHint,
}) => (
    <Text
        accessibilityLabel={accessibilityLabel}
        accessibilityHint={accessibilityHint}
        ellipsizeMode={ellipsizeMode}
        numberOfLines={numberOfLines}
        testID={testID}
        style={[Style.h5, HelperStyle.gray_dark, style]}
    >
        {children}
    </Text>
);

H5.propTypes = {
    /**
     * Texto a mostrar.
     */
    children: PropTypes.node.isRequired,
    /**
     * Sobreescribe el texto que lee el lector de pantalla cuando el usuario interactúa con el elemento. El valor por defecto es un texto compuesto por todos los textos hijos separados por un espacio.
     */
    accessibilityLabel: PropTypes.string,
    /**
     * Accesibilidad: ayuda a los usuarios a comprender qué sucederá cuando realicen una acción en el elemento.
     */
    accessibilityHint: PropTypes.string,
    /**
     * Si esta definido indica el numero de lineas que puede tener el texto antes de truncarlo.
     */
    numberOfLines: PropTypes.number,
    /**
     * Si numberOfLines esta definido, define como se truncará el texto. En Android, si el valor de numberOfLines es mayor a 1 solo tail funcionara correctamente, posibles valores:
     * - head: Se muestra el final del texto hasta rellenar el contenedor y se   trunca el texto al principio mostrando una ellipsis
     * - middle: Se muestra el principio y el final del textohasta rellenar el contenedor y se trunca en el medio mostrando una ellipsis
     * - tail: Se muestra el principio del texto hasta rellenar el contenedor y se   trunca el texto al final mostrando una ellipsis
     * - clip: Las líneas no se dibujan más allá del borde del contenedor de texto.
     */
    ellipsizeMode: PropTypes.oneOf(['head', 'middle', 'tail', 'clip']),
    /**
     * Usado para localizar este component/view en end-to-end tests.
     */
    testID: PropTypes.string,
    /**
     * Estilos personalizados.
     */
    style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
};
H5.defaultProps = {
    accessibilityLabel: '',
    accessibilityHint: '',
    numberOfLines: 0,
    ellipsizeMode: 'tail',
    testID: 'H5',
    style: {},
};

export default memo(H5);
