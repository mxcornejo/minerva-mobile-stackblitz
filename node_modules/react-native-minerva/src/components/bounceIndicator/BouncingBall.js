import React, { memo, useEffect, useRef } from 'react';
import { AppState } from 'react-native';
import Animated, {
    useSharedValue,
    useAnimatedStyle,
    interpolate,
    useDerivedValue,
    withTiming,
    withDelay,
    withRepeat,
    cancelAnimation,
} from 'react-native-reanimated';
import { HelperStyle, EasingReanimated } from '../../index';
import { propTypes, defaultProps } from './type';
import buildStyles from './style';

/**
 * Componente para mostrar animaciÃ³n para estados loading.
 *
 * @component
 */
const BouncingBall = ({ delay, color, size, testID }) => {
    const animation = useSharedValue(0);
    const Styles = buildStyles({
        color: color === '' ? HelperStyle.white.color : color,
        size,
    });

    const appState = useRef(AppState.currentState);

    useEffect(() => {
        const startAnimation = () => {
            animation.value = withDelay(
                delay,
                withRepeat(
                    withTiming(1, {
                        duration: 900,
                        easing: EasingReanimated.linear,
                    }),
                    -1,
                ),
            );
        };

        const stopAnimation = () => {
            cancelAnimation(animation);
            animation.value = 0;
        };
        const handleAppStateChange = (nextAppState) => {
            appState.current = nextAppState;
            if (
                appState.current === 'inactive' ||
                appState.current === 'background'
            ) {
                stopAnimation();
            }
            if (appState.current === 'active') {
                startAnimation();
            }
        };
        startAnimation();
        const subscription = AppState.addEventListener(
            'change',
            handleAppStateChange,
        );
        return () => {
            subscription.remove();
        };
    }, [animation, delay]);

    const interpolateAnimation = useDerivedValue(() =>
        interpolate(
            animation.value,
            [0, 0.25, 0.75, 1],
            [0, -(size * 0.3), size * 0.3, 0],
        ),
    );

    const animationStyle = useAnimatedStyle(() => ({
        transform: [{ translateY: interpolateAnimation.value }],
    }));

    return (
        <Animated.View
            testID={testID}
            style={[animationStyle, Styles.bgcolor, Styles.size]}
        />
    );
};

BouncingBall.propTypes = {
    delay: propTypes.delay,
    color: propTypes.color,
    testID: propTypes.testID,
    size: propTypes.size,
};
BouncingBall.defaultProps = {
    delay: defaultProps.delay,
    color: defaultProps.color,
    testID: defaultProps.testID,
    size: defaultProps.size,
};

export default memo(BouncingBall);
