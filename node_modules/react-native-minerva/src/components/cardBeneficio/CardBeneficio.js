import React from 'react';
import PropTypes from 'prop-types';
import { Image } from 'react-native';
import {
    View,
    Text,
    HelperStyle,
    Paragraph,
    TextNested,
    BoxPressable,
} from '../../index';
import { DEFAULT_TYPES, TYPES } from '../../constants/propTypes';
import {
    propTypes as paragraphPropTypes,
    defaultProps as paragraphDefaultProps,
} from '../paragraph/types';
import buildStyle from './style';

/**
 * Componente para mostrar card de beneficios.
 *
 * @component
 */
const CardBeneficio = ({
    imageSource,
    imageLabel,
    title,
    subtitle,
    description,
    horizontal,
    testID,
    accessibilityLabel,
    accessibilityHint,
    onPress,
    style,
    titleStyle,
    imageContainerStyle,
    contentContainerStyle,
    descriptionInline,
    accessible,
}) => {
    const Styles = buildStyle({ HelperStyle, horizontal });
    return (
        <BoxPressable
            testID={testID}
            accessible={accessible}
            accessibilityLabel={accessibilityLabel}
            accessibilityHint={accessibilityHint}
            onPress={onPress}
            style={[Styles.box, HelperStyle.br_2, style]}
        >
            <View style={[Styles.imageContainerStyle, imageContainerStyle]}>
                {imageLabel !== '' && (
                    <View
                        style={[
                            HelperStyle.bg_primary,
                            HelperStyle.br_2,
                            HelperStyle.p_a,
                            HelperStyle.ph_1,
                            HelperStyle.ma_2,
                            HelperStyle.zIndex(1),
                        ]}
                    >
                        <Text
                            smaller
                            style={[HelperStyle.mb_0, HelperStyle.white]}
                        >
                            {imageLabel}
                        </Text>
                    </View>
                )}
                <Image
                    style={[
                        HelperStyle.br_2,
                        HelperStyle.flx_i,
                        HelperStyle.w_100,
                    ]}
                    source={imageSource}
                />
            </View>
            <View style={[Styles.contentContainerStyle, contentContainerStyle]}>
                {title !== '' && (
                    <Text
                        small
                        style={[
                            HelperStyle.mb_0,
                            HelperStyle.gray_dark,
                            titleStyle,
                        ]}
                        numberOfLines={1}
                    >
                        {title}
                    </Text>
                )}
                {subtitle !== '' && (
                    <Paragraph
                        items={subtitle}
                        bold
                        style={[
                            HelperStyle.mb_0,
                            HelperStyle.primary,
                            HelperStyle.fs_4,
                            HelperStyle.lh_2,
                        ]}
                        numberOfLines={1}
                    />
                )}
                {description !== '' && !descriptionInline && (
                    <Paragraph
                        smaller
                        items={description}
                        style={[HelperStyle.mb_0, HelperStyle.lh_1]}
                        numberOfLines={2}
                    />
                )}
                {description !== '' && descriptionInline && (
                    <TextNested
                        data={description}
                        style={[
                            HelperStyle.mb_0,
                            HelperStyle.lh_1,
                            HelperStyle.fs_1,
                        ]}
                        numberOfLines={2}
                    />
                )}
            </View>
        </BoxPressable>
    );
};

CardBeneficio.propTypes = {
    /**
     * Función que se llama al tocar el componente.
     */
    onPress: PropTypes.func,
    /**
     * Fuente de la imagen.
     */
    imageSource: PropTypes.oneOfType([
        PropTypes.shape({
            uri: PropTypes.string,
        }),
        PropTypes.number,
        PropTypes.arrayOf(PropTypes.any),
    ]).isRequired,
    /**
     * Texto del badge en la imagen.
     */
    imageLabel: PropTypes.string,
    /**
     * Titulo.
     */
    title: PropTypes.string,
    /**
     * Estilos del titulo.
     */
    titleStyle: TYPES.style,
    /**
     * Subtitulo.
     */
    subtitle: paragraphPropTypes.items,
    /**
     * Descripción.
     */
    description: paragraphPropTypes.items,
    /**
     * Boleano para indicar la orientacion del contenido de la card.
     */
    horizontal: PropTypes.bool,
    /**
     * Estilos.
     */
    style: TYPES.style,
    /**
     * Identificador para pruebas.
     */
    testID: PropTypes.string,
    /**
     * Identificador para accesibilidad.
     */
    accessibilityLabel: PropTypes.string,
    /**
     * Sugerencia de accesibilidad.
     */
    accessibilityHint: PropTypes.string,
    /**
     * Estilos para el contenedor de la imagen.
     */
    imageContainerStyle: TYPES.style,
    /**
     * Estilos.
     */
    contentContainerStyle: TYPES.style,
    /**
     * Boleano para cambiar la alineación, si es verdadero se muestra el texto en linea si es falso en diferentes parrafos.
     */
    descriptionInline: PropTypes.bool,
    /**
     * Habilita la accesibilidad.
     */
    accessible: PropTypes.bool,
};
CardBeneficio.defaultProps = {
    title: '',
    imageLabel: '',
    subtitle: paragraphDefaultProps.items,
    description: paragraphDefaultProps.items,
    horizontal: false,
    onPress: DEFAULT_TYPES.func,
    style: DEFAULT_TYPES.style,
    titleStyle: DEFAULT_TYPES.style,
    testID: '',
    accessibilityLabel: '',
    accessibilityHint: '',
    imageContainerStyle: DEFAULT_TYPES.style,
    contentContainerStyle: DEFAULT_TYPES.style,
    descriptionInline: false,
    accessible: true,
};

export default CardBeneficio;
