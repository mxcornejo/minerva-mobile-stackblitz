import React, { Fragment } from 'react';
import PropTypes from 'prop-types';
import { isObject } from 'lodash';
import { Text, Validate, Icon, HelperStyle } from '../../index';

/**
 * Componente para anidar textos.
 *
 * @component
 */
const TextNested = ({
    data,
    style,
    testID,
    accessibilityLabel,
    accessibilityHint,
    bold,
}) => {
    const scaleDefaultFontSize = (styleIcon) => {
        const filterStyle = Validate.findStyle(styleIcon.flat(), 'fontSize');
        if (filterStyle) {
            return [
                ...styleIcon,
                HelperStyle.fontSize(filterStyle.fontSize - 2),
            ];
        }
        return [...styleIcon, HelperStyle.fs_2];
    };

    const renderIcon = (v) => (
        <Icon
            name={v?.iconName}
            style={[scaleDefaultFontSize([style, v?.style]), v?.iconStyle]}
        />
    );

    const renderItemsText = (v, k) => {
        const key = `TextNested-${k}`;
        const renderTextIcon = () => (
            <>
                {v?.iconName && v?.iconAlign === 'start' && renderIcon(v)}
                {v?.text}
                {v?.iconName && v?.iconAlign !== 'start' && renderIcon(v)}
            </>
        );
        if (k === 0) {
            if (isObject(v)) {
                return <Fragment key={key}>{renderTextIcon()}</Fragment>;
            }
            return v;
        }
        if (isObject(v)) {
            return (
                <Text key={key} bold={v?.bold} style={[style, v?.style]}>
                    {renderTextIcon()}
                </Text>
            );
        }
        return (
            <Text key={key} style={style}>
                {v}
            </Text>
        );
    };

    const rendeText = () => data.map(renderItemsText);

    if (isObject(data[0])) {
        return (
            <Text
                style={[style, data[0]?.style]}
                testID={Validate.safeLabel(data[0]?.testID)}
                accessibilityLabel={Validate.safeLabel(
                    data[0]?.accessibilityLabel,
                )}
                accessibilityHint={Validate.safeLabel(
                    data[0]?.accessibilityHint,
                )}
                bold={data[0]?.bold}
            >
                {rendeText()}
            </Text>
        );
    }
    return (
        <Text
            style={style}
            testID={testID}
            accessibilityLabel={accessibilityLabel}
            accessibilityHint={accessibilityHint}
            bold={bold}
        >
            {rendeText()}
        </Text>
    );
};

TextNested.propTypes = {
    /**
     * Arreglo de string o objecto de textos anidados.
     */
    data: PropTypes.arrayOf(
        PropTypes.oneOfType([
            PropTypes.string,
            PropTypes.shape({
                /**
                 * Estilos para el Text.
                 */
                style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
                /**
                 * Usado para localizar este component/view en end-to-end tests.
                 */
                testID: PropTypes.string,
                /**
                 * Identificador para la accesibilidad.
                 */
                accessibilityLabel: PropTypes.string,
                /**
                 * Sugerencia de accesibilidad que ayuda a los usuarios a comprender qué sucederá cuando realicen una acción.
                 */
                accessibilityHint: PropTypes.string,
                /**
                 * Boleano que aplica o no estilo negrilla al text.
                 */
                bold: PropTypes.bool,
            }),
        ]),
    ),
    /**
     * Estilos para el Text principal.
     */
    style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
    /**
     * Usado para localizar este component/view en end-to-end tests.
     */
    testID: PropTypes.string,
    /**
     * Identificador para la accesibilidad.
     */
    accessibilityLabel: PropTypes.string,
    /**
     * Sugerencia de accesibilidad que ayuda a los usuarios a comprender qué sucederá cuando realicen una acción.
     */
    accessibilityHint: PropTypes.string,
    /**
     * Boleano que aplica o no estilo negrilla al text.
     */
    bold: PropTypes.bool,
};
TextNested.defaultProps = {
    data: [],
    accessibilityLabel: '',
    accessibilityHint: '',
    testID: '',
    style: null,
    bold: false,
};

export default TextNested;
