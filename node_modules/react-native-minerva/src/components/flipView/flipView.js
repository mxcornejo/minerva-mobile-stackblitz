import React, { memo, useEffect } from 'react';
import PropTypes from 'prop-types';
import Animated, {
    useSharedValue,
    useAnimatedStyle,
    interpolate,
    useDerivedValue,
    withTiming,
} from 'react-native-reanimated';
import { View } from '../../index';
import Style from './style';

/**
 * Componente animaciÃ³n voltear dos caras.
 *
 * @component
 */
const FlipView = ({
    flip,
    renderBackView,
    renderFrontView,
    renderStaticView,
    testID,
    style,
}) => {
    const flipValue = flip ? 180 : 0;
    const animation = useSharedValue(flipValue);

    useEffect(() => {
        const frontAnimation = () => {
            animation.value = withTiming(180, {
                duration: 300,
            });
        };
        const backAnimation = () => {
            animation.value = withTiming(0, {
                duration: 300,
            });
        };
        if (flip) {
            frontAnimation();
        } else {
            backAnimation();
        }
    }, [animation, animation.value, flip]);

    const frontInterpolate = useDerivedValue(() =>
        interpolate(animation.value, [0, 180], [0, 180]),
    );
    const backInterpolate = useDerivedValue(() =>
        interpolate(animation.value, [0, 180], [180, 360]),
    );
    const frontOpacity = useDerivedValue(() =>
        interpolate(animation.value, [89, 90], [1, 0]),
    );
    const backOpacity = useDerivedValue(() =>
        interpolate(animation.value, [89, 90], [0, 1]),
    );
    const frontAnimatedStyle = useAnimatedStyle(() => ({
        transform: [{ rotateY: `${frontInterpolate.value}deg` }],
        opacity: frontOpacity.value,
    }));
    const backAnimatedStyle = useAnimatedStyle(() => ({
        transform: [{ rotateY: `${backInterpolate.value}deg` }],
        opacity: backOpacity.value,
    }));
    return (
        <View testID={testID} style={style}>
            {renderStaticView && renderStaticView()}
            <Animated.View style={frontAnimatedStyle}>
                {renderFrontView()}
            </Animated.View>
            <Animated.View
                style={[Style.flipView, Style.flipViewBack, backAnimatedStyle]}
            >
                {renderBackView()}
            </Animated.View>
        </View>
    );
};

FlipView.propTypes = {
    /**
     * Boleano para ejecutar animacion voltear.
     */
    flip: PropTypes.bool.isRequired,
    /**
     * Componente cara trasera.
     */
    renderBackView: PropTypes.func.isRequired,
    /**
     * Componente cara frontal.
     */
    renderFrontView: PropTypes.func.isRequired,
    /**
     * Componente estatico.
     */
    renderStaticView: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
    /**
     * Identificador para pruebas.
     */
    testID: PropTypes.string,
    /**
     * Estilos para el contenedor.
     */
    style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
};
FlipView.defaultProps = {
    renderStaticView: false,
    testID: '',
    style: null,
};

export default memo(FlipView);
