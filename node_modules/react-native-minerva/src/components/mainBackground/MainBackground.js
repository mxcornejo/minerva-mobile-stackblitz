import React, { memo } from 'react';
import PropTypes from 'prop-types';
import { ImageBackground, Platform } from 'react-native';
import { get } from 'lodash';
import Images from 'bch-assets';
import { HelperStyle, StatusBar, LinearGradient, View } from '../../index';
import Style from './style';
import AnimatedView from './AnimatedView';

/**
 * Componente gradiente color marca y imagen de fondo.
 *
 * @component
 */
const MainBackground = (props) => {
    const {
        bg: { waves },
    } = Images;
    const {
        children,
        style,
        styleAnimatedView,
        imageBackground,
        linearGradient,
        reanimated,
        childrenContainerStyle,
        fill,
    } = props;

    // Variable condicional para defecto con el estilo Overflow hidden en android 7
    const needAndroid7Fix =
        Platform.Version === 24 && styleAnimatedView !== undefined;

    const renderImagenFondo = () => {
        if (imageBackground) {
            return <ImageBackground {...imageBackground} />;
        }
        return null;
    };

    const renderLinearGradient = () => {
        if (!needAndroid7Fix) {
            return (
                <LinearGradient
                    {...linearGradient}
                    style={[
                        HelperStyle.flx_i,
                        style,
                        get(linearGradient, 'style', null),
                    ]}
                />
            );
        }
        return null;
    };

    const handlerImageBackground = () => {
        if (!needAndroid7Fix && !imageBackground) {
            return (
                <ImageBackground
                    source={waves}
                    style={Style.imageBackground}
                    imageStyle={Style.imageStyle}
                />
            );
        }
        return null;
    };

    return (
        <View style={[HelperStyle.of_h, fill && HelperStyle.flx_i, style]}>
            <AnimatedView
                reanimated={reanimated}
                style={[
                    Style.containerLinearGradient,
                    needAndroid7Fix && HelperStyle.bg_brand,
                    !needAndroid7Fix && HelperStyle.of_h,
                    styleAnimatedView,
                ]}
            >
                {renderLinearGradient()}
                {renderImagenFondo()}
            </AnimatedView>
            {handlerImageBackground()}
            <StatusBar barStyle="light-content" />
            <View
                style={[
                    fill && HelperStyle.flx_i,
                    Style.zIndex_1,
                    childrenContainerStyle,
                ]}
            >
                {children}
            </View>
        </View>
    );
};

MainBackground.propTypes = {
    /**
     * Componente a renderizar.
     */
    children: PropTypes.oneOfType([
        PropTypes.arrayOf(PropTypes.node),
        PropTypes.node,
        PropTypes.bool,
    ]),
    /**
     * Estilos contenedor.
     */
    style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
    /**
     * Estilos AnimatedView.
     */
    styleAnimatedView: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
    /**
     * Estilos contenedor del children.
     */
    childrenContainerStyle: PropTypes.oneOfType([
        PropTypes.object,
        PropTypes.array,
    ]),
    /**
     * Objecto para configurar componente <ImageBackground />.
     */
    imageBackground: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),
    /**
     * Objecto para configurar componente <linearGradient />.
     */
    linearGradient: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),
    /**
     * Boleano para usar reanimated o Animated.
     */
    reanimated: PropTypes.bool,
    /**
     * Boleano para aplicar estilos para ocupar el espacio disponible.
     */
    fill: PropTypes.bool,
};
MainBackground.defaultProps = {
    children: false,
    style: {},
    childrenContainerStyle: null,
    styleAnimatedView: {},
    imageBackground: false,
    linearGradient: undefined,
    reanimated: false,
    fill: true,
};

export default memo(MainBackground);
