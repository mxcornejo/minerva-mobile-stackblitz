import { StyleSheet } from 'react-native';
import { forOwn, defaultsDeep, assign, toNumber } from 'lodash';
import {
    Fonts,
    ColorsBCH,
    ColorsBEC,
    ColorsCCH,
    HelperSpacing,
    Base,
    Scale,
} from '../../constants/index';
import * as borders from './styles/borders';
import flexbox from './styles/flexbox';
import shadow from './styles/shadow';
import spacing from './styles/spacing';
import widths from './styles/widths';
import heights from './styles/heights';
import typeScale from './styles/typeScale';
import text from './styles/text';
import images from './styles/images';
import fontWeights from './styles/fontWeights';
import absolute from './styles/absolute';
import opacity from './styles/opacity';
import layout from './styles/layout';

const hyphensToUnderscores = (sourceObj) => {
    const translated = {};
    /* Create hypened versions */
    forOwn(sourceObj, (val, key) => {
        translated[key.replace(/-/g, '_')] = val;
    });
    return translated;
};
const getBrandShortName = (brand) => {
    switch (brand) {
        case 1:
            return 'BCH';
        case 2:
            return 'BEC';
        case 3:
            return 'CCH';
        default:
            return 'BCH';
    }
};
const NativeTachyons = {
    /* Placeholder */
    styles: {},
    options: {},
    build: function build(options = {}) {
        let brand = 1;
        if (
            options.colors?.brand === ColorsBEC.brand ||
            options?.marca === 'bec'
        )
            brand = 2;
        if (
            options.colors?.brand === ColorsCCH.brand ||
            options?.marca === 'cch'
        )
            brand = 3;
        defaultsDeep(options, {
            rem: Base,
            colors: ColorsBCH,
            fonts: Fonts,
            spacing: HelperSpacing,
            bch: brand === 1,
            bec: brand === 2,
            cch: brand === 3,
            brandName: getBrandShortName(brand),
            brand,
        });
        // eslint-disable-next-line prettier/prettier
        const buildSize = (styleName) => (value = 0) => ({ [styleName]: Scale(toNumber(value)) });
        // eslint-disable-next-line prettier/prettier
        const buildSizeNoScale = (styleName) => (value = 0) => ({ [styleName]: toNumber(value) });
        /* Assign all the styles */
        const styleSheet = {
            flex: buildSizeNoScale('flex'),
            zIndex: buildSizeNoScale('zIndex'),
            bottom: buildSizeNoScale('bottom'),
            top: buildSizeNoScale('top'),
            right: buildSizeNoScale('right'),
            left: buildSizeNoScale('left'),
            borderWidth: buildSizeNoScale('borderWidth'),
            borderTopWidth: buildSizeNoScale('borderTopWidth'),
            borderBottomWidth: buildSizeNoScale('borderBottomWidth'),
            borderRightWidth: buildSizeNoScale('borderRightWidth'),
            borderLeftWidth: buildSizeNoScale('borderLeftWidth'),
            borderRadius: buildSize('borderRadius'),
            borderTopLeftRadius: buildSize('borderTopLeftRadius'),
            borderTopRightRadius: buildSize('borderTopRightRadius'),
            borderBottomLeftRadius: buildSize('borderBottomLeftRadius'),
            borderBottomRightRadius: buildSize('borderBottomRightRadius'),
            lineHeight: buildSize('lineHeight'),
            width: buildSize('width'),
            minWidth: buildSize('minWidth'),
            maxWidth: buildSize('maxWidth'),
            height: buildSize('height'),
            minHeight: buildSize('minHeight'),
            maxHeight: buildSize('maxHeight'),
            fontSize: buildSize('fontSize'),
            paddingTop: buildSize('paddingTop'),
            paddingBottom: buildSize('paddingBottom'),
            paddingLeft: buildSize('paddingLeft'),
            paddingRight: buildSize('paddingRight'),
            paddingVertical: buildSize('paddingVertical'),
            paddingHorizontal: buildSize('paddingHorizontal'),
            marginTop: buildSize('marginTop'),
            marginBottom: buildSize('marginBottom'),
            marginLeft: buildSize('marginLeft'),
            marginRight: buildSize('marginRight'),
            marginVertical: buildSize('marginVertical'),
            marginHorizontal: buildSize('marginHorizontal'),
        };
        assign(styleSheet, borders.width(options.spacing.border));
        assign(styleSheet, borders.radius(options.spacing.radius));
        assign(styleSheet, flexbox);
        assign(styleSheet, shadow(options.colors));
        assign(styleSheet, fontWeights);
        assign(styleSheet, images);
        assign(styleSheet, text);
        assign(styleSheet, widths);
        assign(styleSheet, heights);
        assign(
            styleSheet,
            typeScale({
                type: options.spacing.type,
                lineHeight: options.spacing.lineHeight,
            }),
        );
        assign(styleSheet, spacing(options.spacing.spacer));
        assign(styleSheet, absolute(options.rem));
        assign(styleSheet, opacity);
        assign(styleSheet, layout);
        /* Colors */
        forOwn(options.colors, (val, name) => {
            styleSheet[`bg_${name}`] = { backgroundColor: val };
            styleSheet[`${name}`] = { color: val };
            styleSheet[`bc_${name}`] = { borderColor: val };
        });
        /* Font-families */
        forOwn(options.fonts, (val, key) => {
            styleSheet[`ff_${key}`] = { fontFamily: val };
        });
        assign(
            NativeTachyons.styles,
            StyleSheet.create(hyphensToUnderscores(styleSheet)),
        );
        assign(NativeTachyons.options, options);
    },
};

export default NativeTachyons;
export const {
    styles: HelperStyle,
    build: HelperBuild,
    options: HelperOptions,
} = NativeTachyons;
