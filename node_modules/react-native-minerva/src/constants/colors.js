import Color from 'color';
import { assign } from 'lodash';

/*
 * UTILS COLORS
 */
const darkColor = (color, darken = 0.24) => Color(color).darken(darken).hex();

const lightColor = (color, lighten = 0.2, saturate = 0.2) =>
    Color(color).lighten(lighten).saturate(saturate).hex();

const transparentColor = (color, fade = 0.84) =>
    Color(color).fade(fade).string();

const lighterColor = (color, saturation = 80, lightness = 80) => {
    const hueValue = Color(color).hsl().color[0];
    return Color(`hsl(${hueValue}, ${saturation}%, ${lightness}%)`).hex();
};

const backgroundColor = (color, saturation = 98, lightness = 98) => {
    const hueValue = Color(color).hsl().color[0];
    return Color(`hsl(${hueValue}, ${saturation}%, ${lightness}%)`).hex();
};

export const generateColorsVariants = (colors) => {
    const funcVariants = [
        { callback: darkColor, suffix: '_dark' },
        { callback: lightColor, suffix: '_light' },
        { callback: lighterColor, suffix: '_lighter' },
        { callback: backgroundColor, suffix: '_background' },
        { callback: transparentColor, suffix: '_transparent' },
    ];
    const newColors = {};
    funcVariants.forEach(({ callback, suffix }) => {
        Object.entries(colors).forEach(([key, value]) => {
            newColors[key] = value;
            newColors[`${key}${suffix}`] = callback(value);
        });
    });
    return newColors;
};

/*
 * CARDS COLORS
 * TO DO: actualizar cÃ³digos de colores gold, silver y dark.
 */
const cardColors = {
    gold: '#846837',
    silver: '#878787',
    dark: '#212121',
};

/*
 * DEFAULT COLORS
 */
const defaultColors = {
    primary: '#295EFF',
    brand: '#002464',
    success: '#1E851E',
    info: '#0B78D0',
    warning: '#F45516',
    danger: '#F45516',
    yellow: '#FFD941',
    private: '#948259',
    transparent: 'transparent',
    ...cardColors,
};
const gray = {
    gray_darker: '#0A0A0B',
    gray_dark: '#2A343D',
    gray: '#52677B',
    gray_light: '#8393A3',
    gray_lighter: '#CED7E0',
    gray_background: '#F0F3F5',
    gray_transparent: transparentColor('#52677B'),
};

/*
 * BEC COLORS
 */
const BEC = {
    brand: '#02573d',
    primary: '#03826d',
};

/*
 * CCH COLORS
 */
const CCH = {
    brand: '#0166d5',
    primary: '#3D5CF5',
};

/*
 * MIINVERSION COLORS
 */
const MIINVERSION = {
    brand: '#001B4C',
    primary: '#295EFF',
};
const miinversionBrandLight = '#002464';

/*
 * CREATE COLORS
 */
const buildColors = (settingsColors) => {
    const assignedColors = settingsColors
        ? assign({}, defaultColors, settingsColors)
        : defaultColors;
    return {
        ...generateColorsVariants(assignedColors),
        ...gray,
        black: '#000000',
        white: '#FFFFFF',
        white_transparent: transparentColor('#FFFFFF'),
        transparent: 'transparent',
        modalBackdropColor: 'rgba(82,103,123,0.40)',
    };
};

/*
 * EXPORT COLORS
 */
export const ColorsBCH = buildColors();
/*
 * Reglas BEC
 * Se Sobrescribe formula lighterColor para los colores brand y primary
 */
export const ColorsBEC = {
    ...buildColors(BEC),
    brand_lighter: lighterColor(BEC.brand, 40, 72),
    brand_background: backgroundColor(BEC.brand, 98, 99),
    primary_background: backgroundColor(BEC.primary, 98, 99),
    primary_lighter: lighterColor(BEC.primary, 40, 72),
};

/*
 * Reglas CCH
 * Se Sobrescribe base del color info
 */
export const ColorsCCH = {
    ...buildColors(CCH),
    ...generateColorsVariants({ info: '#497888' }),
};

/*
 * Reglas Mi Inversion
 * Se sobrescribe los primary.
 * Se sobreescribe el brand_light por brand_dark de bch y el brand_dark por un nuevo color, gray_darker.
 * Se sobreescribe el primary_background y el primary_lighter.
 */
export const ColorsMiInversion = {
    ...buildColors(MIINVERSION),
    brand_light: miinversionBrandLight,
    brand_lighter: ColorsBCH.brand_lighter,
    brand_background: ColorsBCH.brand_background,
};
