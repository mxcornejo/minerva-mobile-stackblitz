import 'react-native-gesture-handler/jestSetup';

jest.mock('react-native/Libraries/PermissionsAndroid/PermissionsAndroid', () => ({
    ...jest.requireActual('react-native/Libraries/PermissionsAndroid/PermissionsAndroid'),
    request: jest.fn(),
}));

jest.mock('react-native/Libraries/Utilities/Platform', () => ({
    ...jest.requireActual('react-native/Libraries/Utilities/Platform'),
    isTesting: () => true,
    OS: 'ios',
    Version: 213,
}));

require('react-native-reanimated/lib/reanimated2/jestUtils').setUpTests();

jest.mock('react-native/Libraries/EventEmitter/NativeEventEmitter');

jest.mock('@react-navigation/elements', () => ({
    useHeaderHeight: jest.fn(()=>1),
    HeaderBackButton: () => null,
}));

jest.mock('@react-navigation/bottom-tabs', () => ({
    useBottomTabBarHeight: jest.fn(() => 1),
}));

jest.mock('@react-navigation/native', () => {
    const actualNav = jest.requireActual('@react-navigation/native');
    return {
        ...actualNav,
        useNavigation: () => ({
            navigate: jest.fn(),
        }),
        useRoute: () => mockedRoute,
    };
});

jest.mock('react-native-safe-area-context', () => {
    const inset = { top: 0, right: 0, bottom: 0, left: 0 }
    return {
        SafeAreaProvider: jest.fn().mockImplementation(({ children }) => children),
        SafeAreaConsumer: jest
            .fn()
            .mockImplementation(({ children }) => children(inset)),
        useSafeAreaInsets: jest.fn().mockImplementation(() => inset),
    }
});

jest.mock('react-native/Libraries/Animated/NativeAnimatedHelper');
