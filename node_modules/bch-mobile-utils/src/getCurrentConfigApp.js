import { CONFIGAPP, SECURITY } from 'bch-mobile-constants';
import AsyncStorage from '@react-native-async-storage/async-storage';

const getBundleId = async () => {
    bundleID = await AsyncStorage.getItem('bundleID');
    if (bundleID) {
        return bundleID;
    }
};

const getCurrentConfigApp = async () => {
    const { MIBANCO, MIPAGO, MIINVERSION } = CONFIGAPP;
    let obj = {};
    const resp = await getBundleId();
    if (resp) {
        if (MIBANCO.BUNDLEID.includes(resp)) {
            return obj = MIBANCO;
        }
        if (MIPAGO.BUNDLEID.includes(resp)) {
            return obj = MIPAGO;
        }
        if (MIINVERSION.BUNDLEID.includes(resp)) {
            return obj = MIINVERSION;
        }
    }
    return obj;
};

const getUrlBaseServices = async () => {
    const response = await getCurrentConfigApp();
    if (response) {
        const { URL_SERVICE_APP } = response;
        const urlBase = `${URL_SERVICE_APP}`;
        return urlBase;
    }
};

const getAppSecurityState = async () => {
    const { TOKEN_FIELDS_PRODUCTS_IDS, OBFUSCATE_CARDS_PRODUCTS_NUMBER } = SECURITY;
    const initialSecurityState = {
        tokenFields: false,
        obfuscateCards: false,
    };
    const configApp = await getCurrentConfigApp();
    if ( configApp ) {
        initialSecurityState.tokenFields = configApp.BUNDLEID.some((bundleID) => TOKEN_FIELDS_PRODUCTS_IDS.includes(bundleID));
        initialSecurityState.obfuscateCards = configApp.BUNDLEID.some((bundleID) => OBFUSCATE_CARDS_PRODUCTS_NUMBER.includes(bundleID));
    }
    return initialSecurityState;
};

export {
    getBundleId,
    getCurrentConfigApp,
    getUrlBaseServices,
    getAppSecurityState,
};
