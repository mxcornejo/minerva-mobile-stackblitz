import Formato from './formato';
import { PRODUCTS } from 'bch-mobile-constants';

const PRODUCT_CC_LC = 'CUENTA_CC_LC';
const PRODUCT_AVANCE_TC = 'AVANCE_TC';
const PRODUCT_TEF_TC = 'TEF_TC';

const itemDisponible = {
    title: 'Disponible',
    valueLoading: true,
    value: null,
};

const itemContable = {
    title: 'Contable',
    valueLoading: true,
    value: null,
};

const itemUtilizado = {
    title: 'Utilizado',
    valueLoading: true,
    value: null,
};

const itemLCD = {
    title: 'Línea de Crédito',
    valueLoading: true,
    value: null,
};

const itemLCDisponible = {
    title: 'Línea disponible',
    valueLoading: true,
    value: null,
};

const itemNacional = {
    separator: true,
    title: 'NACIONAL',
};

const itemInternacional = {
    separator: true,
    title: 'INTERNACIONAL',
};

const itemDisponibleAvanceTC = {
    title: 'Disponible avance',
    valueLoading: true,
    value: null,
};

const structureObject = {
    CUENTA_CORRIENTE: [
        itemDisponible,
        itemLCDisponible,
    ],
    LINEA_CREDITO: [
        itemDisponible,
        itemUtilizado,
    ],
    TARJETA_CREDITO: [
        itemDisponible,
        itemUtilizado,
    ],
    CUENTA_VISTA: [
        itemDisponible,
    ],
    CUENTA_FAN: [
        itemDisponible,
    ],
    CUENTA_AHORRO: [
        itemDisponible,
    ],
    LINEA_CREDITO_PAGO: [
        itemDisponible,
    ],
    CUENTA_CC_LC: [
        itemDisponible,
        itemLCD,
    ],
    AVANCE_TC: [
        itemUtilizado,
        itemDisponibleAvanceTC,
    ],
    TEF_TC: [
        itemUtilizado,
        itemDisponibleAvanceTC,
    ],
};

/**
 * Setea los valores de linea de credito
 * @param {number} montoLineaAutorizado Monto linea de credito autorizado
 * @param {number} montoLineaDisponible Monto linea de credito disponible
 */
const setLCDvalues = (montoLineaAutorizado = null, montoLineaDisponible = null) => {
    let disponible = null;
    let utilizado = null;
    if (Formato.checkIsValidValue(montoLineaAutorizado) && Formato.checkIsValidValue(montoLineaDisponible)) {
        const montoLineaAutorizadoNumber = parseInt(montoLineaAutorizado, 10);
        utilizado = montoLineaAutorizadoNumber - parseInt(montoLineaDisponible, 10);
        disponible = montoLineaAutorizadoNumber - utilizado;
    }
    return [disponible, utilizado];
};

/**
 * Retorna estructura base segun tipo de producto
 * @param {string} productType tipo de producto
 * @param {obj} objectData datos del producto
 */
const structureByType = (productType, objectData, codigoProducto) => {
    const {
        PRODUCT_TYPE,
        CODE_PRODUCT: { CEX },
        CURRENCY_TYPE: { USD },
    } = PRODUCTS;
    const {
        saldoDisponible,
        montoLineaAutorizado,
        montoLineaDisponible,
        saldoDisponibleCLP,
        saldoUtilizadoCLP,
        saldoDisponibleUS,
        saldoUtilizadoUS,
        numeroCuentaLCD,
        disponibleAvanceNacional,
    } = objectData;
    let structureParams = [];
    let disponibleUS = '0,00';
    let utilizadoUS = '0,00';
    const lcdValues = setLCDvalues(montoLineaAutorizado, montoLineaDisponible);
    const estructuraTarjetaCredito = () => {
        let avance = '0';
        if (disponibleAvanceNacional) {
            avance = disponibleAvanceNacional;
        }
        structureParams = [
            Formato.montoMoneda(saldoUtilizadoCLP),
            Formato.montoMoneda(avance),
        ];
    };
    switch (productType) {
        case PRODUCT_TYPE.PRODUCT_CC: {
            const lcdItem = numeroCuentaLCD && Formato.montoMoneda(lcdValues[0]);
            structureParams[0] = codigoProducto !== CEX ? Formato.montoMoneda(saldoDisponible) : Formato.moneda(Formato.montoInt(saldoDisponible), USD);
            if (lcdItem) {
                structureParams[1] = lcdItem;
            }
            break;
        }
        case PRODUCT_TYPE.PRODUCT_LC: {
            structureParams = [
                Formato.montoMoneda(lcdValues[0]),
                Formato.montoMoneda(lcdValues[1]),
            ];
            break;
        }
        case PRODUCT_TYPE.PRODUCT_LC_PAY: {
            structureParams = [
                Formato.montoMoneda(saldoDisponible),
            ];
            break;
        }
        case PRODUCT_TYPE.PRODUCT_CV:
            structureParams = [Formato.montoMoneda(saldoDisponible)];
            break;
        case PRODUCT_TYPE.PRODUCT_CF:
            structureParams = [Formato.montoMoneda(saldoDisponible)];
            break;
        case PRODUCT_TYPE.PRODUCT_TC:
            if (saldoDisponibleUS) {
                disponibleUS = saldoDisponibleUS.toString().replace('.', ',');
                utilizadoUS = saldoUtilizadoUS.toString().replace('.', ',');
            }
            structureParams = [
                Formato.montoMoneda(saldoDisponibleCLP),
                Formato.montoMoneda(saldoUtilizadoCLP),
                Formato.moneda(Formato.montoInt(disponibleUS), USD),
                Formato.moneda(Formato.montoInt(utilizadoUS), USD),
            ];
            break;
        case PRODUCT_CC_LC: {
            const lcdItem = numeroCuentaLCD ? Formato.montoMoneda(lcdValues[0]) : null;
            structureParams[0] = Formato.montoMoneda(saldoDisponible);
            if (lcdItem) {
                structureParams[1] = lcdItem;
            }
            break;
        }
        case PRODUCT_AVANCE_TC: {
            estructuraTarjetaCredito();
            break;
        }
        case PRODUCT_TEF_TC: {
            estructuraTarjetaCredito();
            break;
        }
        case PRODUCT_TYPE.PRODUCT_CA: {
            structureParams = [Formato.montoMoneda(saldoDisponible)];
            break;
        }
        default:
            structureParams = [
                Formato.montoMoneda(saldoDisponible),
            ];
    }
    return structureParams;
};

/**
 * Genera estructura de slider segun tipo de producto
 * @param {string} productType tipo de producto
 * @param  {onj} objectData datos del producto
 */
const generateSliderStructure = (productType, objectData, codigoProducto) => {
    const params = structureByType(productType, objectData, codigoProducto);
    const { loading } = objectData;
    const currentStructure = { list: [] };
    currentStructure.list = JSON.parse(JSON.stringify(structureObject[productType]));
    let itemTemp = null;
    let indexArray = 0;
    Object.values(currentStructure.list).forEach((item) => {
        if (Object.prototype.hasOwnProperty.call(item, 'value')) {
            itemTemp = item;
            if (params[indexArray]) {
                itemTemp.valueLoading = loading;
                itemTemp.value = params[indexArray];
            } else {
                currentStructure.list.pop();
            }
            indexArray += 1;
        }
    });
    return currentStructure;
};

export default generateSliderStructure;
