import React, { memo } from 'react';
import PropTypes from 'prop-types';
import { toNumber } from 'lodash';
import {
    View,
    Text,
    HelperStyle,
    Grid,
    Col,
    SelloComprobante,
    CardResumen,
    HelperOptions,
    MapList,
} from 'react-native-minerva';
import { propTypesComprobante, defaultPropsComprobante } from '../types';
import { APP_NAME } from '../constants';

const { MI_BANCO } = APP_NAME;

const propTypes = {
    appName: propTypesComprobante.appName,
    customDataToShare: propTypesComprobante.customDataToShare,
    customStyleListItemLeft: propTypesComprobante.customStyleListItemLeft,
    customStyleListItemRight: propTypesComprobante.customStyleListItemRight,
    idsLabels: propTypesComprobante.idsLabels.isRequired,
    isLightTheme: propTypesComprobante.isLightTheme,
    messageAHO: propTypesComprobante.messageAHO,
    params: propTypesComprobante.params.isRequired,
    renderFooterTextInformation: propTypesComprobante.renderFooterTextInformation,
    renderTextInformation: propTypesComprobante.renderTextInformation,
    renderTopTextInformation: propTypesComprobante.renderTopTextInformation,
    textosLabels: propTypesComprobante.textosLabels.isRequired,
    showEmail: propTypesComprobante.showEmail,
    isSharing: PropTypes.bool.isRequired,
};

const defaultProps = {
    appName: defaultPropsComprobante.appName,
    customDataToShare: defaultPropsComprobante.customDataToShare,
    customStyleListItemLeft: defaultPropsComprobante.customStyleListItemLeft,
    customStyleListItemRight: defaultPropsComprobante.customStyleListItemRight,
    isLightTheme: defaultPropsComprobante.isLightTheme,
    messageAHO: defaultPropsComprobante.messageAHO,
    renderFooterTextInformation: defaultPropsComprobante.renderFooterTextInformation,
    renderTextInformation: defaultPropsComprobante.renderTextInformation,
    renderTopTextInformation: defaultPropsComprobante.renderTopTextInformation,
    showEmail: defaultPropsComprobante.showEmail,
};

const ContentComprobante = ({
    appName,
    customDataToShare,
    customStyleListItemLeft,
    customStyleListItemRight,
    idsLabels,
    isLightTheme,
    isSharing,
    messageAHO,
    params,
    renderFooterTextInformation,
    renderTextInformation,
    renderTopTextInformation,
    textosLabels,
    showEmail,
}) => {
    const renderCardResumenItem = ({ item }) => (
        <View style={HelperStyle.ph_4}>
            <CardResumen
                data={isSharing ? customDataToShare : item}
                customStyleListItemLeft={customStyleListItemLeft}
                customStyleListItemRight={customStyleListItemRight}
            />
        </View>
    );

    const renderCardResumen = () => {
        if (Array.isArray(params?.data[0])) {
            return <MapList data={params.data} renderItem={renderCardResumenItem} />;
        }
        return renderCardResumenItem({ item: params?.data });
    };

    const getMarcaSello = () => {
        if (appName === MI_BANCO) {
            switch (toNumber(HelperOptions.brand)) {
                case 1:
                    return 'appMiBancoBCH';
                case 2:
                    return 'appMiBancoBEC';
                case 3:
                    return 'appMiBancoCCH';
                default:
                    return 'appMiBancoBCH';
            }
        }
        return appName;
    };
    const renderSelloComprobante = () =>
        !isLightTheme && (
            <SelloComprobante
                type={getMarcaSello()}
                accessible
                accessibilityLabel={idsLabels.sello}
                testID={idsLabels.sello}
            />
        );
    const renderEmail = () => (
        <Text smaller style={HelperStyle.mb_0} accessibilityLabel={params.email} testID={params.email}>
            {`${textosLabels.email}\n${params.email}`}
        </Text>
    );
    return (
        <View style={[HelperStyle.bg_white, HelperStyle.pb_4]}>
            {renderTopTextInformation && renderTopTextInformation()}
            {renderCardResumen()}
            {renderTextInformation && renderTextInformation()}
            {messageAHO && messageAHO()}
            <View style={HelperStyle.ph_4}>
                <Grid>
                    <Col size={9}>
                        <Text
                            smaller
                            style={HelperStyle.mb_0}
                            accessibilityLabel={idsLabels.fechaHora}
                            testID={idsLabels.fechaHora}
                        >
                            {textosLabels.fechaHora}
                        </Text>
                        <Text
                            smaller
                            style={[HelperStyle.gray_dark, HelperStyle.mb_2]}
                            accessibilityLabel={params?.fecha}
                            testID={params?.fecha}
                        >
                            {params?.fecha}
                        </Text>
                        <Text
                            smaller
                            style={HelperStyle.mb_0}
                            accessibilityLabel={idsLabels.transaccion}
                            testID={idsLabels.transaccion}
                        >
                            {textosLabels.transaccion}
                        </Text>
                        <Text
                            smaller
                            style={[HelperStyle.gray_dark, HelperStyle.mb_2]}
                            accessibilityLabel={params?.transaccion}
                            testID={params?.transaccion}
                        >
                            {params?.transaccion}
                        </Text>
                    </Col>
                    <Col size={1} style={HelperStyle.ai_fe}>
                        {renderSelloComprobante()}
                    </Col>
                </Grid>
                <Grid>
                    <Col size={10}>{showEmail && params.email && renderEmail()}</Col>
                </Grid>
            </View>
            {renderFooterTextInformation && renderFooterTextInformation()}
        </View>
    );
};

ContentComprobante.propTypes = propTypes;
ContentComprobante.defaultProps = defaultProps;

export default memo(ContentComprobante);
