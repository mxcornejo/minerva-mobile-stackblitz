import React, { memo, useRef, useState } from 'react';
import { Image, Dimensions, Platform } from 'react-native';
import PropTypes from 'prop-types';
import ViewShot from 'react-native-view-shot';
import Share from 'react-native-share';
import { toNumber } from 'lodash';
import Assets from 'bch-assets';
import {
    StatusBar,
    View,
    H2,
    Text,
    Container,
    Content,
    HelperStyle,
    Footer,
    ButtonsGroup,
    Grid,
    Col,
    SelloComprobante,
    CardResumen,
    LottieViewContainer,
    LottieView,
    HelperOptions,
    LinearGradient,
    Scale,
} from 'react-native-minerva';
import { propTypesComprobante, defaultPropsComprobante } from '../types';

const propTypes = {
    params: PropTypes.shape({
        email: PropTypes.string,
        fecha: PropTypes.string,
        color: PropTypes.string,
        operacion: PropTypes.string,
        tipo: PropTypes.string,
        data: PropTypes.arrayOf({}),
        transaccion: PropTypes.string,
    }).isRequired,
    idsLabels: PropTypes.shape({
        tituloVista: PropTypes.string,
        resultadoTransaccion: PropTypes.string,
        iconoCara: PropTypes.string,
        tituloMontoVoucher: PropTypes.string,
        pagadoCon: PropTypes.string,
        pagadoA: PropTypes.string,
        fechaHora: PropTypes.string,
        sello: PropTypes.string,
        transaccion: PropTypes.string,
        compartirComprobante: PropTypes.string,
        irAInicio: PropTypes.string,
        compartirNativo: PropTypes.string,
    }).isRequired,
    textosLabels: PropTypes.shape({
        resultadoTransaccion: PropTypes.string,
        fechaHora: PropTypes.string,
        transaccion: PropTypes.string,
        email: PropTypes.string,
    }).isRequired,
    renderTextInformation: PropTypes.oneOfType([PropTypes.string, PropTypes.array, PropTypes.func, PropTypes.object]),
    navigation: PropTypes.shape({
        navigate: PropTypes.func,
    }).isRequired,
    irAInicioNavigateOtherScreen: PropTypes.string,
    hideShare: PropTypes.bool,
    appName: PropTypes.oneOf(['appMiBanco', 'appMiPago']),
    messageAHO: PropTypes.func,
    customDataToShare: PropTypes.arrayOf({}),
    iconLottie: PropTypes.string,
    customStyleListItemLeft: propTypesComprobante.customStyleListItemLeft,
    customStyleListItemRight: propTypesComprobante.customStyleListItemRight,
};

const defaultProps = {
    irAInicioNavigateOtherScreen: 'Home',
    hideShare: false,
    appName: 'appMiBanco',
    iconLottie: 'success',
    messageAHO: null,
    customDataToShare: [],
    renderTextInformation: '',
    customStyleListItemLeft: defaultPropsComprobante.customStyleListItemLeft,
    customStyleListItemRight: defaultPropsComprobante.customStyleListItemRight,
};

const ComprobanteBloqueoTD = (props) => {
    const {
        navigation,
        params,
        textosLabels,
        renderTextInformation,
        idsLabels,
        irAInicioNavigateOtherScreen,
        hideShare,
        appName,
        customStyleListItemLeft,
        customStyleListItemRight,
        messageAHO,
        customDataToShare,
        iconLottie,
    } = props;
    const { bg } = Assets;
    const { width } = Dimensions.get('window');
    const [isSharing, setIsSharing] = useState(false);
    const refView = useRef(null);
    const imageStyle = {
        width: Scale(width),
        height: Scale(30),
        transform: [{ scale: 1.6 }],
    };
    const marginTopStyle = { marginTop: -Scale(10) };

    const getMarcaSello = () => {
        if (appName === 'appMiPago') {
            return appName;
        }
        switch (toNumber(HelperOptions.brand)) {
            case 1:
                return 'appMiBancoBCH';
            case 2:
                return 'appMiBancoBEC';
            case 3:
                return 'appMiBancoCCH';
            default:
                return 'appMiBancoBCH';
        }
    };

    const onPressCompartir = async () => {
        const data = await refView?.current?.capture();
        const shareImageBase64 = {
            content: `data:image/jpeg;base64,${data}`,
            type: 'url',
        };
        const options = Platform.select({
            ios: {
                activityItemSources: [
                    {
                        placeholderItem: shareImageBase64,
                        item: {
                            default: shareImageBase64,
                        },
                        linkMetadata: {
                            title: '',
                        },
                    },
                ],
            },
            android: {
                title: '',
                url: `data:image/jpeg;base64,${data}`,
                subject: '',
            },
        });
        Share.open(options);
        setIsSharing(false);
    };

    const handleOnPressCompartir = () => {
        if (customDataToShare.length > 0) {
            setIsSharing(true);
            setTimeout(() => onPressCompartir(), 100);
        } else {
            onPressCompartir();
        }
    };

    const onPressInicio = () => navigation.navigate(irAInicioNavigateOtherScreen, { navFromComprobante: Date.now() });

    const ButtonComprobante = [
        {
            title: idsLabels.irAInicio,
            props: {
                neutral: true,
                onPress: onPressInicio,
                accessibilityLabel: idsLabels.irAInicio,
                testID: idsLabels.irAInicio,
            },
        },
    ];

    if (!hideShare) {
        const shareOption = {
            title: idsLabels.compartirComprobante,
            props: {
                primary: true,
                iconName: 'icon-bch-share',
                onPress: handleOnPressCompartir,
                accessibilityLabel: idsLabels.compartirComprobante,
                testID: idsLabels.compartirComprobante,
            },
        };
        ButtonComprobante.splice(0, 0, shareOption);
    }

    const renderEmail = () => {
        if (params.email) {
            return (
                <Text smaller style={HelperStyle.mb_0} accessibilityLabel={params.email} testID={params.email}>
                    {`${textosLabels.email}\n${params.email}`}
                </Text>
            );
        }
        return null;
    };

    const renderCardResumen = () => (
        <CardResumen
            data={isSharing ? customDataToShare : params.data}
            customStyleListItemLeft={customStyleListItemLeft}
            customStyleListItemRight={customStyleListItemRight}
        />
    );

    const renderContent = () => (
        <View style={[HelperStyle.bg_white, HelperStyle.pb_4]}>
            <View style={HelperStyle.ph_4}>{renderCardResumen()}</View>
            {renderTextInformation && renderTextInformation()}
            {messageAHO && messageAHO()}
            <View style={HelperStyle.ph_4}>
                <Grid>
                    <Col size={7}>
                        <Text
                            smaller
                            style={HelperStyle.mb_0}
                            accessibilityLabel={idsLabels.fechaHora}
                            testID={idsLabels.fechaHora}
                        >
                            {textosLabels.fechaHora}
                        </Text>
                        <Text
                            smaller
                            style={[HelperStyle.gray_dark, HelperStyle.mb_0]}
                            accessibilityLabel={params.fecha}
                            testID={params.fecha}
                        >
                            {params.fecha}
                        </Text>
                    </Col>
                    <Col size={3} style={HelperStyle.ai_fe}>
                        <SelloComprobante
                            type={getMarcaSello()}
                            accessible
                            accessibilityLabel={idsLabels.sello}
                            testID={idsLabels.sello}
                        />
                    </Col>
                </Grid>
                <Grid>
                    <Col size={10}>
                        <Text
                            smaller
                            style={[HelperStyle.gray_dark, HelperStyle.mb_0]}
                            accessibilityLabel={params.transaccion}
                            testID={params.transaccion}
                        />
                        {renderEmail()}
                    </Col>
                </Grid>
            </View>
        </View>
    );

    return (
        <Container style={HelperStyle.bg_white}>
            <StatusBar barStyle="light-content" />
            <Content bounces={false}>
                <ViewShot ref={refView} options={{ format: 'jpg', quality: 0.9 }}>
                    <LinearGradient start={{ x: 0, y: 0 }} end={{ x: 1, y: 0 }} style={HelperStyle.pt_2}>
                        <Image source={bg.prepicado} resizeMode="contain" style={imageStyle} />
                        <View style={[HelperStyle.pt_4, HelperStyle.bg_white, marginTopStyle]}>
                            <LottieViewContainer style={HelperStyle.mb_4}>
                                {iconLottie === 'success' && (
                                    <LottieView
                                        source={Assets.lottieAnimations.success}
                                        autoPlay
                                        loop={false}
                                        accessible
                                        accessibilityLabel={idsLabels.iconoCara}
                                        testID={idsLabels.iconoCara}
                                    />
                                )}
                                {iconLottie === 'warning' && (
                                    <LottieView
                                        source={Assets.lottieAnimations.warning}
                                        autoPlay
                                        loop={false}
                                        accessible
                                        accessibilityLabel={idsLabels.iconoCara}
                                        testID={idsLabels.iconoCara}
                                    />
                                )}
                            </LottieViewContainer>
                            <H2
                                style={[
                                    iconLottie === 'success' ? HelperStyle.success : HelperStyle.warning,
                                    HelperStyle.ta_c,
                                ]}
                                accessibilityLabel={idsLabels.resultadoTransaccion}
                                testID={idsLabels.resultadoTransaccion}
                            >
                                {textosLabels.resultadoTransaccion}
                            </H2>
                        </View>
                        {renderContent()}
                    </LinearGradient>
                </ViewShot>
            </Content>
            <Footer>
                <ButtonsGroup items={ButtonComprobante} />
            </Footer>
        </Container>
    );
};

ComprobanteBloqueoTD.propTypes = propTypes;
ComprobanteBloqueoTD.defaultProps = defaultProps;

export default memo(ComprobanteBloqueoTD);
