import React, { memo } from 'react';
import { Image } from 'react-native';
import {
    View,
    H2,
    Text,
    HelperStyle,
    LottieViewContainer,
    LottieView,
    LinearGradient,
    Icon,
} from 'react-native-minerva';
import Assets from 'bch-assets';
import Styles from './style';
import { propTypesComprobante, defaultPropsComprobante } from '../types';
import { STATUS } from '../constants';

const { NEUTRAL } = STATUS;

const propTypes = {
    idsLabels: propTypesComprobante.idsLabels,
    isLightTheme: propTypesComprobante.isLightTheme.isRequired,
    linearGradientProps: propTypesComprobante.linearGradientProps,
    status: propTypesComprobante.status,
    textosLabels: propTypesComprobante.textosLabels,
    headerIconName: propTypesComprobante.headerIconName,
};

const defaultProps = {
    idsLabels: defaultPropsComprobante.idsLabels,
    linearGradientProps: defaultPropsComprobante.linearGradientProps,
    status: defaultPropsComprobante.status,
    textosLabels: defaultPropsComprobante.textosLabels,
    headerIconName: defaultPropsComprobante.headerIconName,
};

const HeaderComprobante = ({ idsLabels, isLightTheme, linearGradientProps, status, textosLabels, headerIconName }) => {
    const { bg } = Assets;
    const { colors, locations } = linearGradientProps;
    const LinearGradientProps = {
        start: { x: 0, y: 0 },
        end: { x: 1, y: 0 },
        style: HelperStyle.pt_2,
        colors,
        locations,
    };

    const renderImagePrepicado = () => <Image source={bg.prepicado} resizeMode="contain" style={Styles.imageStyle} />;

    const renderLinearGradiendConImagenPrepicado = () => {
        if (colors || locations) {
            return (
                <LinearGradient
                    start={LinearGradientProps.start}
                    end={LinearGradientProps.end}
                    style={LinearGradientProps.style}
                    colors={colors}
                    locations={locations}
                >
                    {renderImagePrepicado()}
                </LinearGradient>
            );
        }

        return (
            <LinearGradient
                start={LinearGradientProps.start}
                end={LinearGradientProps.end}
                style={LinearGradientProps.style}
            >
                {renderImagePrepicado()}
            </LinearGradient>
        );
    };

    const renderIconHeader = () => {
        if (status === NEUTRAL) {
            return (
                <Icon
                    style={[Styles.processingIconStyle, HelperStyle.ta_c, HelperStyle.mb_4, HelperStyle.gray]}
                    name={headerIconName}
                />
            );
        }
        return (
            <LottieViewContainer style={HelperStyle.mb_4}>
                <LottieView
                    source={Assets.lottieAnimations[status]}
                    autoPlay
                    loop={false}
                    accessible
                    accessibilityLabel={idsLabels.iconoCara}
                    testID={idsLabels.iconoCara}
                />
            </LottieViewContainer>
        );
    };
    const renderTitle = () => {
        const statusTitleColor = status === NEUTRAL ? HelperStyle.gray_dark : HelperStyle[status];
        return (
            <H2
                style={[statusTitleColor, HelperStyle.ta_c]}
                accessibilityLabel={idsLabels.resultadoTransaccion}
                testID={idsLabels.resultadoTransaccion}
            >
                {textosLabels.resultadoTransaccion}
            </H2>
        );
    };
    const renderSubtitle = () =>
        textosLabels.subtitle && (
            <Text style={HelperStyle.ta_c} accessibilityLabel={idsLabels.subtitle} testID={idsLabels.subtitle}>
                {textosLabels.subtitle}
            </Text>
        );
    return (
        <>
            {!isLightTheme && renderLinearGradiendConImagenPrepicado()}
            <View
                style={[
                    isLightTheme ? HelperStyle.pt_6 : HelperStyle.pt_5,
                    HelperStyle.ph_4,
                    HelperStyle.bg_white,
                    Styles.marginTopStyle,
                ]}
            >
                {renderIconHeader()}
                {renderTitle()}
                {renderSubtitle()}
            </View>
        </>
    );
};

HeaderComprobante.propTypes = propTypes;
HeaderComprobante.defaultProps = defaultProps;

export default memo(HeaderComprobante);
