import PropTypes from 'prop-types';
import { APP_NAME, STATUS } from './constants';

const { MI_BANCO, MI_PAGO, BANCONEXION, MI_INVERSION, MI_SEGURO } = APP_NAME;
const { SUCCESS, DANGER, WARNING, INFO, NEUTRAL } = STATUS;

const propTypesComprobante = {
    appName: PropTypes.oneOf([MI_BANCO, MI_PAGO, BANCONEXION, MI_INVERSION, MI_SEGURO]),
    buttonsGroup: PropTypes.arrayOf(PropTypes.any),
    customDataToShare: PropTypes.arrayOf(PropTypes.any),
    customStyleListItemLeft: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
    customStyleListItemRight: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
    hideIrAlInicio: PropTypes.bool,
    hideShare: PropTypes.bool,
    idsLabels: PropTypes.shape({
        tituloVista: PropTypes.string,
        resultadoTransaccion: PropTypes.string,
        iconoCara: PropTypes.string,
        tituloMontoVoucher: PropTypes.string,
        pagadoCon: PropTypes.string,
        pagadoA: PropTypes.string,
        fechaHora: PropTypes.string,
        sello: PropTypes.string,
        transaccion: PropTypes.string,
        compartirComprobante: PropTypes.string,
        irAInicio: PropTypes.string,
        compartirNativo: PropTypes.string,
    }),
    irAInicioNavigateOtherScreen: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.shape({
            stack: PropTypes.string,
            screen: PropTypes.string,
        }),
    ]),
    linearGradientProps: PropTypes.objectOf(PropTypes.any),
    messageAHO: PropTypes.func,
    navigation: PropTypes.shape({
        navigate: PropTypes.func,
    }),
    /*  

    params.data Contiene la informacion del comprobante a mostrar. Estructura:
    data[
        {
            CardResumen Grande Primera fila label,
            CardResumen Grande Primera fila value,
            CardResumen Grande Primera fila style,
        },
        {
            CardResumen Grande Segunda fila label,
            CardResumen Grande Segunda fila value,
            CardResumen Grande Segunda fila style,
        },
        {
            CardResumen Grande Tercera fila label,
            CardResumen Grande Tercera fila value,
            CardResumen Grande Tercera fila style,
        },
        {...}
    ]

    Si se necesita mostrar mas datos o desglosar la informacion del comprobante
    en elementos mas pequeños(usar varios CardResumen pequeños en lugar de uno grande),
    solo sera necesario modificar el arreglo/array param.data a lo siguiente:

    data[
        [
            [
                {
                    CardResumen 1 Primera fila label,
                    CardResumen 1 Primera fila value,
                    CardResumen 1 Primera fila style,
                },
                {
                    CardResumen 1 Segunda fila label,
                    CardResumen 1 Segunda fila value,
                    CardResumen 1 Primera fila style
                },
                {...}
            ],
            [
                {
                    CardResumen 2 Primera fila label,
                    CardResumen 2 Primera fila value,
                    CardResumen 2 Primera fila style,
                },
                {
                    CardResumen 2 Segunda fila label,
                    CardResumen 2 Segunda fila value,
                    CardResumen 2 Segunda fila style,
                },
                {...}
            ],
            [
                {
                    CardResumen 3 Primera fila label,
                    CardResumen 3 Primera fila value,
                    CardResumen 3 Primera fila style,
                },
                {
                    CardResumen 3 Segunda fila label,
                    CardResumen 3 Segunda fila value,
                    CardResumen 3 Segunda fila style,
                },
                {...}
            ],
            [...]
        ],
    ]

    */
    params: PropTypes.shape({
        fecha: PropTypes.string,
        color: PropTypes.string,
        operacion: PropTypes.string,
        tipo: PropTypes.string,
        data: PropTypes.arrayOf(PropTypes.any),
    }),
    renderFooterTextInformation: PropTypes.oneOfType([PropTypes.func, PropTypes.node, PropTypes.bool]),
    renderTextInformation: PropTypes.oneOfType([PropTypes.func, PropTypes.node, PropTypes.bool]),
    renderTopTextInformation: PropTypes.oneOfType([PropTypes.func, PropTypes.node, PropTypes.bool]),
    status: PropTypes.oneOf([DANGER, INFO, SUCCESS, WARNING, NEUTRAL]),
    textosLabels: PropTypes.shape({
        resultadoTransaccion: PropTypes.string,
        fechaHora: PropTypes.string,
        transaccion: PropTypes.string,
    }),
    showEmail: PropTypes.bool,
    isLightTheme: PropTypes.bool,
    headerIconName: PropTypes.string,
    onPressShare: PropTypes.func,
};

const defaultNavigationParams = {
    stack: 'Home',
    screen: 'Home',
};

const defaultPropsComprobante = {
    appName: MI_BANCO,
    buttonsGroup: [],
    customDataToShare: [],
    customStyleListItemLeft: {},
    customStyleListItemRight: {},
    headerIconName: '',
    hideIrAlInicio: false,
    hideShare: false,
    irAInicioNavigateOtherScreen: defaultNavigationParams,
    isLightTheme: false,
    linearGradientProps: {},
    messageAHO: null,
    onPressShare: () => null,
    renderFooterTextInformation: false,
    renderTextInformation: false,
    renderTopTextInformation: false,
    showEmail: true,
    status: SUCCESS,
};

export { propTypesComprobante, defaultPropsComprobante };
