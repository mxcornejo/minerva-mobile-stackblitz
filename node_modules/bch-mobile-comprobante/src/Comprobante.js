import React, { memo, useRef, useState } from 'react';
import { Platform } from 'react-native';
import ViewShot from 'react-native-view-shot';
import Share from 'react-native-share';
import { isObject } from 'lodash';
import { Container, Content, HelperStyle, Footer, ButtonsGroup } from 'react-native-minerva';
import HeaderComprobante from './components/HeaderComprobante';
import ContentComprobante from './components/ContentComprobante';
import { propTypesComprobante, defaultPropsComprobante } from './types';

const propTypes = {
    appName: propTypesComprobante.appName,
    buttonsGroup: propTypesComprobante.buttonsGroup,
    customDataToShare: propTypesComprobante.customDataToShare,
    customStyleListItemLeft: propTypesComprobante.customStyleListItemLeft,
    customStyleListItemRight: propTypesComprobante.customStyleListItemRight,
    hideIrAlInicio: propTypesComprobante.hideIrAlInicio,
    hideShare: propTypesComprobante.hideShare,
    idsLabels: propTypesComprobante.idsLabels.isRequired,
    irAInicioNavigateOtherScreen: propTypesComprobante.irAInicioNavigateOtherScreen,
    linearGradientProps: propTypesComprobante.linearGradientProps,
    messageAHO: propTypesComprobante.messageAHO,
    navigation: propTypesComprobante.navigation.isRequired,
    params: propTypesComprobante.params.isRequired,
    renderFooterTextInformation: propTypesComprobante.renderFooterTextInformation,
    renderTextInformation: propTypesComprobante.renderTextInformation,
    renderTopTextInformation: propTypesComprobante.renderTopTextInformation,
    status: propTypesComprobante.status,
    textosLabels: propTypesComprobante.textosLabels.isRequired,
    showEmail: propTypesComprobante.showEmail,
    isLightTheme: propTypesComprobante.isLightTheme,
    headerIconName: propTypesComprobante.headerIconName,
    onPressShare: propTypesComprobante.onPressShare,
};

const defaultProps = {
    appName: defaultPropsComprobante.appName,
    buttonsGroup: defaultPropsComprobante.buttonsGroup,
    customDataToShare: defaultPropsComprobante.customDataToShare,
    customStyleListItemLeft: defaultPropsComprobante.customStyleListItemLeft,
    customStyleListItemRight: defaultPropsComprobante.customStyleListItemRight,
    hideIrAlInicio: defaultPropsComprobante.hideIrAlInicio,
    hideShare: defaultPropsComprobante.hideShare,
    irAInicioNavigateOtherScreen: defaultPropsComprobante.irAInicioNavigateOtherScreen,
    linearGradientProps: defaultPropsComprobante.linearGradientProps,
    messageAHO: defaultPropsComprobante.messageAHO,
    renderFooterTextInformation: defaultPropsComprobante.renderFooterTextInformation,
    renderTextInformation: defaultPropsComprobante.renderTextInformation,
    renderTopTextInformation: defaultPropsComprobante.renderTopTextInformation,
    status: defaultPropsComprobante.status,
    showEmail: defaultPropsComprobante.showEmail,
    isLightTheme: defaultPropsComprobante.isLightTheme,
    headerIconName: defaultPropsComprobante.headerIconName,
    onPressShare: defaultPropsComprobante.onPressShare,
};

const Comprobante = (props) => {
    const {
        appName,
        buttonsGroup,
        customDataToShare,
        customStyleListItemLeft,
        customStyleListItemRight,
        hideIrAlInicio,
        hideShare,
        idsLabels,
        irAInicioNavigateOtherScreen,
        linearGradientProps,
        messageAHO,
        navigation,
        params,
        renderFooterTextInformation,
        renderTextInformation,
        renderTopTextInformation,
        status,
        textosLabels,
        showEmail,
        isLightTheme,
        headerIconName,
        onPressShare,
    } = props;
    const [isSharing, setIsSharing] = useState(false);
    const refView = useRef(null);

    const onPressCompartir = async () => {
        const data = await refView?.current?.capture();
        const shareImageBase64 = {
            content: `data:image/jpeg;base64,${data}`,
            type: 'url',
        };
        const options = Platform.select({
            ios: {
                activityItemSources: [
                    {
                        placeholderItem: shareImageBase64,
                        item: {
                            default: shareImageBase64,
                        },
                        linkMetadata: {
                            title: '',
                        },
                    },
                ],
            },
            android: {
                title: '',
                url: `data:image/jpeg;base64,${data}`,
                subject: '',
            },
        });
        Share.open(options);
    };

    const handleOnPressCompartir = () => {
        onPressShare();
        if (customDataToShare.length > 0) {
            setIsSharing(true);
            setTimeout(() => onPressCompartir(), 100);
        } else {
            onPressCompartir();
        }
    };

    const onPressInicio = () => {
        const paramsInicio = { navFromComprobante: Date.now(), updateMovimientos: true };
        const navigateOptions = isObject(irAInicioNavigateOtherScreen)
            ? { screen: irAInicioNavigateOtherScreen?.screen, params: paramsInicio }
            : paramsInicio;
        const navigateTo = isObject(irAInicioNavigateOtherScreen)
            ? irAInicioNavigateOtherScreen?.stack
            : irAInicioNavigateOtherScreen;
        navigation.navigate(navigateTo, navigateOptions);
    };

    const getButtons = () => {
        const footerButtons = [...buttonsGroup];
        if (!hideShare) {
            const shareButtonConfig = {
                title: idsLabels.compartirComprobante,
                props: {
                    primary: true,
                    iconName: 'icon-bch-share',
                    onPress: handleOnPressCompartir,
                    accessibilityLabel: idsLabels.compartirComprobante,
                    testID: idsLabels.compartirComprobante,
                },
            };
            // unshift setea el elemento al principio del array
            footerButtons.unshift(shareButtonConfig);
        }
        if (!hideIrAlInicio) {
            const irAlInicioButtonConfig = {
                title: idsLabels.irAInicio,
                props: {
                    neutral: true,
                    onPress: onPressInicio,
                    accessibilityLabel: idsLabels.irAInicio,
                    testID: idsLabels.irAInicio,
                },
            };
            footerButtons.push(irAlInicioButtonConfig);
        }
        return footerButtons;
    };

    const buttonsGroupItems = getButtons();

    const ViewShotOptions = { format: 'jpg', quality: 0.9, result: 'base64' };
    return (
        <Container style={HelperStyle.bg_white}>
            <Content bounces={false} showsVerticalScrollIndicator={false}>
                <ViewShot ref={refView} options={ViewShotOptions}>
                    <HeaderComprobante
                        idsLabels={idsLabels}
                        isLightTheme={isLightTheme}
                        linearGradientProps={linearGradientProps}
                        status={status}
                        textosLabels={textosLabels}
                        headerIconName={headerIconName}
                    />
                    <ContentComprobante
                        appName={appName}
                        customDataToShare={customDataToShare}
                        customStyleListItemLeft={customStyleListItemLeft}
                        customStyleListItemRight={customStyleListItemRight}
                        idsLabels={idsLabels}
                        isLightTheme={isLightTheme}
                        isSharing={isSharing}
                        messageAHO={messageAHO}
                        params={params}
                        renderFooterTextInformation={renderFooterTextInformation}
                        renderTextInformation={renderTextInformation}
                        renderTopTextInformation={renderTopTextInformation}
                        textosLabels={textosLabels}
                        showEmail={showEmail}
                    />
                </ViewShot>
            </Content>
            <Footer>
                <ButtonsGroup items={buttonsGroupItems} />
            </Footer>
        </Container>
    );
};

Comprobante.propTypes = propTypes;
Comprobante.defaultProps = defaultProps;

export default memo(Comprobante);
